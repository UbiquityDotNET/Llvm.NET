### YamlMime:ManagedReference
items:
- uid: Ubiquity.NET.Llvm.Target
  commentId: T:Ubiquity.NET.Llvm.Target
  id: Target
  parent: Ubiquity.NET.Llvm
  children:
  - Ubiquity.NET.Llvm.Target.AvailableTargets
  - Ubiquity.NET.Llvm.Target.CreateTargetMachine(System.String,System.String,System.String,Ubiquity.NET.Llvm.CodeGenOpt,Ubiquity.NET.Llvm.RelocationMode,Ubiquity.NET.Llvm.CodeModel)
  - Ubiquity.NET.Llvm.Target.CreateTargetMachine(Ubiquity.NET.Llvm.Triple,System.String,System.String,Ubiquity.NET.Llvm.CodeGenOpt,Ubiquity.NET.Llvm.RelocationMode,Ubiquity.NET.Llvm.CodeModel)
  - Ubiquity.NET.Llvm.Target.Description
  - Ubiquity.NET.Llvm.Target.FromTriple(System.String)
  - Ubiquity.NET.Llvm.Target.FromTriple(Ubiquity.NET.Llvm.Triple)
  - Ubiquity.NET.Llvm.Target.HasAsmBackEnd
  - Ubiquity.NET.Llvm.Target.HasJIT
  - Ubiquity.NET.Llvm.Target.HasTargetMachine
  - Ubiquity.NET.Llvm.Target.Name
  langs:
  - csharp
  - vb
  name: Target
  nameWithType: Target
  fullName: Ubiquity.NET.Llvm.Target
  type: Class
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Target.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Target
    path: ../src/Ubiquity.NET.Llvm/Target.cs
    startLine: 89
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: LLVM Target Instruction Set Architecture
  example: []
  syntax:
    content: public class Target
    content.vb: Public Class Target
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Ubiquity.NET.Llvm.Target.Name
  commentId: P:Ubiquity.NET.Llvm.Target.Name
  id: Name
  parent: Ubiquity.NET.Llvm.Target
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Target.Name
  fullName: Ubiquity.NET.Llvm.Target.Name
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Target.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Name
    path: ../src/Ubiquity.NET.Llvm/Target.cs
    startLine: 92
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the name of this target
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Ubiquity.NET.Llvm.Target.Name*
- uid: Ubiquity.NET.Llvm.Target.Description
  commentId: P:Ubiquity.NET.Llvm.Target.Description
  id: Description
  parent: Ubiquity.NET.Llvm.Target
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: Target.Description
  fullName: Ubiquity.NET.Llvm.Target.Description
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Target.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Description
    path: ../src/Ubiquity.NET.Llvm/Target.cs
    startLine: 95
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the description of this target
  example: []
  syntax:
    content: public string Description { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Description As String
  overload: Ubiquity.NET.Llvm.Target.Description*
- uid: Ubiquity.NET.Llvm.Target.HasJIT
  commentId: P:Ubiquity.NET.Llvm.Target.HasJIT
  id: HasJIT
  parent: Ubiquity.NET.Llvm.Target
  langs:
  - csharp
  - vb
  name: HasJIT
  nameWithType: Target.HasJIT
  fullName: Ubiquity.NET.Llvm.Target.HasJIT
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Target.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: HasJIT
    path: ../src/Ubiquity.NET.Llvm/Target.cs
    startLine: 98
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets a value indicating whether this target has JIT support
  example: []
  syntax:
    content: public bool HasJIT { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasJIT As Boolean
  overload: Ubiquity.NET.Llvm.Target.HasJIT*
- uid: Ubiquity.NET.Llvm.Target.HasTargetMachine
  commentId: P:Ubiquity.NET.Llvm.Target.HasTargetMachine
  id: HasTargetMachine
  parent: Ubiquity.NET.Llvm.Target
  langs:
  - csharp
  - vb
  name: HasTargetMachine
  nameWithType: Target.HasTargetMachine
  fullName: Ubiquity.NET.Llvm.Target.HasTargetMachine
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Target.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: HasTargetMachine
    path: ../src/Ubiquity.NET.Llvm/Target.cs
    startLine: 101
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets a value indicating whether this target has a TargetMachine initialized
  example: []
  syntax:
    content: public bool HasTargetMachine { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasTargetMachine As Boolean
  overload: Ubiquity.NET.Llvm.Target.HasTargetMachine*
- uid: Ubiquity.NET.Llvm.Target.HasAsmBackEnd
  commentId: P:Ubiquity.NET.Llvm.Target.HasAsmBackEnd
  id: HasAsmBackEnd
  parent: Ubiquity.NET.Llvm.Target
  langs:
  - csharp
  - vb
  name: HasAsmBackEnd
  nameWithType: Target.HasAsmBackEnd
  fullName: Ubiquity.NET.Llvm.Target.HasAsmBackEnd
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Target.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: HasAsmBackEnd
    path: ../src/Ubiquity.NET.Llvm/Target.cs
    startLine: 104
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets a value indicating whether this target has an Assembly code generating back end initialized
  example: []
  syntax:
    content: public bool HasAsmBackEnd { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasAsmBackEnd As Boolean
  overload: Ubiquity.NET.Llvm.Target.HasAsmBackEnd*
- uid: Ubiquity.NET.Llvm.Target.CreateTargetMachine(Ubiquity.NET.Llvm.Triple,System.String,System.String,Ubiquity.NET.Llvm.CodeGenOpt,Ubiquity.NET.Llvm.RelocationMode,Ubiquity.NET.Llvm.CodeModel)
  commentId: M:Ubiquity.NET.Llvm.Target.CreateTargetMachine(Ubiquity.NET.Llvm.Triple,System.String,System.String,Ubiquity.NET.Llvm.CodeGenOpt,Ubiquity.NET.Llvm.RelocationMode,Ubiquity.NET.Llvm.CodeModel)
  id: CreateTargetMachine(Ubiquity.NET.Llvm.Triple,System.String,System.String,Ubiquity.NET.Llvm.CodeGenOpt,Ubiquity.NET.Llvm.RelocationMode,Ubiquity.NET.Llvm.CodeModel)
  parent: Ubiquity.NET.Llvm.Target
  langs:
  - csharp
  - vb
  name: CreateTargetMachine(Triple, string?, string?, CodeGenOpt, RelocationMode, CodeModel)
  nameWithType: Target.CreateTargetMachine(Triple, string?, string?, CodeGenOpt, RelocationMode, CodeModel)
  fullName: Ubiquity.NET.Llvm.Target.CreateTargetMachine(Ubiquity.NET.Llvm.Triple, string?, string?, Ubiquity.NET.Llvm.CodeGenOpt, Ubiquity.NET.Llvm.RelocationMode, Ubiquity.NET.Llvm.CodeModel)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Target.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: CreateTargetMachine
    path: ../src/Ubiquity.NET.Llvm/Target.cs
    startLine: 114
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Creates a <xref href="Ubiquity.NET.Llvm.TargetMachine" data-throw-if-not-resolved="false"></xref> for the target and specified parameters
  example: []
  syntax:
    content: public TargetMachine CreateTargetMachine(Triple triple, string? cpu = null, string? features = null, CodeGenOpt optLevel = CodeGenOpt.Default, RelocationMode relocationMode = RelocationMode.Default, CodeModel codeModel = CodeModel.Default)
    parameters:
    - id: triple
      type: Ubiquity.NET.Llvm.Triple
      description: Target triple for this machine (e.g. -mtriple)
    - id: cpu
      type: System.String
      description: CPU for this machine (e.g. -mcpu)
    - id: features
      type: System.String
      description: Features for this machine (e.g. -mattr...)
    - id: optLevel
      type: Ubiquity.NET.Llvm.CodeGenOpt
      description: Optimization level
    - id: relocationMode
      type: Ubiquity.NET.Llvm.RelocationMode
      description: Relocation mode for generated code
    - id: codeModel
      type: Ubiquity.NET.Llvm.CodeModel
      description: <xref href="Ubiquity.NET.Llvm.CodeModel" data-throw-if-not-resolved="false"></xref> to use for generated code
    return:
      type: Ubiquity.NET.Llvm.TargetMachine
      description: <xref href="Ubiquity.NET.Llvm.TargetMachine" data-throw-if-not-resolved="false"></xref> based on the specified parameters
    content.vb: Public Function CreateTargetMachine(triple As Triple, cpu As String = Nothing, features As String = Nothing, optLevel As CodeGenOpt = CodeGenOpt.Default, relocationMode As RelocationMode = RelocationMode.Default, codeModel As CodeModel = CodeModel.Default) As TargetMachine
  overload: Ubiquity.NET.Llvm.Target.CreateTargetMachine*
  nameWithType.vb: Target.CreateTargetMachine(Triple, String, String, CodeGenOpt, RelocationMode, CodeModel)
  fullName.vb: Ubiquity.NET.Llvm.Target.CreateTargetMachine(Ubiquity.NET.Llvm.Triple, String, String, Ubiquity.NET.Llvm.CodeGenOpt, Ubiquity.NET.Llvm.RelocationMode, Ubiquity.NET.Llvm.CodeModel)
  name.vb: CreateTargetMachine(Triple, String, String, CodeGenOpt, RelocationMode, CodeModel)
- uid: Ubiquity.NET.Llvm.Target.CreateTargetMachine(System.String,System.String,System.String,Ubiquity.NET.Llvm.CodeGenOpt,Ubiquity.NET.Llvm.RelocationMode,Ubiquity.NET.Llvm.CodeModel)
  commentId: M:Ubiquity.NET.Llvm.Target.CreateTargetMachine(System.String,System.String,System.String,Ubiquity.NET.Llvm.CodeGenOpt,Ubiquity.NET.Llvm.RelocationMode,Ubiquity.NET.Llvm.CodeModel)
  id: CreateTargetMachine(System.String,System.String,System.String,Ubiquity.NET.Llvm.CodeGenOpt,Ubiquity.NET.Llvm.RelocationMode,Ubiquity.NET.Llvm.CodeModel)
  parent: Ubiquity.NET.Llvm.Target
  langs:
  - csharp
  - vb
  name: CreateTargetMachine(string, string?, string?, CodeGenOpt, RelocationMode, CodeModel)
  nameWithType: Target.CreateTargetMachine(string, string?, string?, CodeGenOpt, RelocationMode, CodeModel)
  fullName: Ubiquity.NET.Llvm.Target.CreateTargetMachine(string, string?, string?, Ubiquity.NET.Llvm.CodeGenOpt, Ubiquity.NET.Llvm.RelocationMode, Ubiquity.NET.Llvm.CodeModel)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Target.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: CreateTargetMachine
    path: ../src/Ubiquity.NET.Llvm/Target.cs
    startLine: 134
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Creates a <xref href="Ubiquity.NET.Llvm.TargetMachine" data-throw-if-not-resolved="false"></xref> for the target and specified parameters
  example: []
  syntax:
    content: public TargetMachine CreateTargetMachine(string triple, string? cpu = null, string? features = null, CodeGenOpt optLevel = CodeGenOpt.Default, RelocationMode relocationMode = RelocationMode.Default, CodeModel codeModel = CodeModel.Default)
    parameters:
    - id: triple
      type: System.String
      description: Target triple for this machine (e.g. -mtriple)
    - id: cpu
      type: System.String
      description: CPU for this machine (e.g. -mcpu)
    - id: features
      type: System.String
      description: Features for this machine (e.g. -mattr...)
    - id: optLevel
      type: Ubiquity.NET.Llvm.CodeGenOpt
      description: Optimization level
    - id: relocationMode
      type: Ubiquity.NET.Llvm.RelocationMode
      description: Relocation mode for generated code
    - id: codeModel
      type: Ubiquity.NET.Llvm.CodeModel
      description: <xref href="Ubiquity.NET.Llvm.CodeModel" data-throw-if-not-resolved="false"></xref> to use for generated code
    return:
      type: Ubiquity.NET.Llvm.TargetMachine
      description: <xref href="Ubiquity.NET.Llvm.TargetMachine" data-throw-if-not-resolved="false"></xref> based on the specified parameters
    content.vb: Public Function CreateTargetMachine(triple As String, cpu As String = Nothing, features As String = Nothing, optLevel As CodeGenOpt = CodeGenOpt.Default, relocationMode As RelocationMode = RelocationMode.Default, codeModel As CodeModel = CodeModel.Default) As TargetMachine
  overload: Ubiquity.NET.Llvm.Target.CreateTargetMachine*
  nameWithType.vb: Target.CreateTargetMachine(String, String, String, CodeGenOpt, RelocationMode, CodeModel)
  fullName.vb: Ubiquity.NET.Llvm.Target.CreateTargetMachine(String, String, String, Ubiquity.NET.Llvm.CodeGenOpt, Ubiquity.NET.Llvm.RelocationMode, Ubiquity.NET.Llvm.CodeModel)
  name.vb: CreateTargetMachine(String, String, String, CodeGenOpt, RelocationMode, CodeModel)
- uid: Ubiquity.NET.Llvm.Target.AvailableTargets
  commentId: P:Ubiquity.NET.Llvm.Target.AvailableTargets
  id: AvailableTargets
  parent: Ubiquity.NET.Llvm.Target
  langs:
  - csharp
  - vb
  name: AvailableTargets
  nameWithType: Target.AvailableTargets
  fullName: Ubiquity.NET.Llvm.Target.AvailableTargets
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Target.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AvailableTargets
    path: ../src/Ubiquity.NET.Llvm/Target.cs
    startLine: 147
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets an enumerable collection of the available targets built into this library
  example: []
  syntax:
    content: public static IEnumerable<Target> AvailableTargets { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Target}
    content.vb: Public Shared ReadOnly Property AvailableTargets As IEnumerable(Of Target)
  overload: Ubiquity.NET.Llvm.Target.AvailableTargets*
- uid: Ubiquity.NET.Llvm.Target.FromTriple(Ubiquity.NET.Llvm.Triple)
  commentId: M:Ubiquity.NET.Llvm.Target.FromTriple(Ubiquity.NET.Llvm.Triple)
  id: FromTriple(Ubiquity.NET.Llvm.Triple)
  parent: Ubiquity.NET.Llvm.Target
  langs:
  - csharp
  - vb
  name: FromTriple(Triple)
  nameWithType: Target.FromTriple(Triple)
  fullName: Ubiquity.NET.Llvm.Target.FromTriple(Ubiquity.NET.Llvm.Triple)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Target.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: FromTriple
    path: ../src/Ubiquity.NET.Llvm/Target.cs
    startLine: 163
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the target for a given target "triple" value
  example: []
  syntax:
    content: public static Target FromTriple(Triple triple)
    parameters:
    - id: triple
      type: Ubiquity.NET.Llvm.Triple
      description: Target <xref href="Ubiquity.NET.Llvm.Triple" data-throw-if-not-resolved="false"></xref> describing the target
    return:
      type: Ubiquity.NET.Llvm.Target
      description: Target for the given triple
    content.vb: Public Shared Function FromTriple(triple As Triple) As Target
  overload: Ubiquity.NET.Llvm.Target.FromTriple*
- uid: Ubiquity.NET.Llvm.Target.FromTriple(System.String)
  commentId: M:Ubiquity.NET.Llvm.Target.FromTriple(System.String)
  id: FromTriple(System.String)
  parent: Ubiquity.NET.Llvm.Target
  langs:
  - csharp
  - vb
  name: FromTriple(string)
  nameWithType: Target.FromTriple(string)
  fullName: Ubiquity.NET.Llvm.Target.FromTriple(string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Target.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: FromTriple
    path: ../src/Ubiquity.NET.Llvm/Target.cs
    startLine: 168
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the target for a given target "triple" value
  example: []
  syntax:
    content: public static Target FromTriple(string targetTriple)
    parameters:
    - id: targetTriple
      type: System.String
      description: Target triple string describing the target
    return:
      type: Ubiquity.NET.Llvm.Target
      description: Target for the given triple
    content.vb: Public Shared Function FromTriple(targetTriple As String) As Target
  overload: Ubiquity.NET.Llvm.Target.FromTriple*
  nameWithType.vb: Target.FromTriple(String)
  fullName.vb: Ubiquity.NET.Llvm.Target.FromTriple(String)
  name.vb: FromTriple(String)
references:
- uid: Ubiquity.NET.Llvm
  commentId: N:Ubiquity.NET.Llvm
  href: Ubiquity.html
  name: Ubiquity.NET.Llvm
  nameWithType: Ubiquity.NET.Llvm
  fullName: Ubiquity.NET.Llvm
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Ubiquity.NET.Llvm.Target.Name*
  commentId: Overload:Ubiquity.NET.Llvm.Target.Name
  href: Ubiquity.NET.Llvm.Target.html#Ubiquity_NET_Llvm_Target_Name
  name: Name
  nameWithType: Target.Name
  fullName: Ubiquity.NET.Llvm.Target.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Ubiquity.NET.Llvm.Target.Description*
  commentId: Overload:Ubiquity.NET.Llvm.Target.Description
  href: Ubiquity.NET.Llvm.Target.html#Ubiquity_NET_Llvm_Target_Description
  name: Description
  nameWithType: Target.Description
  fullName: Ubiquity.NET.Llvm.Target.Description
- uid: Ubiquity.NET.Llvm.Target.HasJIT*
  commentId: Overload:Ubiquity.NET.Llvm.Target.HasJIT
  href: Ubiquity.NET.Llvm.Target.html#Ubiquity_NET_Llvm_Target_HasJIT
  name: HasJIT
  nameWithType: Target.HasJIT
  fullName: Ubiquity.NET.Llvm.Target.HasJIT
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Ubiquity.NET.Llvm.Target.HasTargetMachine*
  commentId: Overload:Ubiquity.NET.Llvm.Target.HasTargetMachine
  href: Ubiquity.NET.Llvm.Target.html#Ubiquity_NET_Llvm_Target_HasTargetMachine
  name: HasTargetMachine
  nameWithType: Target.HasTargetMachine
  fullName: Ubiquity.NET.Llvm.Target.HasTargetMachine
- uid: Ubiquity.NET.Llvm.Target.HasAsmBackEnd*
  commentId: Overload:Ubiquity.NET.Llvm.Target.HasAsmBackEnd
  href: Ubiquity.NET.Llvm.Target.html#Ubiquity_NET_Llvm_Target_HasAsmBackEnd
  name: HasAsmBackEnd
  nameWithType: Target.HasAsmBackEnd
  fullName: Ubiquity.NET.Llvm.Target.HasAsmBackEnd
- uid: Ubiquity.NET.Llvm.TargetMachine
  commentId: T:Ubiquity.NET.Llvm.TargetMachine
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.TargetMachine.html
  name: TargetMachine
  nameWithType: TargetMachine
  fullName: Ubiquity.NET.Llvm.TargetMachine
- uid: Ubiquity.NET.Llvm.CodeModel
  commentId: T:Ubiquity.NET.Llvm.CodeModel
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.CodeModel.html
  name: CodeModel
  nameWithType: CodeModel
  fullName: Ubiquity.NET.Llvm.CodeModel
- uid: Ubiquity.NET.Llvm.Target.CreateTargetMachine*
  commentId: Overload:Ubiquity.NET.Llvm.Target.CreateTargetMachine
  href: Ubiquity.NET.Llvm.Target.html#Ubiquity_NET_Llvm_Target_CreateTargetMachine_Ubiquity_NET_Llvm_Triple_System_String_System_String_Ubiquity_NET_Llvm_CodeGenOpt_Ubiquity_NET_Llvm_RelocationMode_Ubiquity_NET_Llvm_CodeModel_
  name: CreateTargetMachine
  nameWithType: Target.CreateTargetMachine
  fullName: Ubiquity.NET.Llvm.Target.CreateTargetMachine
- uid: Ubiquity.NET.Llvm.Triple
  commentId: T:Ubiquity.NET.Llvm.Triple
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.Triple.html
  name: Triple
  nameWithType: Triple
  fullName: Ubiquity.NET.Llvm.Triple
- uid: Ubiquity.NET.Llvm.CodeGenOpt
  commentId: T:Ubiquity.NET.Llvm.CodeGenOpt
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.CodeGenOpt.html
  name: CodeGenOpt
  nameWithType: CodeGenOpt
  fullName: Ubiquity.NET.Llvm.CodeGenOpt
- uid: Ubiquity.NET.Llvm.RelocationMode
  commentId: T:Ubiquity.NET.Llvm.RelocationMode
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.RelocationMode.html
  name: RelocationMode
  nameWithType: RelocationMode
  fullName: Ubiquity.NET.Llvm.RelocationMode
- uid: Ubiquity.NET.Llvm.Target.AvailableTargets*
  commentId: Overload:Ubiquity.NET.Llvm.Target.AvailableTargets
  href: Ubiquity.NET.Llvm.Target.html#Ubiquity_NET_Llvm_Target_AvailableTargets
  name: AvailableTargets
  nameWithType: Target.AvailableTargets
  fullName: Ubiquity.NET.Llvm.Target.AvailableTargets
- uid: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Target}
  commentId: T:System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Target}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Target>
  nameWithType: IEnumerable<Target>
  fullName: System.Collections.Generic.IEnumerable<Ubiquity.NET.Llvm.Target>
  nameWithType.vb: IEnumerable(Of Target)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Ubiquity.NET.Llvm.Target)
  name.vb: IEnumerable(Of Target)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Ubiquity.NET.Llvm.Target
    name: Target
    href: Ubiquity.NET.Llvm.Target.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.Target
    name: Target
    href: Ubiquity.NET.Llvm.Target.html
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Ubiquity.NET.Llvm.Target.FromTriple*
  commentId: Overload:Ubiquity.NET.Llvm.Target.FromTriple
  href: Ubiquity.NET.Llvm.Target.html#Ubiquity_NET_Llvm_Target_FromTriple_Ubiquity_NET_Llvm_Triple_
  name: FromTriple
  nameWithType: Target.FromTriple
  fullName: Ubiquity.NET.Llvm.Target.FromTriple
- uid: Ubiquity.NET.Llvm.Target
  commentId: T:Ubiquity.NET.Llvm.Target
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.Target.html
  name: Target
  nameWithType: Target
  fullName: Ubiquity.NET.Llvm.Target
