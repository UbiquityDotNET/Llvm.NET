### YamlMime:ManagedReference
items:
- uid: Ubiquity.NET.Llvm.ObjectFile.Symbol
  commentId: T:Ubiquity.NET.Llvm.ObjectFile.Symbol
  id: Symbol
  parent: Ubiquity.NET.Llvm.ObjectFile
  children:
  - Ubiquity.NET.Llvm.ObjectFile.Symbol.Address
  - Ubiquity.NET.Llvm.ObjectFile.Symbol.ContainingBinary
  - Ubiquity.NET.Llvm.ObjectFile.Symbol.Equals(System.Object)
  - Ubiquity.NET.Llvm.ObjectFile.Symbol.Equals(Ubiquity.NET.Llvm.ObjectFile.Symbol)
  - Ubiquity.NET.Llvm.ObjectFile.Symbol.GetHashCode
  - Ubiquity.NET.Llvm.ObjectFile.Symbol.Name
  - Ubiquity.NET.Llvm.ObjectFile.Symbol.Section
  - Ubiquity.NET.Llvm.ObjectFile.Symbol.Size
  - Ubiquity.NET.Llvm.ObjectFile.Symbol.op_Equality(Ubiquity.NET.Llvm.ObjectFile.Symbol,Ubiquity.NET.Llvm.ObjectFile.Symbol)
  - Ubiquity.NET.Llvm.ObjectFile.Symbol.op_Inequality(Ubiquity.NET.Llvm.ObjectFile.Symbol,Ubiquity.NET.Llvm.ObjectFile.Symbol)
  langs:
  - csharp
  - vb
  name: Symbol
  nameWithType: Symbol
  fullName: Ubiquity.NET.Llvm.ObjectFile.Symbol
  type: Struct
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/ObjectFile/Symbol.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Symbol
    path: ../src/Ubiquity.NET.Llvm/ObjectFile/Symbol.cs
    startLine: 11
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.ObjectFile
  summary: Symbol in an <xref href="Ubiquity.NET.Llvm.ObjectFile.TargetBinary" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: 'public readonly struct Symbol : IEquatable<Symbol>'
    content.vb: Public Structure Symbol Implements IEquatable(Of Symbol)
  implements:
  - System.IEquatable{Ubiquity.NET.Llvm.ObjectFile.Symbol}
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
- uid: Ubiquity.NET.Llvm.ObjectFile.Symbol.ContainingBinary
  commentId: P:Ubiquity.NET.Llvm.ObjectFile.Symbol.ContainingBinary
  id: ContainingBinary
  parent: Ubiquity.NET.Llvm.ObjectFile.Symbol
  langs:
  - csharp
  - vb
  name: ContainingBinary
  nameWithType: Symbol.ContainingBinary
  fullName: Ubiquity.NET.Llvm.ObjectFile.Symbol.ContainingBinary
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/ObjectFile/Symbol.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: ContainingBinary
    path: ../src/Ubiquity.NET.Llvm/ObjectFile/Symbol.cs
    startLine: 16
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.ObjectFile
  summary: Gets the <xref href="Ubiquity.NET.Llvm.ObjectFile.TargetBinary" data-throw-if-not-resolved="false"></xref> this symbol belongs to
  example: []
  syntax:
    content: public TargetBinary ContainingBinary { get; }
    parameters: []
    return:
      type: Ubiquity.NET.Llvm.ObjectFile.TargetBinary
    content.vb: Public ReadOnly Property ContainingBinary As TargetBinary
  overload: Ubiquity.NET.Llvm.ObjectFile.Symbol.ContainingBinary*
- uid: Ubiquity.NET.Llvm.ObjectFile.Symbol.Section
  commentId: P:Ubiquity.NET.Llvm.ObjectFile.Symbol.Section
  id: Section
  parent: Ubiquity.NET.Llvm.ObjectFile.Symbol
  langs:
  - csharp
  - vb
  name: Section
  nameWithType: Symbol.Section
  fullName: Ubiquity.NET.Llvm.ObjectFile.Symbol.Section
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/ObjectFile/Symbol.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Section
    path: ../src/Ubiquity.NET.Llvm/ObjectFile/Symbol.cs
    startLine: 19
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.ObjectFile
  summary: Gets the section this symbol belongs to
  example: []
  syntax:
    content: public Section Section { get; }
    parameters: []
    return:
      type: Ubiquity.NET.Llvm.ObjectFile.Section
    content.vb: Public ReadOnly Property Section As Section
  overload: Ubiquity.NET.Llvm.ObjectFile.Symbol.Section*
- uid: Ubiquity.NET.Llvm.ObjectFile.Symbol.Name
  commentId: P:Ubiquity.NET.Llvm.ObjectFile.Symbol.Name
  id: Name
  parent: Ubiquity.NET.Llvm.ObjectFile.Symbol
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Symbol.Name
  fullName: Ubiquity.NET.Llvm.ObjectFile.Symbol.Name
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/ObjectFile/Symbol.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Name
    path: ../src/Ubiquity.NET.Llvm/ObjectFile/Symbol.cs
    startLine: 30
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.ObjectFile
  summary: Gets the name of the symbol
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Ubiquity.NET.Llvm.ObjectFile.Symbol.Name*
- uid: Ubiquity.NET.Llvm.ObjectFile.Symbol.Address
  commentId: P:Ubiquity.NET.Llvm.ObjectFile.Symbol.Address
  id: Address
  parent: Ubiquity.NET.Llvm.ObjectFile.Symbol
  langs:
  - csharp
  - vb
  name: Address
  nameWithType: Symbol.Address
  fullName: Ubiquity.NET.Llvm.ObjectFile.Symbol.Address
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/ObjectFile/Symbol.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Address
    path: ../src/Ubiquity.NET.Llvm/ObjectFile/Symbol.cs
    startLine: 33
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.ObjectFile
  summary: Gets the address of the symbol
  example: []
  syntax:
    content: public ulong Address { get; }
    parameters: []
    return:
      type: System.UInt64
    content.vb: Public ReadOnly Property Address As ULong
  overload: Ubiquity.NET.Llvm.ObjectFile.Symbol.Address*
- uid: Ubiquity.NET.Llvm.ObjectFile.Symbol.Size
  commentId: P:Ubiquity.NET.Llvm.ObjectFile.Symbol.Size
  id: Size
  parent: Ubiquity.NET.Llvm.ObjectFile.Symbol
  langs:
  - csharp
  - vb
  name: Size
  nameWithType: Symbol.Size
  fullName: Ubiquity.NET.Llvm.ObjectFile.Symbol.Size
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/ObjectFile/Symbol.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Size
    path: ../src/Ubiquity.NET.Llvm/ObjectFile/Symbol.cs
    startLine: 36
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.ObjectFile
  summary: Gets the size of the symbol
  example: []
  syntax:
    content: public ulong Size { get; }
    parameters: []
    return:
      type: System.UInt64
    content.vb: Public ReadOnly Property Size As ULong
  overload: Ubiquity.NET.Llvm.ObjectFile.Symbol.Size*
- uid: Ubiquity.NET.Llvm.ObjectFile.Symbol.Equals(System.Object)
  commentId: M:Ubiquity.NET.Llvm.ObjectFile.Symbol.Equals(System.Object)
  id: Equals(System.Object)
  parent: Ubiquity.NET.Llvm.ObjectFile.Symbol
  langs:
  - csharp
  - vb
  name: Equals(object?)
  nameWithType: Symbol.Equals(object?)
  fullName: Ubiquity.NET.Llvm.ObjectFile.Symbol.Equals(object?)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/ObjectFile/Symbol.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Equals
    path: ../src/Ubiquity.NET.Llvm/ObjectFile/Symbol.cs
    startLine: 41
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.ObjectFile
  summary: Tests an <xref href="System.Object" data-throw-if-not-resolved="false"></xref> for equality
  example: []
  syntax:
    content: public override bool Equals(object? obj)
    parameters:
    - id: obj
      type: System.Object
      description: <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to compare with this instance
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Ubiquity.NET.Llvm.ObjectFile.Symbol.Equals*
  nameWithType.vb: Symbol.Equals(Object)
  fullName.vb: Ubiquity.NET.Llvm.ObjectFile.Symbol.Equals(Object)
  name.vb: Equals(Object)
- uid: Ubiquity.NET.Llvm.ObjectFile.Symbol.GetHashCode
  commentId: M:Ubiquity.NET.Llvm.ObjectFile.Symbol.GetHashCode
  id: GetHashCode
  parent: Ubiquity.NET.Llvm.ObjectFile.Symbol
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Symbol.GetHashCode()
  fullName: Ubiquity.NET.Llvm.ObjectFile.Symbol.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/ObjectFile/Symbol.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: GetHashCode
    path: ../src/Ubiquity.NET.Llvm/ObjectFile/Symbol.cs
    startLine: 45
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.ObjectFile
  summary: Gets a hash code for this <xref href="Ubiquity.NET.Llvm.ObjectFile.Symbol.Section" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: Hash code
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.ValueType.GetHashCode
  overload: Ubiquity.NET.Llvm.ObjectFile.Symbol.GetHashCode*
- uid: Ubiquity.NET.Llvm.ObjectFile.Symbol.op_Equality(Ubiquity.NET.Llvm.ObjectFile.Symbol,Ubiquity.NET.Llvm.ObjectFile.Symbol)
  commentId: M:Ubiquity.NET.Llvm.ObjectFile.Symbol.op_Equality(Ubiquity.NET.Llvm.ObjectFile.Symbol,Ubiquity.NET.Llvm.ObjectFile.Symbol)
  id: op_Equality(Ubiquity.NET.Llvm.ObjectFile.Symbol,Ubiquity.NET.Llvm.ObjectFile.Symbol)
  parent: Ubiquity.NET.Llvm.ObjectFile.Symbol
  langs:
  - csharp
  - vb
  name: operator ==(Symbol, Symbol)
  nameWithType: Symbol.operator ==(Symbol, Symbol)
  fullName: Ubiquity.NET.Llvm.ObjectFile.Symbol.operator ==(Ubiquity.NET.Llvm.ObjectFile.Symbol, Ubiquity.NET.Llvm.ObjectFile.Symbol)
  type: Operator
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/ObjectFile/Symbol.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: op_Equality
    path: ../src/Ubiquity.NET.Llvm/ObjectFile/Symbol.cs
    startLine: 51
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.ObjectFile
  summary: Equality comparison
  example: []
  syntax:
    content: public static bool operator ==(Symbol left, Symbol right)
    parameters:
    - id: left
      type: Ubiquity.NET.Llvm.ObjectFile.Symbol
      description: left side of comparison
    - id: right
      type: Ubiquity.NET.Llvm.ObjectFile.Symbol
      description: right side of comparison
    return:
      type: System.Boolean
      description: Result of equality test
    content.vb: Public Shared Operator =(left As Symbol, right As Symbol) As Boolean
  overload: Ubiquity.NET.Llvm.ObjectFile.Symbol.op_Equality*
  nameWithType.vb: Symbol.=(Symbol, Symbol)
  fullName.vb: Ubiquity.NET.Llvm.ObjectFile.Symbol.=(Ubiquity.NET.Llvm.ObjectFile.Symbol, Ubiquity.NET.Llvm.ObjectFile.Symbol)
  name.vb: =(Symbol, Symbol)
- uid: Ubiquity.NET.Llvm.ObjectFile.Symbol.op_Inequality(Ubiquity.NET.Llvm.ObjectFile.Symbol,Ubiquity.NET.Llvm.ObjectFile.Symbol)
  commentId: M:Ubiquity.NET.Llvm.ObjectFile.Symbol.op_Inequality(Ubiquity.NET.Llvm.ObjectFile.Symbol,Ubiquity.NET.Llvm.ObjectFile.Symbol)
  id: op_Inequality(Ubiquity.NET.Llvm.ObjectFile.Symbol,Ubiquity.NET.Llvm.ObjectFile.Symbol)
  parent: Ubiquity.NET.Llvm.ObjectFile.Symbol
  langs:
  - csharp
  - vb
  name: operator !=(Symbol, Symbol)
  nameWithType: Symbol.operator !=(Symbol, Symbol)
  fullName: Ubiquity.NET.Llvm.ObjectFile.Symbol.operator !=(Ubiquity.NET.Llvm.ObjectFile.Symbol, Ubiquity.NET.Llvm.ObjectFile.Symbol)
  type: Operator
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/ObjectFile/Symbol.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: op_Inequality
    path: ../src/Ubiquity.NET.Llvm/ObjectFile/Symbol.cs
    startLine: 57
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.ObjectFile
  summary: Inequality comparison
  example: []
  syntax:
    content: public static bool operator !=(Symbol left, Symbol right)
    parameters:
    - id: left
      type: Ubiquity.NET.Llvm.ObjectFile.Symbol
      description: left side of comparison
    - id: right
      type: Ubiquity.NET.Llvm.ObjectFile.Symbol
      description: right side of comparison
    return:
      type: System.Boolean
      description: Result of inequality test
    content.vb: Public Shared Operator <>(left As Symbol, right As Symbol) As Boolean
  overload: Ubiquity.NET.Llvm.ObjectFile.Symbol.op_Inequality*
  nameWithType.vb: Symbol.<>(Symbol, Symbol)
  fullName.vb: Ubiquity.NET.Llvm.ObjectFile.Symbol.<>(Ubiquity.NET.Llvm.ObjectFile.Symbol, Ubiquity.NET.Llvm.ObjectFile.Symbol)
  name.vb: <>(Symbol, Symbol)
- uid: Ubiquity.NET.Llvm.ObjectFile.Symbol.Equals(Ubiquity.NET.Llvm.ObjectFile.Symbol)
  commentId: M:Ubiquity.NET.Llvm.ObjectFile.Symbol.Equals(Ubiquity.NET.Llvm.ObjectFile.Symbol)
  id: Equals(Ubiquity.NET.Llvm.ObjectFile.Symbol)
  parent: Ubiquity.NET.Llvm.ObjectFile.Symbol
  langs:
  - csharp
  - vb
  name: Equals(Symbol)
  nameWithType: Symbol.Equals(Symbol)
  fullName: Ubiquity.NET.Llvm.ObjectFile.Symbol.Equals(Ubiquity.NET.Llvm.ObjectFile.Symbol)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/ObjectFile/Symbol.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Equals
    path: ../src/Ubiquity.NET.Llvm/ObjectFile/Symbol.cs
    startLine: 62
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.ObjectFile
  summary: Tests an <xref href="Ubiquity.NET.Llvm.ObjectFile.Symbol" data-throw-if-not-resolved="false"></xref> for equality
  example: []
  syntax:
    content: public bool Equals(Symbol other)
    parameters:
    - id: other
      type: Ubiquity.NET.Llvm.ObjectFile.Symbol
      description: <xref href="Ubiquity.NET.Llvm.ObjectFile.Symbol" data-throw-if-not-resolved="false"></xref> to compare with this instance
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the
    content.vb: Public Function Equals(other As Symbol) As Boolean
  overload: Ubiquity.NET.Llvm.ObjectFile.Symbol.Equals*
  implements:
  - System.IEquatable{Ubiquity.NET.Llvm.ObjectFile.Symbol}.Equals(Ubiquity.NET.Llvm.ObjectFile.Symbol)
references:
- uid: Ubiquity.NET.Llvm.ObjectFile.TargetBinary
  commentId: T:Ubiquity.NET.Llvm.ObjectFile.TargetBinary
  parent: Ubiquity.NET.Llvm.ObjectFile
  href: Ubiquity.NET.Llvm.ObjectFile.TargetBinary.html
  name: TargetBinary
  nameWithType: TargetBinary
  fullName: Ubiquity.NET.Llvm.ObjectFile.TargetBinary
- uid: Ubiquity.NET.Llvm.ObjectFile
  commentId: N:Ubiquity.NET.Llvm.ObjectFile
  href: Ubiquity.html
  name: Ubiquity.NET.Llvm.ObjectFile
  nameWithType: Ubiquity.NET.Llvm.ObjectFile
  fullName: Ubiquity.NET.Llvm.ObjectFile
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.ObjectFile
    name: ObjectFile
    href: Ubiquity.NET.Llvm.ObjectFile.html
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.ObjectFile
    name: ObjectFile
    href: Ubiquity.NET.Llvm.ObjectFile.html
- uid: System.IEquatable{Ubiquity.NET.Llvm.ObjectFile.Symbol}
  commentId: T:System.IEquatable{Ubiquity.NET.Llvm.ObjectFile.Symbol}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<Symbol>
  nameWithType: IEquatable<Symbol>
  fullName: System.IEquatable<Ubiquity.NET.Llvm.ObjectFile.Symbol>
  nameWithType.vb: IEquatable(Of Symbol)
  fullName.vb: System.IEquatable(Of Ubiquity.NET.Llvm.ObjectFile.Symbol)
  name.vb: IEquatable(Of Symbol)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: Ubiquity.NET.Llvm.ObjectFile.Symbol
    name: Symbol
    href: Ubiquity.NET.Llvm.ObjectFile.Symbol.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.ObjectFile.Symbol
    name: Symbol
    href: Ubiquity.NET.Llvm.ObjectFile.Symbol.html
  - name: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Ubiquity.NET.Llvm.ObjectFile.Symbol.ContainingBinary*
  commentId: Overload:Ubiquity.NET.Llvm.ObjectFile.Symbol.ContainingBinary
  href: Ubiquity.NET.Llvm.ObjectFile.Symbol.html#Ubiquity_NET_Llvm_ObjectFile_Symbol_ContainingBinary
  name: ContainingBinary
  nameWithType: Symbol.ContainingBinary
  fullName: Ubiquity.NET.Llvm.ObjectFile.Symbol.ContainingBinary
- uid: Ubiquity.NET.Llvm.ObjectFile.Symbol.Section*
  commentId: Overload:Ubiquity.NET.Llvm.ObjectFile.Symbol.Section
  href: Ubiquity.NET.Llvm.ObjectFile.Symbol.html#Ubiquity_NET_Llvm_ObjectFile_Symbol_Section
  name: Section
  nameWithType: Symbol.Section
  fullName: Ubiquity.NET.Llvm.ObjectFile.Symbol.Section
- uid: Ubiquity.NET.Llvm.ObjectFile.Section
  commentId: T:Ubiquity.NET.Llvm.ObjectFile.Section
  parent: Ubiquity.NET.Llvm.ObjectFile
  href: Ubiquity.NET.Llvm.ObjectFile.Section.html
  name: Section
  nameWithType: Section
  fullName: Ubiquity.NET.Llvm.ObjectFile.Section
- uid: Ubiquity.NET.Llvm.ObjectFile.Symbol.Name*
  commentId: Overload:Ubiquity.NET.Llvm.ObjectFile.Symbol.Name
  href: Ubiquity.NET.Llvm.ObjectFile.Symbol.html#Ubiquity_NET_Llvm_ObjectFile_Symbol_Name
  name: Name
  nameWithType: Symbol.Name
  fullName: Ubiquity.NET.Llvm.ObjectFile.Symbol.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Ubiquity.NET.Llvm.ObjectFile.Symbol.Address*
  commentId: Overload:Ubiquity.NET.Llvm.ObjectFile.Symbol.Address
  href: Ubiquity.NET.Llvm.ObjectFile.Symbol.html#Ubiquity_NET_Llvm_ObjectFile_Symbol_Address
  name: Address
  nameWithType: Symbol.Address
  fullName: Ubiquity.NET.Llvm.ObjectFile.Symbol.Address
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint64
  name: ulong
  nameWithType: ulong
  fullName: ulong
  nameWithType.vb: ULong
  fullName.vb: ULong
  name.vb: ULong
- uid: Ubiquity.NET.Llvm.ObjectFile.Symbol.Size*
  commentId: Overload:Ubiquity.NET.Llvm.ObjectFile.Symbol.Size
  href: Ubiquity.NET.Llvm.ObjectFile.Symbol.html#Ubiquity_NET_Llvm_ObjectFile_Symbol_Size
  name: Size
  nameWithType: Symbol.Size
  fullName: Ubiquity.NET.Llvm.ObjectFile.Symbol.Size
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Ubiquity.NET.Llvm.ObjectFile.Symbol.Equals*
  commentId: Overload:Ubiquity.NET.Llvm.ObjectFile.Symbol.Equals
  href: Ubiquity.NET.Llvm.ObjectFile.Symbol.html#Ubiquity_NET_Llvm_ObjectFile_Symbol_Equals_System_Object_
  name: Equals
  nameWithType: Symbol.Equals
  fullName: Ubiquity.NET.Llvm.ObjectFile.Symbol.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Ubiquity.NET.Llvm.ObjectFile.Symbol.Section
  commentId: P:Ubiquity.NET.Llvm.ObjectFile.Symbol.Section
  href: Ubiquity.NET.Llvm.ObjectFile.Symbol.html#Ubiquity_NET_Llvm_ObjectFile_Symbol_Section
  name: Section
  nameWithType: Symbol.Section
  fullName: Ubiquity.NET.Llvm.ObjectFile.Symbol.Section
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: Ubiquity.NET.Llvm.ObjectFile.Symbol.GetHashCode*
  commentId: Overload:Ubiquity.NET.Llvm.ObjectFile.Symbol.GetHashCode
  href: Ubiquity.NET.Llvm.ObjectFile.Symbol.html#Ubiquity_NET_Llvm_ObjectFile_Symbol_GetHashCode
  name: GetHashCode
  nameWithType: Symbol.GetHashCode
  fullName: Ubiquity.NET.Llvm.ObjectFile.Symbol.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Ubiquity.NET.Llvm.ObjectFile.Symbol.op_Equality*
  commentId: Overload:Ubiquity.NET.Llvm.ObjectFile.Symbol.op_Equality
  href: Ubiquity.NET.Llvm.ObjectFile.Symbol.html#Ubiquity_NET_Llvm_ObjectFile_Symbol_op_Equality_Ubiquity_NET_Llvm_ObjectFile_Symbol_Ubiquity_NET_Llvm_ObjectFile_Symbol_
  name: operator ==
  nameWithType: Symbol.operator ==
  fullName: Ubiquity.NET.Llvm.ObjectFile.Symbol.operator ==
  nameWithType.vb: Symbol.=
  fullName.vb: Ubiquity.NET.Llvm.ObjectFile.Symbol.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Ubiquity.NET.Llvm.ObjectFile.Symbol.op_Equality*
    name: ==
    href: Ubiquity.NET.Llvm.ObjectFile.Symbol.html#Ubiquity_NET_Llvm_ObjectFile_Symbol_op_Equality_Ubiquity_NET_Llvm_ObjectFile_Symbol_Ubiquity_NET_Llvm_ObjectFile_Symbol_
- uid: Ubiquity.NET.Llvm.ObjectFile.Symbol
  commentId: T:Ubiquity.NET.Llvm.ObjectFile.Symbol
  parent: Ubiquity.NET.Llvm.ObjectFile
  href: Ubiquity.NET.Llvm.ObjectFile.Symbol.html
  name: Symbol
  nameWithType: Symbol
  fullName: Ubiquity.NET.Llvm.ObjectFile.Symbol
- uid: Ubiquity.NET.Llvm.ObjectFile.Symbol.op_Inequality*
  commentId: Overload:Ubiquity.NET.Llvm.ObjectFile.Symbol.op_Inequality
  href: Ubiquity.NET.Llvm.ObjectFile.Symbol.html#Ubiquity_NET_Llvm_ObjectFile_Symbol_op_Inequality_Ubiquity_NET_Llvm_ObjectFile_Symbol_Ubiquity_NET_Llvm_ObjectFile_Symbol_
  name: operator !=
  nameWithType: Symbol.operator !=
  fullName: Ubiquity.NET.Llvm.ObjectFile.Symbol.operator !=
  nameWithType.vb: Symbol.<>
  fullName.vb: Ubiquity.NET.Llvm.ObjectFile.Symbol.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Ubiquity.NET.Llvm.ObjectFile.Symbol.op_Inequality*
    name: '!='
    href: Ubiquity.NET.Llvm.ObjectFile.Symbol.html#Ubiquity_NET_Llvm_ObjectFile_Symbol_op_Inequality_Ubiquity_NET_Llvm_ObjectFile_Symbol_Ubiquity_NET_Llvm_ObjectFile_Symbol_
- uid: System.IEquatable{Ubiquity.NET.Llvm.ObjectFile.Symbol}.Equals(Ubiquity.NET.Llvm.ObjectFile.Symbol)
  commentId: M:System.IEquatable{Ubiquity.NET.Llvm.ObjectFile.Symbol}.Equals(Ubiquity.NET.Llvm.ObjectFile.Symbol)
  parent: System.IEquatable{Ubiquity.NET.Llvm.ObjectFile.Symbol}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(Symbol)
  nameWithType: IEquatable<Symbol>.Equals(Symbol)
  fullName: System.IEquatable<Ubiquity.NET.Llvm.ObjectFile.Symbol>.Equals(Ubiquity.NET.Llvm.ObjectFile.Symbol)
  nameWithType.vb: IEquatable(Of Symbol).Equals(Symbol)
  fullName.vb: System.IEquatable(Of Ubiquity.NET.Llvm.ObjectFile.Symbol).Equals(Ubiquity.NET.Llvm.ObjectFile.Symbol)
  spec.csharp:
  - uid: System.IEquatable{Ubiquity.NET.Llvm.ObjectFile.Symbol}.Equals(Ubiquity.NET.Llvm.ObjectFile.Symbol)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: Ubiquity.NET.Llvm.ObjectFile.Symbol
    name: Symbol
    href: Ubiquity.NET.Llvm.ObjectFile.Symbol.html
  - name: )
  spec.vb:
  - uid: System.IEquatable{Ubiquity.NET.Llvm.ObjectFile.Symbol}.Equals(Ubiquity.NET.Llvm.ObjectFile.Symbol)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: Ubiquity.NET.Llvm.ObjectFile.Symbol
    name: Symbol
    href: Ubiquity.NET.Llvm.ObjectFile.Symbol.html
  - name: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
