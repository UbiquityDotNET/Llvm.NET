### YamlMime:ManagedReference
items:
- uid: Ubiquity.NET.Llvm.IDataLayout
  commentId: T:Ubiquity.NET.Llvm.IDataLayout
  id: IDataLayout
  parent: Ubiquity.NET.Llvm
  children:
  - Ubiquity.NET.Llvm.IDataLayout.AbiAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  - Ubiquity.NET.Llvm.IDataLayout.AbiBitAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  - Ubiquity.NET.Llvm.IDataLayout.AbiSizeOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  - Ubiquity.NET.Llvm.IDataLayout.BitOffsetOfElement(Ubiquity.NET.Llvm.Types.IStructType,System.UInt32)
  - Ubiquity.NET.Llvm.IDataLayout.BitSizeOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  - Ubiquity.NET.Llvm.IDataLayout.ByteSizeOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  - Ubiquity.NET.Llvm.IDataLayout.CallFrameAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  - Ubiquity.NET.Llvm.IDataLayout.ElementAtOffset(Ubiquity.NET.Llvm.Types.IStructType,System.UInt64)
  - Ubiquity.NET.Llvm.IDataLayout.Endianness
  - Ubiquity.NET.Llvm.IDataLayout.IntPtrType(Ubiquity.NET.Llvm.IContext)
  - Ubiquity.NET.Llvm.IDataLayout.IntPtrType(Ubiquity.NET.Llvm.IContext,System.UInt32)
  - Ubiquity.NET.Llvm.IDataLayout.OffsetOfElement(Ubiquity.NET.Llvm.Types.IStructType,System.UInt32)
  - Ubiquity.NET.Llvm.IDataLayout.PointerSize
  - Ubiquity.NET.Llvm.IDataLayout.PointerSize(System.UInt32)
  - Ubiquity.NET.Llvm.IDataLayout.PreferredAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  - Ubiquity.NET.Llvm.IDataLayout.PreferredAlignmentOf(Ubiquity.NET.Llvm.Values.Value)
  - Ubiquity.NET.Llvm.IDataLayout.PreferredBitAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  - Ubiquity.NET.Llvm.IDataLayout.StoreSizeOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  - Ubiquity.NET.Llvm.IDataLayout.ToLazyEncodedString
  langs:
  - csharp
  - vb
  name: IDataLayout
  nameWithType: IDataLayout
  fullName: Ubiquity.NET.Llvm.IDataLayout
  type: Interface
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IDataLayout.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: IDataLayout
    path: ../src/Ubiquity.NET.Llvm/IDataLayout.cs
    startLine: 49
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Provides access to LLVM target data layout information
  remarks: >-
    <p>There is a distinction between various sizes and alignment for a given type

    that are target dependent.</p>

    <p>The following table illustrates the differences in sizes and their meaning
     for a sample set of types.</p>
    |   Type  | SizeInBits | StoreSizeInBits | AbiSizeInBits |

    |---------|------------|-----------------|---------------|

    | i1      | 1          | 8               | 8             |

    | i8      | 8          | 8               | 8             |

    | i19     | 19         | 24              | 32            |

    | i32     | 32         | 32              | 32            |

    | i10     | 100        | 104             | 128           |

    | i128    | 128        | 128             | 128           |

    | Float   | 32         | 32              | 32            |

    | Double  | 64         | 64              | 64            |

    | X86_FP80| 80         | 80              | 96            |


    <div class="NOTE"><h5>note</h5><p>

    The allocation size depends on the alignment, and thus on the target.

    The values in the example table are for x86-32-linux.

    </p></div>

    |   Property      | Definition |

    |-----------------|------------|

    | SizeInBits      | Minimum number of bits needed to represent the full range of values for the type |

    | StoreSizeInBits | Minimum number of bits needed to actually store a *single* value of the type |

    | AbiSizeInBits   | Total number of bits used to store a value in a sequence, including any alignment padding |


    The allocation size determines the total size of each entry in a sequence so that the "next" element is computed

    by adding the size to the start address of the current element.
  example: []
  syntax:
    content: public interface IDataLayout
    content.vb: Public Interface IDataLayout
- uid: Ubiquity.NET.Llvm.IDataLayout.Endianness
  commentId: P:Ubiquity.NET.Llvm.IDataLayout.Endianness
  id: Endianness
  parent: Ubiquity.NET.Llvm.IDataLayout
  langs:
  - csharp
  - vb
  name: Endianness
  nameWithType: IDataLayout.Endianness
  fullName: Ubiquity.NET.Llvm.IDataLayout.Endianness
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IDataLayout.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Endianness
    path: ../src/Ubiquity.NET.Llvm/IDataLayout.cs
    startLine: 52
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the byte ordering for this target
  example: []
  syntax:
    content: ByteOrdering Endianness { get; }
    parameters: []
    return:
      type: Ubiquity.NET.Llvm.ByteOrdering
    content.vb: ReadOnly Property Endianness As ByteOrdering
  overload: Ubiquity.NET.Llvm.IDataLayout.Endianness*
- uid: Ubiquity.NET.Llvm.IDataLayout.PointerSize
  commentId: M:Ubiquity.NET.Llvm.IDataLayout.PointerSize
  id: PointerSize
  parent: Ubiquity.NET.Llvm.IDataLayout
  langs:
  - csharp
  - vb
  name: PointerSize()
  nameWithType: IDataLayout.PointerSize()
  fullName: Ubiquity.NET.Llvm.IDataLayout.PointerSize()
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IDataLayout.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: PointerSize
    path: ../src/Ubiquity.NET.Llvm/IDataLayout.cs
    startLine: 56
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the size of a pointer for the default address space of the target
  example: []
  syntax:
    content: uint PointerSize()
    return:
      type: System.UInt32
      description: Size of a pointer to the default address space
    content.vb: Function PointerSize() As UInteger
  overload: Ubiquity.NET.Llvm.IDataLayout.PointerSize*
- uid: Ubiquity.NET.Llvm.IDataLayout.PointerSize(System.UInt32)
  commentId: M:Ubiquity.NET.Llvm.IDataLayout.PointerSize(System.UInt32)
  id: PointerSize(System.UInt32)
  parent: Ubiquity.NET.Llvm.IDataLayout
  langs:
  - csharp
  - vb
  name: PointerSize(uint)
  nameWithType: IDataLayout.PointerSize(uint)
  fullName: Ubiquity.NET.Llvm.IDataLayout.PointerSize(uint)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IDataLayout.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: PointerSize
    path: ../src/Ubiquity.NET.Llvm/IDataLayout.cs
    startLine: 61
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Retrieves the size of a pointer for a given address space of the target
  example: []
  syntax:
    content: uint PointerSize(uint addressSpace)
    parameters:
    - id: addressSpace
      type: System.UInt32
      description: Address space for the pointer
    return:
      type: System.UInt32
      description: Size of a pointer
    content.vb: Function PointerSize(addressSpace As UInteger) As UInteger
  overload: Ubiquity.NET.Llvm.IDataLayout.PointerSize*
  nameWithType.vb: IDataLayout.PointerSize(UInteger)
  fullName.vb: Ubiquity.NET.Llvm.IDataLayout.PointerSize(UInteger)
  name.vb: PointerSize(UInteger)
- uid: Ubiquity.NET.Llvm.IDataLayout.IntPtrType(Ubiquity.NET.Llvm.IContext)
  commentId: M:Ubiquity.NET.Llvm.IDataLayout.IntPtrType(Ubiquity.NET.Llvm.IContext)
  id: IntPtrType(Ubiquity.NET.Llvm.IContext)
  parent: Ubiquity.NET.Llvm.IDataLayout
  langs:
  - csharp
  - vb
  name: IntPtrType(IContext)
  nameWithType: IDataLayout.IntPtrType(IContext)
  fullName: Ubiquity.NET.Llvm.IDataLayout.IntPtrType(Ubiquity.NET.Llvm.IContext)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IDataLayout.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: IntPtrType
    path: ../src/Ubiquity.NET.Llvm/IDataLayout.cs
    startLine: 66
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Retrieves an LLVM integer type with the same bit width as a pointer for the default address space of the target
  example: []
  syntax:
    content: ITypeRef IntPtrType(IContext context)
    parameters:
    - id: context
      type: Ubiquity.NET.Llvm.IContext
      description: LLVM <xref href="Ubiquity.NET.Llvm.IContext" data-throw-if-not-resolved="false"></xref> that owns the definition of the pointer type to retrieve
    return:
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Integer type matching the bit width of a native pointer in the target's default address space
    content.vb: Function IntPtrType(context As IContext) As ITypeRef
  overload: Ubiquity.NET.Llvm.IDataLayout.IntPtrType*
- uid: Ubiquity.NET.Llvm.IDataLayout.IntPtrType(Ubiquity.NET.Llvm.IContext,System.UInt32)
  commentId: M:Ubiquity.NET.Llvm.IDataLayout.IntPtrType(Ubiquity.NET.Llvm.IContext,System.UInt32)
  id: IntPtrType(Ubiquity.NET.Llvm.IContext,System.UInt32)
  parent: Ubiquity.NET.Llvm.IDataLayout
  langs:
  - csharp
  - vb
  name: IntPtrType(IContext, uint)
  nameWithType: IDataLayout.IntPtrType(IContext, uint)
  fullName: Ubiquity.NET.Llvm.IDataLayout.IntPtrType(Ubiquity.NET.Llvm.IContext, uint)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IDataLayout.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: IntPtrType
    path: ../src/Ubiquity.NET.Llvm/IDataLayout.cs
    startLine: 91
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: >-
    Retrieves an LLVM integer type with the same bit width as
        a pointer for the given address space of the target
  example: []
  syntax:
    content: ITypeRef IntPtrType(IContext context, uint addressSpace)
    parameters:
    - id: context
      type: Ubiquity.NET.Llvm.IContext
      description: LLVM <xref href="Ubiquity.NET.Llvm.IContext" data-throw-if-not-resolved="false"></xref> that owns the definition of the pointer type to retrieve
    - id: addressSpace
      type: System.UInt32
      description: Address space for the pointer
    return:
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Integer type matching the bit width of a native pointer in the target's address space
    content.vb: Function IntPtrType(context As IContext, addressSpace As UInteger) As ITypeRef
  overload: Ubiquity.NET.Llvm.IDataLayout.IntPtrType*
  nameWithType.vb: IDataLayout.IntPtrType(IContext, UInteger)
  fullName.vb: Ubiquity.NET.Llvm.IDataLayout.IntPtrType(Ubiquity.NET.Llvm.IContext, UInteger)
  name.vb: IntPtrType(IContext, UInteger)
- uid: Ubiquity.NET.Llvm.IDataLayout.BitSizeOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  commentId: M:Ubiquity.NET.Llvm.IDataLayout.BitSizeOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  id: BitSizeOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  parent: Ubiquity.NET.Llvm.IDataLayout
  langs:
  - csharp
  - vb
  name: BitSizeOf(ITypeRef)
  nameWithType: IDataLayout.BitSizeOf(ITypeRef)
  fullName: Ubiquity.NET.Llvm.IDataLayout.BitSizeOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IDataLayout.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: BitSizeOf
    path: ../src/Ubiquity.NET.Llvm/IDataLayout.cs
    startLine: 101
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Returns the number of bits necessary to hold the specified type.
  remarks: >-
    <p>This method determines the bit size of a type (e.g. the minimum number of

    bits required to represent any value of the given type.) This is distinct from the storage

    and stack size due to various target alignment requirements.</p>
  example: []
  syntax:
    content: ulong BitSizeOf(ITypeRef typeRef)
    parameters:
    - id: typeRef
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Type to retrieve the size of
    return:
      type: System.UInt64
      description: Size of the type in bits
    content.vb: Function BitSizeOf(typeRef As ITypeRef) As ULong
  overload: Ubiquity.NET.Llvm.IDataLayout.BitSizeOf*
- uid: Ubiquity.NET.Llvm.IDataLayout.StoreSizeOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  commentId: M:Ubiquity.NET.Llvm.IDataLayout.StoreSizeOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  id: StoreSizeOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  parent: Ubiquity.NET.Llvm.IDataLayout
  langs:
  - csharp
  - vb
  name: StoreSizeOf(ITypeRef)
  nameWithType: IDataLayout.StoreSizeOf(ITypeRef)
  fullName: Ubiquity.NET.Llvm.IDataLayout.StoreSizeOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IDataLayout.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: StoreSizeOf
    path: ../src/Ubiquity.NET.Llvm/IDataLayout.cs
    startLine: 112
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Retrieves the number of bits required to store a value of the given type
  remarks: >-
    This method retrieves the storage size in bits of a given type. The storage size
        includes any trailing padding bits that may be needed if the target requires reading a wider
        word size. (e.g. most systems can't write a single bit value for an LLVM i1, thus the
        storage size is whatever the minimum number of bits that the target requires to store a value
        of the given type)
  example: []
  syntax:
    content: ulong StoreSizeOf(ITypeRef typeRef)
    parameters:
    - id: typeRef
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Type to retrieve the storage size of
    return:
      type: System.UInt64
      description: Number of bits required to store a value of the given type in the target
    content.vb: Function StoreSizeOf(typeRef As ITypeRef) As ULong
  overload: Ubiquity.NET.Llvm.IDataLayout.StoreSizeOf*
- uid: Ubiquity.NET.Llvm.IDataLayout.AbiSizeOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  commentId: M:Ubiquity.NET.Llvm.IDataLayout.AbiSizeOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  id: AbiSizeOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  parent: Ubiquity.NET.Llvm.IDataLayout
  langs:
  - csharp
  - vb
  name: AbiSizeOf(ITypeRef)
  nameWithType: IDataLayout.AbiSizeOf(ITypeRef)
  fullName: Ubiquity.NET.Llvm.IDataLayout.AbiSizeOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IDataLayout.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AbiSizeOf
    path: ../src/Ubiquity.NET.Llvm/IDataLayout.cs
    startLine: 121
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Retrieves the ABI specified size of the given type
  remarks: >-
    Returns the offset in bytes between successive objects of the

    specified type, including alignment padding
  example: []
  syntax:
    content: ulong AbiSizeOf(ITypeRef typeRef)
    parameters:
    - id: typeRef
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Type to get the size from
    return:
      type: System.UInt64
      description: Size of the type
    content.vb: Function AbiSizeOf(typeRef As ITypeRef) As ULong
  overload: Ubiquity.NET.Llvm.IDataLayout.AbiSizeOf*
- uid: Ubiquity.NET.Llvm.IDataLayout.AbiAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  commentId: M:Ubiquity.NET.Llvm.IDataLayout.AbiAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  id: AbiAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  parent: Ubiquity.NET.Llvm.IDataLayout
  langs:
  - csharp
  - vb
  name: AbiAlignmentOf(ITypeRef)
  nameWithType: IDataLayout.AbiAlignmentOf(ITypeRef)
  fullName: Ubiquity.NET.Llvm.IDataLayout.AbiAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IDataLayout.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AbiAlignmentOf
    path: ../src/Ubiquity.NET.Llvm/IDataLayout.cs
    startLine: 126
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Retrieves the ABI specified alignment, in bytes, for a specified type
  example: []
  syntax:
    content: uint AbiAlignmentOf(ITypeRef typeRef)
    parameters:
    - id: typeRef
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Type to get the alignment for
    return:
      type: System.UInt32
      description: ABI specified alignment
    content.vb: Function AbiAlignmentOf(typeRef As ITypeRef) As UInteger
  overload: Ubiquity.NET.Llvm.IDataLayout.AbiAlignmentOf*
- uid: Ubiquity.NET.Llvm.IDataLayout.CallFrameAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  commentId: M:Ubiquity.NET.Llvm.IDataLayout.CallFrameAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  id: CallFrameAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  parent: Ubiquity.NET.Llvm.IDataLayout
  langs:
  - csharp
  - vb
  name: CallFrameAlignmentOf(ITypeRef)
  nameWithType: IDataLayout.CallFrameAlignmentOf(ITypeRef)
  fullName: Ubiquity.NET.Llvm.IDataLayout.CallFrameAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IDataLayout.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: CallFrameAlignmentOf
    path: ../src/Ubiquity.NET.Llvm/IDataLayout.cs
    startLine: 131
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Retrieves the call frame alignment for a given type
  example: []
  syntax:
    content: uint CallFrameAlignmentOf(ITypeRef typeRef)
    parameters:
    - id: typeRef
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: type to get the alignment of
    return:
      type: System.UInt32
      description: Alignment for the type
    content.vb: Function CallFrameAlignmentOf(typeRef As ITypeRef) As UInteger
  overload: Ubiquity.NET.Llvm.IDataLayout.CallFrameAlignmentOf*
- uid: Ubiquity.NET.Llvm.IDataLayout.PreferredAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  commentId: M:Ubiquity.NET.Llvm.IDataLayout.PreferredAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  id: PreferredAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  parent: Ubiquity.NET.Llvm.IDataLayout
  langs:
  - csharp
  - vb
  name: PreferredAlignmentOf(ITypeRef)
  nameWithType: IDataLayout.PreferredAlignmentOf(ITypeRef)
  fullName: Ubiquity.NET.Llvm.IDataLayout.PreferredAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IDataLayout.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: PreferredAlignmentOf
    path: ../src/Ubiquity.NET.Llvm/IDataLayout.cs
    startLine: 136
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the preferred alignment for an LLVM type
  example: []
  syntax:
    content: uint PreferredAlignmentOf(ITypeRef typeRef)
    parameters:
    - id: typeRef
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Type to get the alignment of
    return:
      type: System.UInt32
      description: Preferred alignment
    content.vb: Function PreferredAlignmentOf(typeRef As ITypeRef) As UInteger
  overload: Ubiquity.NET.Llvm.IDataLayout.PreferredAlignmentOf*
- uid: Ubiquity.NET.Llvm.IDataLayout.PreferredAlignmentOf(Ubiquity.NET.Llvm.Values.Value)
  commentId: M:Ubiquity.NET.Llvm.IDataLayout.PreferredAlignmentOf(Ubiquity.NET.Llvm.Values.Value)
  id: PreferredAlignmentOf(Ubiquity.NET.Llvm.Values.Value)
  parent: Ubiquity.NET.Llvm.IDataLayout
  langs:
  - csharp
  - vb
  name: PreferredAlignmentOf(Value)
  nameWithType: IDataLayout.PreferredAlignmentOf(Value)
  fullName: Ubiquity.NET.Llvm.IDataLayout.PreferredAlignmentOf(Ubiquity.NET.Llvm.Values.Value)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IDataLayout.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: PreferredAlignmentOf
    path: ../src/Ubiquity.NET.Llvm/IDataLayout.cs
    startLine: 141
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the preferred alignment for a <xref href="Ubiquity.NET.Llvm.Values.Value" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: uint PreferredAlignmentOf(Value value)
    parameters:
    - id: value
      type: Ubiquity.NET.Llvm.Values.Value
      description: Value to get the alignment of
    return:
      type: System.UInt32
      description: Preferred alignment
    content.vb: Function PreferredAlignmentOf(value As Value) As UInteger
  overload: Ubiquity.NET.Llvm.IDataLayout.PreferredAlignmentOf*
- uid: Ubiquity.NET.Llvm.IDataLayout.ElementAtOffset(Ubiquity.NET.Llvm.Types.IStructType,System.UInt64)
  commentId: M:Ubiquity.NET.Llvm.IDataLayout.ElementAtOffset(Ubiquity.NET.Llvm.Types.IStructType,System.UInt64)
  id: ElementAtOffset(Ubiquity.NET.Llvm.Types.IStructType,System.UInt64)
  parent: Ubiquity.NET.Llvm.IDataLayout
  langs:
  - csharp
  - vb
  name: ElementAtOffset(IStructType, ulong)
  nameWithType: IDataLayout.ElementAtOffset(IStructType, ulong)
  fullName: Ubiquity.NET.Llvm.IDataLayout.ElementAtOffset(Ubiquity.NET.Llvm.Types.IStructType, ulong)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IDataLayout.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: ElementAtOffset
    path: ../src/Ubiquity.NET.Llvm/IDataLayout.cs
    startLine: 147
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the element index for a specific offset in a given structure
  example: []
  syntax:
    content: uint ElementAtOffset(IStructType structType, ulong offset)
    parameters:
    - id: structType
      type: Ubiquity.NET.Llvm.Types.IStructType
      description: Type of the structure
    - id: offset
      type: System.UInt64
      description: Offset to determine the index of
    return:
      type: System.UInt32
      description: Index of the element
    content.vb: Function ElementAtOffset(structType As IStructType, offset As ULong) As UInteger
  overload: Ubiquity.NET.Llvm.IDataLayout.ElementAtOffset*
  nameWithType.vb: IDataLayout.ElementAtOffset(IStructType, ULong)
  fullName.vb: Ubiquity.NET.Llvm.IDataLayout.ElementAtOffset(Ubiquity.NET.Llvm.Types.IStructType, ULong)
  name.vb: ElementAtOffset(IStructType, ULong)
- uid: Ubiquity.NET.Llvm.IDataLayout.OffsetOfElement(Ubiquity.NET.Llvm.Types.IStructType,System.UInt32)
  commentId: M:Ubiquity.NET.Llvm.IDataLayout.OffsetOfElement(Ubiquity.NET.Llvm.Types.IStructType,System.UInt32)
  id: OffsetOfElement(Ubiquity.NET.Llvm.Types.IStructType,System.UInt32)
  parent: Ubiquity.NET.Llvm.IDataLayout
  langs:
  - csharp
  - vb
  name: OffsetOfElement(IStructType, uint)
  nameWithType: IDataLayout.OffsetOfElement(IStructType, uint)
  fullName: Ubiquity.NET.Llvm.IDataLayout.OffsetOfElement(Ubiquity.NET.Llvm.Types.IStructType, uint)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IDataLayout.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: OffsetOfElement
    path: ../src/Ubiquity.NET.Llvm/IDataLayout.cs
    startLine: 153
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the offset of an element in a structure
  example: []
  syntax:
    content: ulong OffsetOfElement(IStructType structType, uint element)
    parameters:
    - id: structType
      type: Ubiquity.NET.Llvm.Types.IStructType
      description: Type of the structure
    - id: element
      type: System.UInt32
      description: index of the element in the structure
    return:
      type: System.UInt64
      description: Offset of the element from the beginning of the structure
    content.vb: Function OffsetOfElement(structType As IStructType, element As UInteger) As ULong
  overload: Ubiquity.NET.Llvm.IDataLayout.OffsetOfElement*
  nameWithType.vb: IDataLayout.OffsetOfElement(IStructType, UInteger)
  fullName.vb: Ubiquity.NET.Llvm.IDataLayout.OffsetOfElement(Ubiquity.NET.Llvm.Types.IStructType, UInteger)
  name.vb: OffsetOfElement(IStructType, UInteger)
- uid: Ubiquity.NET.Llvm.IDataLayout.ToLazyEncodedString
  commentId: M:Ubiquity.NET.Llvm.IDataLayout.ToLazyEncodedString
  id: ToLazyEncodedString
  parent: Ubiquity.NET.Llvm.IDataLayout
  langs:
  - csharp
  - vb
  name: ToLazyEncodedString()
  nameWithType: IDataLayout.ToLazyEncodedString()
  fullName: Ubiquity.NET.Llvm.IDataLayout.ToLazyEncodedString()
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IDataLayout.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: ToLazyEncodedString
    path: ../src/Ubiquity.NET.Llvm/IDataLayout.cs
    startLine: 164
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the string representation of this data layout as a <xref href="Ubiquity.NET.InteropHelpers.LazyEncodedString" data-throw-if-not-resolved="false"></xref>
  remarks: >-
    The returned <xref href="Ubiquity.NET.InteropHelpers.LazyEncodedString" data-throw-if-not-resolved="false"></xref> retains a copy of the native code form of the string.

    This value is ONLY marshalled to a managed string when needed (and only once, it is cached). This

    behavior allows for lower overhead re-use of this string in additional APIs as NO marshalling

    needs to occur. This does have the overhead of making a copy of the strings contents as the

    lifetime of the underlying native string is generally unknown and thus not reliable.
  example: []
  syntax:
    content: LazyEncodedString ToLazyEncodedString()
    return:
      type: Ubiquity.NET.InteropHelpers.LazyEncodedString
      description: Representation of the data layout
    content.vb: Function ToLazyEncodedString() As LazyEncodedString
  overload: Ubiquity.NET.Llvm.IDataLayout.ToLazyEncodedString*
- uid: Ubiquity.NET.Llvm.IDataLayout.ByteSizeOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  commentId: M:Ubiquity.NET.Llvm.IDataLayout.ByteSizeOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  id: ByteSizeOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  parent: Ubiquity.NET.Llvm.IDataLayout
  langs:
  - csharp
  - vb
  name: ByteSizeOf(ITypeRef)
  nameWithType: IDataLayout.ByteSizeOf(ITypeRef)
  fullName: Ubiquity.NET.Llvm.IDataLayout.ByteSizeOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IDataLayout.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: ByteSizeOf
    path: ../src/Ubiquity.NET.Llvm/IDataLayout.cs
    startLine: 169
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the byte size of a type
  example: []
  syntax:
    content: ulong ByteSizeOf(ITypeRef llvmType)
    parameters:
    - id: llvmType
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Type to determine the size of
    return:
      type: System.UInt64
      description: Size of the type in bytes
    content.vb: Function ByteSizeOf(llvmType As ITypeRef) As ULong
  overload: Ubiquity.NET.Llvm.IDataLayout.ByteSizeOf*
- uid: Ubiquity.NET.Llvm.IDataLayout.PreferredBitAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  commentId: M:Ubiquity.NET.Llvm.IDataLayout.PreferredBitAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  id: PreferredBitAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  parent: Ubiquity.NET.Llvm.IDataLayout
  langs:
  - csharp
  - vb
  name: PreferredBitAlignmentOf(ITypeRef)
  nameWithType: IDataLayout.PreferredBitAlignmentOf(ITypeRef)
  fullName: Ubiquity.NET.Llvm.IDataLayout.PreferredBitAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IDataLayout.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: PreferredBitAlignmentOf
    path: ../src/Ubiquity.NET.Llvm/IDataLayout.cs
    startLine: 174
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the preferred alignment of the type in bits
  example: []
  syntax:
    content: uint PreferredBitAlignmentOf(ITypeRef llvmType)
    parameters:
    - id: llvmType
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Type to get the alignment of
    return:
      type: System.UInt32
      description: Alignment of the type
    content.vb: Function PreferredBitAlignmentOf(llvmType As ITypeRef) As UInteger
  overload: Ubiquity.NET.Llvm.IDataLayout.PreferredBitAlignmentOf*
- uid: Ubiquity.NET.Llvm.IDataLayout.AbiBitAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  commentId: M:Ubiquity.NET.Llvm.IDataLayout.AbiBitAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  id: AbiBitAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  parent: Ubiquity.NET.Llvm.IDataLayout
  langs:
  - csharp
  - vb
  name: AbiBitAlignmentOf(ITypeRef)
  nameWithType: IDataLayout.AbiBitAlignmentOf(ITypeRef)
  fullName: Ubiquity.NET.Llvm.IDataLayout.AbiBitAlignmentOf(Ubiquity.NET.Llvm.Types.ITypeRef)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IDataLayout.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AbiBitAlignmentOf
    path: ../src/Ubiquity.NET.Llvm/IDataLayout.cs
    startLine: 179
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the ABI alignment of the type in bits
  example: []
  syntax:
    content: uint AbiBitAlignmentOf(ITypeRef llvmType)
    parameters:
    - id: llvmType
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Type to get the alignment of
    return:
      type: System.UInt32
      description: Alignment of the type
    content.vb: Function AbiBitAlignmentOf(llvmType As ITypeRef) As UInteger
  overload: Ubiquity.NET.Llvm.IDataLayout.AbiBitAlignmentOf*
- uid: Ubiquity.NET.Llvm.IDataLayout.BitOffsetOfElement(Ubiquity.NET.Llvm.Types.IStructType,System.UInt32)
  commentId: M:Ubiquity.NET.Llvm.IDataLayout.BitOffsetOfElement(Ubiquity.NET.Llvm.Types.IStructType,System.UInt32)
  id: BitOffsetOfElement(Ubiquity.NET.Llvm.Types.IStructType,System.UInt32)
  parent: Ubiquity.NET.Llvm.IDataLayout
  langs:
  - csharp
  - vb
  name: BitOffsetOfElement(IStructType, uint)
  nameWithType: IDataLayout.BitOffsetOfElement(IStructType, uint)
  fullName: Ubiquity.NET.Llvm.IDataLayout.BitOffsetOfElement(Ubiquity.NET.Llvm.Types.IStructType, uint)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IDataLayout.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: BitOffsetOfElement
    path: ../src/Ubiquity.NET.Llvm/IDataLayout.cs
    startLine: 185
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the offset of a structure element in bits
  example: []
  syntax:
    content: ulong BitOffsetOfElement(IStructType llvmType, uint element)
    parameters:
    - id: llvmType
      type: Ubiquity.NET.Llvm.Types.IStructType
      description: Structure type to get the element offset of
    - id: element
      type: System.UInt32
      description: Index of the element in the structure
    return:
      type: System.UInt64
      description: Offset of the element in bits
    content.vb: Function BitOffsetOfElement(llvmType As IStructType, element As UInteger) As ULong
  overload: Ubiquity.NET.Llvm.IDataLayout.BitOffsetOfElement*
  nameWithType.vb: IDataLayout.BitOffsetOfElement(IStructType, UInteger)
  fullName.vb: Ubiquity.NET.Llvm.IDataLayout.BitOffsetOfElement(Ubiquity.NET.Llvm.Types.IStructType, UInteger)
  name.vb: BitOffsetOfElement(IStructType, UInteger)
references:
- uid: Ubiquity.NET.Llvm
  commentId: N:Ubiquity.NET.Llvm
  href: Ubiquity.html
  name: Ubiquity.NET.Llvm
  nameWithType: Ubiquity.NET.Llvm
  fullName: Ubiquity.NET.Llvm
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
- uid: Ubiquity.NET.Llvm.IDataLayout.Endianness*
  commentId: Overload:Ubiquity.NET.Llvm.IDataLayout.Endianness
  href: Ubiquity.NET.Llvm.IDataLayout.html#Ubiquity_NET_Llvm_IDataLayout_Endianness
  name: Endianness
  nameWithType: IDataLayout.Endianness
  fullName: Ubiquity.NET.Llvm.IDataLayout.Endianness
- uid: Ubiquity.NET.Llvm.ByteOrdering
  commentId: T:Ubiquity.NET.Llvm.ByteOrdering
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.ByteOrdering.html
  name: ByteOrdering
  nameWithType: ByteOrdering
  fullName: Ubiquity.NET.Llvm.ByteOrdering
- uid: Ubiquity.NET.Llvm.IDataLayout.PointerSize*
  commentId: Overload:Ubiquity.NET.Llvm.IDataLayout.PointerSize
  href: Ubiquity.NET.Llvm.IDataLayout.html#Ubiquity_NET_Llvm_IDataLayout_PointerSize
  name: PointerSize
  nameWithType: IDataLayout.PointerSize
  fullName: Ubiquity.NET.Llvm.IDataLayout.PointerSize
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint32
  name: uint
  nameWithType: uint
  fullName: uint
  nameWithType.vb: UInteger
  fullName.vb: UInteger
  name.vb: UInteger
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Ubiquity.NET.Llvm.IContext
  commentId: T:Ubiquity.NET.Llvm.IContext
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.IContext.html
  name: IContext
  nameWithType: IContext
  fullName: Ubiquity.NET.Llvm.IContext
- uid: Ubiquity.NET.Llvm.IDataLayout.IntPtrType*
  commentId: Overload:Ubiquity.NET.Llvm.IDataLayout.IntPtrType
  href: Ubiquity.NET.Llvm.IDataLayout.html#Ubiquity_NET_Llvm_IDataLayout_IntPtrType_Ubiquity_NET_Llvm_IContext_
  name: IntPtrType
  nameWithType: IDataLayout.IntPtrType
  fullName: Ubiquity.NET.Llvm.IDataLayout.IntPtrType
- uid: Ubiquity.NET.Llvm.Types.ITypeRef
  commentId: T:Ubiquity.NET.Llvm.Types.ITypeRef
  parent: Ubiquity.NET.Llvm.Types
  href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  name: ITypeRef
  nameWithType: ITypeRef
  fullName: Ubiquity.NET.Llvm.Types.ITypeRef
- uid: Ubiquity.NET.Llvm.Types
  commentId: N:Ubiquity.NET.Llvm.Types
  href: Ubiquity.html
  name: Ubiquity.NET.Llvm.Types
  nameWithType: Ubiquity.NET.Llvm.Types
  fullName: Ubiquity.NET.Llvm.Types
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.Types
    name: Types
    href: Ubiquity.NET.Llvm.Types.html
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.Types
    name: Types
    href: Ubiquity.NET.Llvm.Types.html
- uid: Ubiquity.NET.Llvm.IDataLayout.BitSizeOf*
  commentId: Overload:Ubiquity.NET.Llvm.IDataLayout.BitSizeOf
  href: Ubiquity.NET.Llvm.IDataLayout.html#Ubiquity_NET_Llvm_IDataLayout_BitSizeOf_Ubiquity_NET_Llvm_Types_ITypeRef_
  name: BitSizeOf
  nameWithType: IDataLayout.BitSizeOf
  fullName: Ubiquity.NET.Llvm.IDataLayout.BitSizeOf
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint64
  name: ulong
  nameWithType: ulong
  fullName: ulong
  nameWithType.vb: ULong
  fullName.vb: ULong
  name.vb: ULong
- uid: Ubiquity.NET.Llvm.IDataLayout.StoreSizeOf*
  commentId: Overload:Ubiquity.NET.Llvm.IDataLayout.StoreSizeOf
  href: Ubiquity.NET.Llvm.IDataLayout.html#Ubiquity_NET_Llvm_IDataLayout_StoreSizeOf_Ubiquity_NET_Llvm_Types_ITypeRef_
  name: StoreSizeOf
  nameWithType: IDataLayout.StoreSizeOf
  fullName: Ubiquity.NET.Llvm.IDataLayout.StoreSizeOf
- uid: Ubiquity.NET.Llvm.IDataLayout.AbiSizeOf*
  commentId: Overload:Ubiquity.NET.Llvm.IDataLayout.AbiSizeOf
  href: Ubiquity.NET.Llvm.IDataLayout.html#Ubiquity_NET_Llvm_IDataLayout_AbiSizeOf_Ubiquity_NET_Llvm_Types_ITypeRef_
  name: AbiSizeOf
  nameWithType: IDataLayout.AbiSizeOf
  fullName: Ubiquity.NET.Llvm.IDataLayout.AbiSizeOf
- uid: Ubiquity.NET.Llvm.IDataLayout.AbiAlignmentOf*
  commentId: Overload:Ubiquity.NET.Llvm.IDataLayout.AbiAlignmentOf
  href: Ubiquity.NET.Llvm.IDataLayout.html#Ubiquity_NET_Llvm_IDataLayout_AbiAlignmentOf_Ubiquity_NET_Llvm_Types_ITypeRef_
  name: AbiAlignmentOf
  nameWithType: IDataLayout.AbiAlignmentOf
  fullName: Ubiquity.NET.Llvm.IDataLayout.AbiAlignmentOf
- uid: Ubiquity.NET.Llvm.IDataLayout.CallFrameAlignmentOf*
  commentId: Overload:Ubiquity.NET.Llvm.IDataLayout.CallFrameAlignmentOf
  href: Ubiquity.NET.Llvm.IDataLayout.html#Ubiquity_NET_Llvm_IDataLayout_CallFrameAlignmentOf_Ubiquity_NET_Llvm_Types_ITypeRef_
  name: CallFrameAlignmentOf
  nameWithType: IDataLayout.CallFrameAlignmentOf
  fullName: Ubiquity.NET.Llvm.IDataLayout.CallFrameAlignmentOf
- uid: Ubiquity.NET.Llvm.IDataLayout.PreferredAlignmentOf*
  commentId: Overload:Ubiquity.NET.Llvm.IDataLayout.PreferredAlignmentOf
  href: Ubiquity.NET.Llvm.IDataLayout.html#Ubiquity_NET_Llvm_IDataLayout_PreferredAlignmentOf_Ubiquity_NET_Llvm_Types_ITypeRef_
  name: PreferredAlignmentOf
  nameWithType: IDataLayout.PreferredAlignmentOf
  fullName: Ubiquity.NET.Llvm.IDataLayout.PreferredAlignmentOf
- uid: Ubiquity.NET.Llvm.Values.Value
  commentId: T:Ubiquity.NET.Llvm.Values.Value
  parent: Ubiquity.NET.Llvm.Values
  href: Ubiquity.NET.Llvm.Values.Value.html
  name: Value
  nameWithType: Value
  fullName: Ubiquity.NET.Llvm.Values.Value
- uid: Ubiquity.NET.Llvm.Values
  commentId: N:Ubiquity.NET.Llvm.Values
  href: Ubiquity.html
  name: Ubiquity.NET.Llvm.Values
  nameWithType: Ubiquity.NET.Llvm.Values
  fullName: Ubiquity.NET.Llvm.Values
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.Values
    name: Values
    href: Ubiquity.NET.Llvm.Values.html
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.Values
    name: Values
    href: Ubiquity.NET.Llvm.Values.html
- uid: Ubiquity.NET.Llvm.IDataLayout.ElementAtOffset*
  commentId: Overload:Ubiquity.NET.Llvm.IDataLayout.ElementAtOffset
  href: Ubiquity.NET.Llvm.IDataLayout.html#Ubiquity_NET_Llvm_IDataLayout_ElementAtOffset_Ubiquity_NET_Llvm_Types_IStructType_System_UInt64_
  name: ElementAtOffset
  nameWithType: IDataLayout.ElementAtOffset
  fullName: Ubiquity.NET.Llvm.IDataLayout.ElementAtOffset
- uid: Ubiquity.NET.Llvm.Types.IStructType
  commentId: T:Ubiquity.NET.Llvm.Types.IStructType
  parent: Ubiquity.NET.Llvm.Types
  href: Ubiquity.NET.Llvm.Types.IStructType.html
  name: IStructType
  nameWithType: IStructType
  fullName: Ubiquity.NET.Llvm.Types.IStructType
- uid: Ubiquity.NET.Llvm.IDataLayout.OffsetOfElement*
  commentId: Overload:Ubiquity.NET.Llvm.IDataLayout.OffsetOfElement
  href: Ubiquity.NET.Llvm.IDataLayout.html#Ubiquity_NET_Llvm_IDataLayout_OffsetOfElement_Ubiquity_NET_Llvm_Types_IStructType_System_UInt32_
  name: OffsetOfElement
  nameWithType: IDataLayout.OffsetOfElement
  fullName: Ubiquity.NET.Llvm.IDataLayout.OffsetOfElement
- uid: Ubiquity.NET.InteropHelpers.LazyEncodedString
  commentId: T:Ubiquity.NET.InteropHelpers.LazyEncodedString
  parent: Ubiquity.NET.InteropHelpers
  name: LazyEncodedString
  nameWithType: LazyEncodedString
  fullName: Ubiquity.NET.InteropHelpers.LazyEncodedString
- uid: Ubiquity.NET.Llvm.IDataLayout.ToLazyEncodedString*
  commentId: Overload:Ubiquity.NET.Llvm.IDataLayout.ToLazyEncodedString
  href: Ubiquity.NET.Llvm.IDataLayout.html#Ubiquity_NET_Llvm_IDataLayout_ToLazyEncodedString
  name: ToLazyEncodedString
  nameWithType: IDataLayout.ToLazyEncodedString
  fullName: Ubiquity.NET.Llvm.IDataLayout.ToLazyEncodedString
- uid: Ubiquity.NET.InteropHelpers
  commentId: N:Ubiquity.NET.InteropHelpers
  name: Ubiquity.NET.InteropHelpers
  nameWithType: Ubiquity.NET.InteropHelpers
  fullName: Ubiquity.NET.InteropHelpers
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
  - name: .
  - uid: Ubiquity.NET
    name: NET
  - name: .
  - uid: Ubiquity.NET.InteropHelpers
    name: InteropHelpers
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
  - name: .
  - uid: Ubiquity.NET
    name: NET
  - name: .
  - uid: Ubiquity.NET.InteropHelpers
    name: InteropHelpers
- uid: Ubiquity.NET.Llvm.IDataLayout.ByteSizeOf*
  commentId: Overload:Ubiquity.NET.Llvm.IDataLayout.ByteSizeOf
  href: Ubiquity.NET.Llvm.IDataLayout.html#Ubiquity_NET_Llvm_IDataLayout_ByteSizeOf_Ubiquity_NET_Llvm_Types_ITypeRef_
  name: ByteSizeOf
  nameWithType: IDataLayout.ByteSizeOf
  fullName: Ubiquity.NET.Llvm.IDataLayout.ByteSizeOf
- uid: Ubiquity.NET.Llvm.IDataLayout.PreferredBitAlignmentOf*
  commentId: Overload:Ubiquity.NET.Llvm.IDataLayout.PreferredBitAlignmentOf
  href: Ubiquity.NET.Llvm.IDataLayout.html#Ubiquity_NET_Llvm_IDataLayout_PreferredBitAlignmentOf_Ubiquity_NET_Llvm_Types_ITypeRef_
  name: PreferredBitAlignmentOf
  nameWithType: IDataLayout.PreferredBitAlignmentOf
  fullName: Ubiquity.NET.Llvm.IDataLayout.PreferredBitAlignmentOf
- uid: Ubiquity.NET.Llvm.IDataLayout.AbiBitAlignmentOf*
  commentId: Overload:Ubiquity.NET.Llvm.IDataLayout.AbiBitAlignmentOf
  href: Ubiquity.NET.Llvm.IDataLayout.html#Ubiquity_NET_Llvm_IDataLayout_AbiBitAlignmentOf_Ubiquity_NET_Llvm_Types_ITypeRef_
  name: AbiBitAlignmentOf
  nameWithType: IDataLayout.AbiBitAlignmentOf
  fullName: Ubiquity.NET.Llvm.IDataLayout.AbiBitAlignmentOf
- uid: Ubiquity.NET.Llvm.IDataLayout.BitOffsetOfElement*
  commentId: Overload:Ubiquity.NET.Llvm.IDataLayout.BitOffsetOfElement
  href: Ubiquity.NET.Llvm.IDataLayout.html#Ubiquity_NET_Llvm_IDataLayout_BitOffsetOfElement_Ubiquity_NET_Llvm_Types_IStructType_System_UInt32_
  name: BitOffsetOfElement
  nameWithType: IDataLayout.BitOffsetOfElement
  fullName: Ubiquity.NET.Llvm.IDataLayout.BitOffsetOfElement
