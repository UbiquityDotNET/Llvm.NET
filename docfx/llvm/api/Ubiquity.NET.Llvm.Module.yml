### YamlMime:ManagedReference
items:
- uid: Ubiquity.NET.Llvm.Module
  commentId: T:Ubiquity.NET.Llvm.Module
  id: Module
  parent: Ubiquity.NET.Llvm
  children:
  - Ubiquity.NET.Llvm.Module.AddAlias(Ubiquity.NET.Llvm.Values.Value,System.String,System.UInt32)
  - Ubiquity.NET.Llvm.Module.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
  - Ubiquity.NET.Llvm.Module.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
  - Ubiquity.NET.Llvm.Module.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
  - Ubiquity.NET.Llvm.Module.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
  - Ubiquity.NET.Llvm.Module.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
  - Ubiquity.NET.Llvm.Module.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
  - Ubiquity.NET.Llvm.Module.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,System.UInt32)
  - Ubiquity.NET.Llvm.Module.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
  - Ubiquity.NET.Llvm.Module.AddNamedMetadataOperand(System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
  - Ubiquity.NET.Llvm.Module.AddVersionIdentMetadata(System.String)
  - Ubiquity.NET.Llvm.Module.Aliases
  - Ubiquity.NET.Llvm.Module.AppendInlineAsm(System.String)
  - Ubiquity.NET.Llvm.Module.Clone
  - Ubiquity.NET.Llvm.Module.Clone(Ubiquity.NET.Llvm.IContext)
  - Ubiquity.NET.Llvm.Module.Comdats
  - Ubiquity.NET.Llvm.Module.CompileUnits
  - Ubiquity.NET.Llvm.Module.Context
  - Ubiquity.NET.Llvm.Module.CreateAndAddGlobalIFunc(System.String,Ubiquity.NET.Llvm.Types.ITypeRef,System.UInt32,Ubiquity.NET.Llvm.Values.Function)
  - Ubiquity.NET.Llvm.Module.CreateFunction(System.String,Ubiquity.NET.Llvm.Types.IFunctionType)
  - Ubiquity.NET.Llvm.Module.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}})
  - Ubiquity.NET.Llvm.Module.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}[])
  - Ubiquity.NET.Llvm.Module.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,Ubiquity.NET.Llvm.DebugInfo.DIScope,System.String,System.String,Ubiquity.NET.Llvm.DebugInfo.DIFile,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType,System.Boolean,System.Boolean,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags,System.Boolean)
  - Ubiquity.NET.Llvm.Module.DataLayoutString
  - Ubiquity.NET.Llvm.Module.DebugMetadataVersion
  - Ubiquity.NET.Llvm.Module.DebugVersionValue
  - Ubiquity.NET.Llvm.Module.Dispose
  - Ubiquity.NET.Llvm.Module.DwarfVersionValue
  - Ubiquity.NET.Llvm.Module.Equals(System.Object)
  - Ubiquity.NET.Llvm.Module.Equals(Ubiquity.NET.Llvm.IModule)
  - Ubiquity.NET.Llvm.Module.Equals(Ubiquity.NET.Llvm.Module)
  - Ubiquity.NET.Llvm.Module.Functions
  - Ubiquity.NET.Llvm.Module.GetAlias(System.String)
  - Ubiquity.NET.Llvm.Module.GetHashCode
  - Ubiquity.NET.Llvm.Module.GetIntrinsicDeclaration(System.String,Ubiquity.NET.Llvm.Types.ITypeRef[])
  - Ubiquity.NET.Llvm.Module.GetIntrinsicDeclaration(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef[])
  - Ubiquity.NET.Llvm.Module.GetNamedGlobal(System.String)
  - Ubiquity.NET.Llvm.Module.GetTypeByName(System.String)
  - Ubiquity.NET.Llvm.Module.Globals
  - Ubiquity.NET.Llvm.Module.IndirectFunctions
  - Ubiquity.NET.Llvm.Module.IsDisposed
  - Ubiquity.NET.Llvm.Module.Layout
  - Ubiquity.NET.Llvm.Module.Link(Ubiquity.NET.Llvm.Module)
  - Ubiquity.NET.Llvm.Module.LoadFrom(System.String,Ubiquity.NET.Llvm.IContext)
  - Ubiquity.NET.Llvm.Module.LoadFrom(Ubiquity.NET.Llvm.MemoryBuffer,Ubiquity.NET.Llvm.IContext)
  - Ubiquity.NET.Llvm.Module.ModuleFlags
  - Ubiquity.NET.Llvm.Module.ModuleInlineAsm
  - Ubiquity.NET.Llvm.Module.Name
  - Ubiquity.NET.Llvm.Module.NamedMetadata
  - Ubiquity.NET.Llvm.Module.SourceFileName
  - Ubiquity.NET.Llvm.Module.TargetTriple
  - Ubiquity.NET.Llvm.Module.TryGetFunction(System.String,Ubiquity.NET.Llvm.Values.Function@)
  - Ubiquity.NET.Llvm.Module.TryGetNamedGlobalIFunc(System.String,Ubiquity.NET.Llvm.Values.GlobalIFunc@)
  - Ubiquity.NET.Llvm.Module.TryRunPasses(System.String[])
  - Ubiquity.NET.Llvm.Module.TryRunPasses(Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
  - Ubiquity.NET.Llvm.Module.TryRunPasses(Ubiquity.NET.Llvm.TargetMachine,Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
  - Ubiquity.NET.Llvm.Module.Verify(System.String@)
  - Ubiquity.NET.Llvm.Module.WriteToBuffer
  - Ubiquity.NET.Llvm.Module.WriteToFile(System.String)
  - Ubiquity.NET.Llvm.Module.WriteToString
  - Ubiquity.NET.Llvm.Module.WriteToTextFile(System.String,System.String@)
  langs:
  - csharp
  - vb
  name: Module
  nameWithType: Module
  fullName: Ubiquity.NET.Llvm.Module
  type: Class
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Module
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 42
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: LLVM Bitcode module
  remarks: >-
    A module is the basic unit for containing code in LLVM. Modules are an in memory

    representation of the LLVM Intermediate Representation (IR) bit-code.
  example: []
  syntax:
    content: 'public sealed class Module : IModule, IDisposable, IEquatable<IModule>, IEquatable<Module>'
    content.vb: Public NotInheritable Class [Module] Implements IModule, IDisposable, IEquatable(Of IModule), IEquatable(Of Module)
  inheritance:
  - System.Object
  implements:
  - Ubiquity.NET.Llvm.IModule
  - System.IDisposable
  - System.IEquatable{Ubiquity.NET.Llvm.IModule}
  - System.IEquatable{Ubiquity.NET.Llvm.Module}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Ubiquity.NET.Llvm.Module.Equals(Ubiquity.NET.Llvm.IModule)
  commentId: M:Ubiquity.NET.Llvm.Module.Equals(Ubiquity.NET.Llvm.IModule)
  id: Equals(Ubiquity.NET.Llvm.IModule)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: Equals(IModule?)
  nameWithType: Module.Equals(IModule?)
  fullName: Ubiquity.NET.Llvm.Module.Equals(Ubiquity.NET.Llvm.IModule?)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Equals
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 52
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Indicates whether the current object is equal to another object of the same type.
  example: []
  syntax:
    content: public bool Equals(IModule? other)
    parameters:
    - id: other
      type: Ubiquity.NET.Llvm.IModule
      description: An object to compare with this object.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the current object is equal to the <code class="paramref">other</code> parameter; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function Equals(other As IModule) As Boolean
  overload: Ubiquity.NET.Llvm.Module.Equals*
  implements:
  - System.IEquatable{Ubiquity.NET.Llvm.IModule}.Equals(Ubiquity.NET.Llvm.IModule)
  nameWithType.vb: Module.Equals(IModule)
  fullName.vb: Ubiquity.NET.Llvm.Module.Equals(Ubiquity.NET.Llvm.IModule)
  name.vb: Equals(IModule)
- uid: Ubiquity.NET.Llvm.Module.Equals(Ubiquity.NET.Llvm.Module)
  commentId: M:Ubiquity.NET.Llvm.Module.Equals(Ubiquity.NET.Llvm.Module)
  id: Equals(Ubiquity.NET.Llvm.Module)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: Equals(Module?)
  nameWithType: Module.Equals(Module?)
  fullName: Ubiquity.NET.Llvm.Module.Equals(Ubiquity.NET.Llvm.Module?)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Equals
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 55
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Indicates whether the current object is equal to another object of the same type.
  example: []
  syntax:
    content: public bool Equals(Module? other)
    parameters:
    - id: other
      type: Ubiquity.NET.Llvm.Module
      description: An object to compare with this object.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the current object is equal to the <code class="paramref">other</code> parameter; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function Equals(other As [Module]) As Boolean
  overload: Ubiquity.NET.Llvm.Module.Equals*
  implements:
  - System.IEquatable{Ubiquity.NET.Llvm.Module}.Equals(Ubiquity.NET.Llvm.Module)
  nameWithType.vb: Module.Equals(Module)
  fullName.vb: Ubiquity.NET.Llvm.Module.Equals(Ubiquity.NET.Llvm.Module)
  name.vb: Equals(Module)
- uid: Ubiquity.NET.Llvm.Module.Equals(System.Object)
  commentId: M:Ubiquity.NET.Llvm.Module.Equals(System.Object)
  id: Equals(System.Object)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: Equals(object?)
  nameWithType: Module.Equals(object?)
  fullName: Ubiquity.NET.Llvm.Module.Equals(object?)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Equals
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 58
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Determines whether the specified object is equal to the current object.
  example: []
  syntax:
    content: public override bool Equals(object? obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with the current object.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the specified object  is equal to the current object; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Ubiquity.NET.Llvm.Module.Equals*
  nameWithType.vb: Module.Equals(Object)
  fullName.vb: Ubiquity.NET.Llvm.Module.Equals(Object)
  name.vb: Equals(Object)
- uid: Ubiquity.NET.Llvm.Module.GetHashCode
  commentId: M:Ubiquity.NET.Llvm.Module.GetHashCode
  id: GetHashCode
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Module.GetHashCode()
  fullName: Ubiquity.NET.Llvm.Module.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: GetHashCode
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 63
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Serves as the default hash function.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for the current object.
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.Object.GetHashCode
  overload: Ubiquity.NET.Llvm.Module.GetHashCode*
- uid: Ubiquity.NET.Llvm.Module.DebugVersionValue
  commentId: F:Ubiquity.NET.Llvm.Module.DebugVersionValue
  id: DebugVersionValue
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: DebugVersionValue
  nameWithType: Module.DebugVersionValue
  fullName: Ubiquity.NET.Llvm.Module.DebugVersionValue
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: DebugVersionValue
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 67
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Name of the Debug Version information module flag
  example: []
  syntax:
    content: public const string DebugVersionValue = "Debug Info Version"
    return:
      type: System.String
    content.vb: Public Const DebugVersionValue As String = "Debug Info Version"
- uid: Ubiquity.NET.Llvm.Module.DwarfVersionValue
  commentId: F:Ubiquity.NET.Llvm.Module.DwarfVersionValue
  id: DwarfVersionValue
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: DwarfVersionValue
  nameWithType: Module.DwarfVersionValue
  fullName: Ubiquity.NET.Llvm.Module.DwarfVersionValue
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: DwarfVersionValue
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 70
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Name of the Dwarf Version module flag
  example: []
  syntax:
    content: public const string DwarfVersionValue = "Dwarf Version"
    return:
      type: System.String
    content.vb: Public Const DwarfVersionValue As String = "Dwarf Version"
- uid: Ubiquity.NET.Llvm.Module.DebugMetadataVersion
  commentId: P:Ubiquity.NET.Llvm.Module.DebugMetadataVersion
  id: DebugMetadataVersion
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: DebugMetadataVersion
  nameWithType: Module.DebugMetadataVersion
  fullName: Ubiquity.NET.Llvm.Module.DebugMetadataVersion
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: DebugMetadataVersion
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 73
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the current Version of the Debug information used by LLVM
  example: []
  syntax:
    content: public static uint DebugMetadataVersion { get; }
    parameters: []
    return:
      type: System.UInt32
    content.vb: Public Shared ReadOnly Property DebugMetadataVersion As UInteger
  overload: Ubiquity.NET.Llvm.Module.DebugMetadataVersion*
- uid: Ubiquity.NET.Llvm.Module.IsDisposed
  commentId: P:Ubiquity.NET.Llvm.Module.IsDisposed
  id: IsDisposed
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: IsDisposed
  nameWithType: Module.IsDisposed
  fullName: Ubiquity.NET.Llvm.Module.IsDisposed
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: IsDisposed
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 76
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets a value indicating whether this instance is already disposed
  example: []
  syntax:
    content: public bool IsDisposed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsDisposed As Boolean
  overload: Ubiquity.NET.Llvm.Module.IsDisposed*
- uid: Ubiquity.NET.Llvm.Module.Dispose
  commentId: M:Ubiquity.NET.Llvm.Module.Dispose
  id: Dispose
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Module.Dispose()
  fullName: Ubiquity.NET.Llvm.Module.Dispose()
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Dispose
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 79
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose()
  overload: Ubiquity.NET.Llvm.Module.Dispose*
  implements:
  - System.IDisposable.Dispose
- uid: Ubiquity.NET.Llvm.Module.AppendInlineAsm(System.String)
  commentId: M:Ubiquity.NET.Llvm.Module.AppendInlineAsm(System.String)
  id: AppendInlineAsm(System.String)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: AppendInlineAsm(string)
  nameWithType: Module.AppendInlineAsm(string)
  fullName: Ubiquity.NET.Llvm.Module.AppendInlineAsm(string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AppendInlineAsm
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 84
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Appends inline assembly to the module's inline assembly
  example: []
  syntax:
    content: public void AppendInlineAsm(string asm)
    parameters:
    - id: asm
      type: System.String
      description: assembly text
    content.vb: Public Sub AppendInlineAsm(asm As String)
  overload: Ubiquity.NET.Llvm.Module.AppendInlineAsm*
  implements:
  - Ubiquity.NET.Llvm.IModule.AppendInlineAsm(System.String)
  nameWithType.vb: Module.AppendInlineAsm(String)
  fullName.vb: Ubiquity.NET.Llvm.Module.AppendInlineAsm(String)
  name.vb: AppendInlineAsm(String)
- uid: Ubiquity.NET.Llvm.Module.TryRunPasses(System.String[])
  commentId: M:Ubiquity.NET.Llvm.Module.TryRunPasses(System.String[])
  id: TryRunPasses(System.String[])
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: TryRunPasses(params string[])
  nameWithType: Module.TryRunPasses(params string[])
  fullName: Ubiquity.NET.Llvm.Module.TryRunPasses(params string[])
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: TryRunPasses
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 87
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Tries running the specified passes on this function
  remarks: >-
    This will try to run all the passes specified against this module. The return value contains

    the results and, if an error occurred, any error message text for the error.

    <div class="NOTE"><h5>information</h5><p>

    The `try` semantics apply to the actual LLVM call only, normal parameter checks are performed

    and may produce an exception.

    </p></div>
  example: []
  syntax:
    content: public ErrorInfo TryRunPasses(params string[] passes)
    parameters:
    - id: passes
      type: System.String[]
      description: Set of passes to run [Must contain at least one pass]
    return:
      type: Ubiquity.NET.Llvm.ErrorInfo
      description: Error containing result
    content.vb: Public Function TryRunPasses(ParamArray passes As String()) As ErrorInfo
  overload: Ubiquity.NET.Llvm.Module.TryRunPasses*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: One of the arguments provided was null (see exception details for name of the parameter)
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: If <code class="paramref">passes</code> has less than one pass. At least one is required
  implements:
  - Ubiquity.NET.Llvm.IModule.TryRunPasses(System.String[])
  nameWithType.vb: Module.TryRunPasses(ParamArray String())
  fullName.vb: Ubiquity.NET.Llvm.Module.TryRunPasses(ParamArray String())
  name.vb: TryRunPasses(ParamArray String())
- uid: Ubiquity.NET.Llvm.Module.TryRunPasses(Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
  commentId: M:Ubiquity.NET.Llvm.Module.TryRunPasses(Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
  id: TryRunPasses(Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: TryRunPasses(PassBuilderOptions, params string[])
  nameWithType: Module.TryRunPasses(PassBuilderOptions, params string[])
  fullName: Ubiquity.NET.Llvm.Module.TryRunPasses(Ubiquity.NET.Llvm.PassBuilderOptions, params string[])
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: TryRunPasses
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 90
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Tries running the specified passes on this function
  remarks: >-
    This will try to run all the passes specified against this module. The return value contains

    the results and, if an error occurred, any error message text for the error.

    <div class="NOTE"><h5>information</h5><p>

    The `try` semantics apply to the actual LLVM call only, normal parameter checks are performed

    and may produce an exception.

    </p></div>
  example: []
  syntax:
    content: public ErrorInfo TryRunPasses(PassBuilderOptions options, params string[] passes)
    parameters:
    - id: options
      type: Ubiquity.NET.Llvm.PassBuilderOptions
      description: Options for the passes
    - id: passes
      type: System.String[]
      description: Set of passes to run [Must contain at least one pass]
    return:
      type: Ubiquity.NET.Llvm.ErrorInfo
      description: Error containing result
    content.vb: Public Function TryRunPasses(options As PassBuilderOptions, ParamArray passes As String()) As ErrorInfo
  overload: Ubiquity.NET.Llvm.Module.TryRunPasses*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: One of the arguments provided was null (see exception details for name of the parameter)
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: If <code class="paramref">passes</code> has less than one pass. At least one is required
  implements:
  - Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
  nameWithType.vb: Module.TryRunPasses(PassBuilderOptions, ParamArray String())
  fullName.vb: Ubiquity.NET.Llvm.Module.TryRunPasses(Ubiquity.NET.Llvm.PassBuilderOptions, ParamArray String())
  name.vb: TryRunPasses(PassBuilderOptions, ParamArray String())
- uid: Ubiquity.NET.Llvm.Module.TryRunPasses(Ubiquity.NET.Llvm.TargetMachine,Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
  commentId: M:Ubiquity.NET.Llvm.Module.TryRunPasses(Ubiquity.NET.Llvm.TargetMachine,Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
  id: TryRunPasses(Ubiquity.NET.Llvm.TargetMachine,Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: TryRunPasses(TargetMachine, PassBuilderOptions, params string[])
  nameWithType: Module.TryRunPasses(TargetMachine, PassBuilderOptions, params string[])
  fullName: Ubiquity.NET.Llvm.Module.TryRunPasses(Ubiquity.NET.Llvm.TargetMachine, Ubiquity.NET.Llvm.PassBuilderOptions, params string[])
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: TryRunPasses
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 93
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Tries running the specified passes on this function
  remarks: >-
    This will try to run all the passes specified against this module. The return value contains

    the results and, if an error occurred, any error message text for the error.

    <div class="NOTE"><h5>information</h5><p>

    The `try` semantics apply to the actual LLVM call only, normal parameter checks are performed

    and may produce an exception.

    </p></div>
  example: []
  syntax:
    content: public ErrorInfo TryRunPasses(TargetMachine targetMachine, PassBuilderOptions options, params string[] passes)
    parameters:
    - id: targetMachine
      type: Ubiquity.NET.Llvm.TargetMachine
      description: Target machine for the passes
    - id: options
      type: Ubiquity.NET.Llvm.PassBuilderOptions
      description: Options for the passes
    - id: passes
      type: System.String[]
      description: Set of passes to run [Must contain at least one pass]
    return:
      type: Ubiquity.NET.Llvm.ErrorInfo
      description: Error containing result
    content.vb: Public Function TryRunPasses(targetMachine As TargetMachine, options As PassBuilderOptions, ParamArray passes As String()) As ErrorInfo
  overload: Ubiquity.NET.Llvm.Module.TryRunPasses*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: One of the arguments provided was null (see exception details for name of the parameter)
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: If <code class="paramref">passes</code> has less than one pass. At least one is required
  implements:
  - Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.TargetMachine,Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
  nameWithType.vb: Module.TryRunPasses(TargetMachine, PassBuilderOptions, ParamArray String())
  fullName.vb: Ubiquity.NET.Llvm.Module.TryRunPasses(Ubiquity.NET.Llvm.TargetMachine, Ubiquity.NET.Llvm.PassBuilderOptions, ParamArray String())
  name.vb: TryRunPasses(TargetMachine, PassBuilderOptions, ParamArray String())
- uid: Ubiquity.NET.Llvm.Module.Link(Ubiquity.NET.Llvm.Module)
  commentId: M:Ubiquity.NET.Llvm.Module.Link(Ubiquity.NET.Llvm.Module)
  id: Link(Ubiquity.NET.Llvm.Module)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: Link(Module)
  nameWithType: Module.Link(Module)
  fullName: Ubiquity.NET.Llvm.Module.Link(Ubiquity.NET.Llvm.Module)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Link
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 96
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Link another module into this one
  remarks: >-
    <div class="WARNING"><h5>warning</h5><p>

    <code class="paramref">srcModule</code> is destroyed by this process and no longer usable

    when this method returns.

    </p></div>
  example: []
  syntax:
    content: public void Link(Module srcModule)
    parameters:
    - id: srcModule
      type: Ubiquity.NET.Llvm.Module
      description: module to link into this one
    content.vb: Public Sub Link(srcModule As [Module])
  overload: Ubiquity.NET.Llvm.Module.Link*
  implements:
  - Ubiquity.NET.Llvm.IModule.Link(Ubiquity.NET.Llvm.Module)
- uid: Ubiquity.NET.Llvm.Module.Verify(System.String@)
  commentId: M:Ubiquity.NET.Llvm.Module.Verify(System.String@)
  id: Verify(System.String@)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: Verify(out string)
  nameWithType: Module.Verify(out string)
  fullName: Ubiquity.NET.Llvm.Module.Verify(out string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Verify
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 99
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Verifies a bit-code module
  example: []
  syntax:
    content: public bool Verify(out string errorMessage)
    parameters:
    - id: errorMessage
      type: System.String
      description: Error messages describing any issues found in the bit-code. Empty string if no error
    return:
      type: System.Boolean
      description: true if the verification succeeded and false if not.
    content.vb: Public Function Verify(errorMessage As String) As Boolean
  overload: Ubiquity.NET.Llvm.Module.Verify*
  implements:
  - Ubiquity.NET.Llvm.IModule.Verify(System.String@)
  nameWithType.vb: Module.Verify(String)
  fullName.vb: Ubiquity.NET.Llvm.Module.Verify(String)
  name.vb: Verify(String)
- uid: Ubiquity.NET.Llvm.Module.TryGetFunction(System.String,Ubiquity.NET.Llvm.Values.Function@)
  commentId: M:Ubiquity.NET.Llvm.Module.TryGetFunction(System.String,Ubiquity.NET.Llvm.Values.Function@)
  id: TryGetFunction(System.String,Ubiquity.NET.Llvm.Values.Function@)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: TryGetFunction(string, out Function)
  nameWithType: Module.TryGetFunction(string, out Function)
  fullName: Ubiquity.NET.Llvm.Module.TryGetFunction(string, out Ubiquity.NET.Llvm.Values.Function)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: TryGetFunction
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 102
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Looks up a function in the module by name
  example: []
  syntax:
    content: public bool TryGetFunction(string name, out Function function)
    parameters:
    - id: name
      type: System.String
      description: Name of the function
    - id: function
      type: Ubiquity.NET.Llvm.Values.Function
      description: The function or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if not found
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the function was found or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> if not
    content.vb: Public Function TryGetFunction(name As String, [function] As [Function]) As Boolean
  overload: Ubiquity.NET.Llvm.Module.TryGetFunction*
  implements:
  - Ubiquity.NET.Llvm.IModule.TryGetFunction(System.String,Ubiquity.NET.Llvm.Values.Function@)
  nameWithType.vb: Module.TryGetFunction(String, Function)
  fullName.vb: Ubiquity.NET.Llvm.Module.TryGetFunction(String, Ubiquity.NET.Llvm.Values.Function)
  name.vb: TryGetFunction(String, Function)
- uid: Ubiquity.NET.Llvm.Module.CreateAndAddGlobalIFunc(System.String,Ubiquity.NET.Llvm.Types.ITypeRef,System.UInt32,Ubiquity.NET.Llvm.Values.Function)
  commentId: M:Ubiquity.NET.Llvm.Module.CreateAndAddGlobalIFunc(System.String,Ubiquity.NET.Llvm.Types.ITypeRef,System.UInt32,Ubiquity.NET.Llvm.Values.Function)
  id: CreateAndAddGlobalIFunc(System.String,Ubiquity.NET.Llvm.Types.ITypeRef,System.UInt32,Ubiquity.NET.Llvm.Values.Function)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: CreateAndAddGlobalIFunc(string, ITypeRef, uint, Function)
  nameWithType: Module.CreateAndAddGlobalIFunc(string, ITypeRef, uint, Function)
  fullName: Ubiquity.NET.Llvm.Module.CreateAndAddGlobalIFunc(string, Ubiquity.NET.Llvm.Types.ITypeRef, uint, Ubiquity.NET.Llvm.Values.Function)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: CreateAndAddGlobalIFunc
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 105
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Create and add a global indirect function
  example: []
  syntax:
    content: public GlobalIFunc CreateAndAddGlobalIFunc(string name, ITypeRef type, uint addressSpace, Function resolver)
    parameters:
    - id: name
      type: System.String
      description: Name of the function
    - id: type
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Signature of the function
    - id: addressSpace
      type: System.UInt32
      description: Address space for the indirect function
    - id: resolver
      type: Ubiquity.NET.Llvm.Values.Function
      description: Resolver for the indirect function
    return:
      type: Ubiquity.NET.Llvm.Values.GlobalIFunc
      description: New <xref href="Ubiquity.NET.Llvm.Values.GlobalIFunc" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Function CreateAndAddGlobalIFunc(name As String, type As ITypeRef, addressSpace As UInteger, resolver As [Function]) As GlobalIFunc
  overload: Ubiquity.NET.Llvm.Module.CreateAndAddGlobalIFunc*
  implements:
  - Ubiquity.NET.Llvm.IModule.CreateAndAddGlobalIFunc(System.String,Ubiquity.NET.Llvm.Types.ITypeRef,System.UInt32,Ubiquity.NET.Llvm.Values.Function)
  nameWithType.vb: Module.CreateAndAddGlobalIFunc(String, ITypeRef, UInteger, Function)
  fullName.vb: Ubiquity.NET.Llvm.Module.CreateAndAddGlobalIFunc(String, Ubiquity.NET.Llvm.Types.ITypeRef, UInteger, Ubiquity.NET.Llvm.Values.Function)
  name.vb: CreateAndAddGlobalIFunc(String, ITypeRef, UInteger, Function)
- uid: Ubiquity.NET.Llvm.Module.TryGetNamedGlobalIFunc(System.String,Ubiquity.NET.Llvm.Values.GlobalIFunc@)
  commentId: M:Ubiquity.NET.Llvm.Module.TryGetNamedGlobalIFunc(System.String,Ubiquity.NET.Llvm.Values.GlobalIFunc@)
  id: TryGetNamedGlobalIFunc(System.String,Ubiquity.NET.Llvm.Values.GlobalIFunc@)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: TryGetNamedGlobalIFunc(string, out GlobalIFunc)
  nameWithType: Module.TryGetNamedGlobalIFunc(string, out GlobalIFunc)
  fullName: Ubiquity.NET.Llvm.Module.TryGetNamedGlobalIFunc(string, out Ubiquity.NET.Llvm.Values.GlobalIFunc)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: TryGetNamedGlobalIFunc
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 108
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Get a named Global Indirect function in the module
  example: []
  syntax:
    content: public bool TryGetNamedGlobalIFunc(string name, out GlobalIFunc function)
    parameters:
    - id: name
      type: System.String
      description: Name of the ifunc to find
    - id: function
      type: Ubiquity.NET.Llvm.Values.GlobalIFunc
      description: Function or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if not found
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the function was found or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> if not
    content.vb: Public Function TryGetNamedGlobalIFunc(name As String, [function] As GlobalIFunc) As Boolean
  overload: Ubiquity.NET.Llvm.Module.TryGetNamedGlobalIFunc*
  implements:
  - Ubiquity.NET.Llvm.IModule.TryGetNamedGlobalIFunc(System.String,Ubiquity.NET.Llvm.Values.GlobalIFunc@)
  nameWithType.vb: Module.TryGetNamedGlobalIFunc(String, GlobalIFunc)
  fullName.vb: Ubiquity.NET.Llvm.Module.TryGetNamedGlobalIFunc(String, Ubiquity.NET.Llvm.Values.GlobalIFunc)
  name.vb: TryGetNamedGlobalIFunc(String, GlobalIFunc)
- uid: Ubiquity.NET.Llvm.Module.CreateFunction(System.String,Ubiquity.NET.Llvm.Types.IFunctionType)
  commentId: M:Ubiquity.NET.Llvm.Module.CreateFunction(System.String,Ubiquity.NET.Llvm.Types.IFunctionType)
  id: CreateFunction(System.String,Ubiquity.NET.Llvm.Types.IFunctionType)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: CreateFunction(string, IFunctionType)
  nameWithType: Module.CreateFunction(string, IFunctionType)
  fullName: Ubiquity.NET.Llvm.Module.CreateFunction(string, Ubiquity.NET.Llvm.Types.IFunctionType)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: CreateFunction
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 111
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets an existing function with the specified signature to the module or creates a new one if it doesn't exist
  remarks: >-
    If a matching function already exists it is returned, and therefore the returned

    <xref href="Ubiquity.NET.Llvm.Values.Function" data-throw-if-not-resolved="false"></xref> may have a body and additional attributes. If a function of

    the same name exists with a different signature an exception is thrown as LLVM does

    not perform any function overloading.
  example: []
  syntax:
    content: public Function CreateFunction(string name, IFunctionType signature)
    parameters:
    - id: name
      type: System.String
      description: Name of the function to add
    - id: signature
      type: Ubiquity.NET.Llvm.Types.IFunctionType
      description: Signature of the function
    return:
      type: Ubiquity.NET.Llvm.Values.Function
      description: <xref href="Ubiquity.NET.Llvm.Values.Function" data-throw-if-not-resolved="false"></xref>matching the specified signature and name
    content.vb: Public Function CreateFunction(name As String, signature As IFunctionType) As [Function]
  overload: Ubiquity.NET.Llvm.Module.CreateFunction*
  implements:
  - Ubiquity.NET.Llvm.IModule.CreateFunction(System.String,Ubiquity.NET.Llvm.Types.IFunctionType)
  nameWithType.vb: Module.CreateFunction(String, IFunctionType)
  fullName.vb: Ubiquity.NET.Llvm.Module.CreateFunction(String, Ubiquity.NET.Llvm.Types.IFunctionType)
  name.vb: CreateFunction(String, IFunctionType)
- uid: Ubiquity.NET.Llvm.Module.WriteToFile(System.String)
  commentId: M:Ubiquity.NET.Llvm.Module.WriteToFile(System.String)
  id: WriteToFile(System.String)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: WriteToFile(string)
  nameWithType: Module.WriteToFile(string)
  fullName: Ubiquity.NET.Llvm.Module.WriteToFile(string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: WriteToFile
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 114
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Writes a bit-code module to a file
  remarks: >-
    This is a blind write. (e.g. no verification is performed)

    So if an invalid module is saved it might not work with any

    later stage processing tools.
  example: []
  syntax:
    content: public void WriteToFile(string path)
    parameters:
    - id: path
      type: System.String
      description: Path to write the bit-code into
    content.vb: Public Sub WriteToFile(path As String)
  overload: Ubiquity.NET.Llvm.Module.WriteToFile*
  implements:
  - Ubiquity.NET.Llvm.IModule.WriteToFile(System.String)
  nameWithType.vb: Module.WriteToFile(String)
  fullName.vb: Ubiquity.NET.Llvm.Module.WriteToFile(String)
  name.vb: WriteToFile(String)
- uid: Ubiquity.NET.Llvm.Module.WriteToTextFile(System.String,System.String@)
  commentId: M:Ubiquity.NET.Llvm.Module.WriteToTextFile(System.String,System.String@)
  id: WriteToTextFile(System.String,System.String@)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: WriteToTextFile(string, out string)
  nameWithType: Module.WriteToTextFile(string, out string)
  fullName: Ubiquity.NET.Llvm.Module.WriteToTextFile(string, out string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: WriteToTextFile
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 117
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Writes this module as LLVM IR source to a file
  example: []
  syntax:
    content: public bool WriteToTextFile(string path, out string errMsg)
    parameters:
    - id: path
      type: System.String
      description: File to write the LLVM IR source to
    - id: errMsg
      type: System.String
      description: Error messages encountered, if any
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if successful or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> if not
    content.vb: Public Function WriteToTextFile(path As String, errMsg As String) As Boolean
  overload: Ubiquity.NET.Llvm.Module.WriteToTextFile*
  implements:
  - Ubiquity.NET.Llvm.IModule.WriteToTextFile(System.String,System.String@)
  nameWithType.vb: Module.WriteToTextFile(String, String)
  fullName.vb: Ubiquity.NET.Llvm.Module.WriteToTextFile(String, String)
  name.vb: WriteToTextFile(String, String)
- uid: Ubiquity.NET.Llvm.Module.WriteToString
  commentId: M:Ubiquity.NET.Llvm.Module.WriteToString
  id: WriteToString
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: WriteToString()
  nameWithType: Module.WriteToString()
  fullName: Ubiquity.NET.Llvm.Module.WriteToString()
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: WriteToString
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 120
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Creates a string representation of the module
  remarks: >-
    This is intentionally NOT an override of ToString() as that is

    used by debuggers to show the value of a type and this can take

    an extremely long time (up to many seconds depending on complexity

    of the module) which is usually bad for the debugger. If you need

    to see the contents of the IR for a module you can use this method

    in the immediate or watch windows.
  example: []
  syntax:
    content: public string? WriteToString()
    return:
      type: System.String
      description: LLVM textual representation of the module
    content.vb: Public Function WriteToString() As String
  overload: Ubiquity.NET.Llvm.Module.WriteToString*
  implements:
  - Ubiquity.NET.Llvm.IModule.WriteToString
- uid: Ubiquity.NET.Llvm.Module.WriteToBuffer
  commentId: M:Ubiquity.NET.Llvm.Module.WriteToBuffer
  id: WriteToBuffer
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: WriteToBuffer()
  nameWithType: Module.WriteToBuffer()
  fullName: Ubiquity.NET.Llvm.Module.WriteToBuffer()
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: WriteToBuffer
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 123
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Writes the LLVM IR bit code into a memory buffer
  example: []
  syntax:
    content: public MemoryBuffer WriteToBuffer()
    return:
      type: Ubiquity.NET.Llvm.MemoryBuffer
      description: <xref href="Ubiquity.NET.Llvm.MemoryBuffer" data-throw-if-not-resolved="false"></xref> containing the bit code module
    content.vb: Public Function WriteToBuffer() As MemoryBuffer
  overload: Ubiquity.NET.Llvm.Module.WriteToBuffer*
  implements:
  - Ubiquity.NET.Llvm.IModule.WriteToBuffer
- uid: Ubiquity.NET.Llvm.Module.AddAlias(Ubiquity.NET.Llvm.Values.Value,System.String,System.UInt32)
  commentId: M:Ubiquity.NET.Llvm.Module.AddAlias(Ubiquity.NET.Llvm.Values.Value,System.String,System.UInt32)
  id: AddAlias(Ubiquity.NET.Llvm.Values.Value,System.String,System.UInt32)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: AddAlias(Value, string, uint)
  nameWithType: Module.AddAlias(Value, string, uint)
  fullName: Ubiquity.NET.Llvm.Module.AddAlias(Ubiquity.NET.Llvm.Values.Value, string, uint)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AddAlias
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 126
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Add an alias to the module
  example: []
  syntax:
    content: public GlobalAlias AddAlias(Value aliasee, string aliasName, uint addressSpace = 0)
    parameters:
    - id: aliasee
      type: Ubiquity.NET.Llvm.Values.Value
      description: Value being aliased
    - id: aliasName
      type: System.String
      description: Name of the alias
    - id: addressSpace
      type: System.UInt32
      description: 'Address space for the alias [Default: 0]'
    return:
      type: Ubiquity.NET.Llvm.Values.GlobalAlias
      description: <xref href="Ubiquity.NET.Llvm.Values.GlobalAlias" data-throw-if-not-resolved="false"></xref> for the alias
    content.vb: Public Function AddAlias(aliasee As Value, aliasName As String, addressSpace As UInteger = 0) As GlobalAlias
  overload: Ubiquity.NET.Llvm.Module.AddAlias*
  implements:
  - Ubiquity.NET.Llvm.IModule.AddAlias(Ubiquity.NET.Llvm.Values.Value,System.String,System.UInt32)
  nameWithType.vb: Module.AddAlias(Value, String, UInteger)
  fullName.vb: Ubiquity.NET.Llvm.Module.AddAlias(Ubiquity.NET.Llvm.Values.Value, String, UInteger)
  name.vb: AddAlias(Value, String, UInteger)
- uid: Ubiquity.NET.Llvm.Module.GetAlias(System.String)
  commentId: M:Ubiquity.NET.Llvm.Module.GetAlias(System.String)
  id: GetAlias(System.String)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: GetAlias(string)
  nameWithType: Module.GetAlias(string)
  fullName: Ubiquity.NET.Llvm.Module.GetAlias(string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: GetAlias
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 129
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Get an alias by name
  example: []
  syntax:
    content: public GlobalAlias? GetAlias(string name)
    parameters:
    - id: name
      type: System.String
      description: name of the alias to get
    return:
      type: Ubiquity.NET.Llvm.Values.GlobalAlias
      description: Alias matching <code class="paramref">name</code> or null if no such alias exists
    content.vb: Public Function GetAlias(name As String) As GlobalAlias
  overload: Ubiquity.NET.Llvm.Module.GetAlias*
  implements:
  - Ubiquity.NET.Llvm.IModule.GetAlias(System.String)
  nameWithType.vb: Module.GetAlias(String)
  fullName.vb: Ubiquity.NET.Llvm.Module.GetAlias(String)
  name.vb: GetAlias(String)
- uid: Ubiquity.NET.Llvm.Module.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
  commentId: M:Ubiquity.NET.Llvm.Module.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
  id: AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: AddGlobalInAddressSpace(uint, ITypeRef, string)
  nameWithType: Module.AddGlobalInAddressSpace(uint, ITypeRef, string)
  fullName: Ubiquity.NET.Llvm.Module.AddGlobalInAddressSpace(uint, Ubiquity.NET.Llvm.Types.ITypeRef, string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AddGlobalInAddressSpace
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 132
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Adds a global to this module with a specific address space
  example: []
  syntax:
    content: public GlobalVariable AddGlobalInAddressSpace(uint addressSpace, ITypeRef typeRef, string name)
    parameters:
    - id: addressSpace
      type: System.UInt32
      description: Address space to add the global to
    - id: typeRef
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Type of the value
    - id: name
      type: System.String
      description: Name of the global
    return:
      type: Ubiquity.NET.Llvm.Values.GlobalVariable
      description: The new <xref href="Ubiquity.NET.Llvm.Values.GlobalVariable" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Function AddGlobalInAddressSpace(addressSpace As UInteger, typeRef As ITypeRef, name As String) As GlobalVariable
  overload: Ubiquity.NET.Llvm.Module.AddGlobalInAddressSpace*
  implements:
  - Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
  nameWithType.vb: Module.AddGlobalInAddressSpace(UInteger, ITypeRef, String)
  fullName.vb: Ubiquity.NET.Llvm.Module.AddGlobalInAddressSpace(UInteger, Ubiquity.NET.Llvm.Types.ITypeRef, String)
  name.vb: AddGlobalInAddressSpace(UInteger, ITypeRef, String)
- uid: Ubiquity.NET.Llvm.Module.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
  commentId: M:Ubiquity.NET.Llvm.Module.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
  id: AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: AddGlobalInAddressSpace(uint, ITypeRef, bool, Linkage, Constant)
  nameWithType: Module.AddGlobalInAddressSpace(uint, ITypeRef, bool, Linkage, Constant)
  fullName: Ubiquity.NET.Llvm.Module.AddGlobalInAddressSpace(uint, Ubiquity.NET.Llvm.Types.ITypeRef, bool, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AddGlobalInAddressSpace
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 135
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Adds a global to this module
  example: []
  syntax:
    content: public GlobalVariable AddGlobalInAddressSpace(uint addressSpace, ITypeRef typeRef, bool isConst, Linkage linkage, Constant constVal)
    parameters:
    - id: addressSpace
      type: System.UInt32
      description: Address space to add the global to
    - id: typeRef
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Type of the value
    - id: isConst
      type: System.Boolean
      description: Flag to indicate if this global is a constant
    - id: linkage
      type: Ubiquity.NET.Llvm.Values.Linkage
      description: Linkage type for this global
    - id: constVal
      type: Ubiquity.NET.Llvm.Values.Constant
      description: Initial value for the global
    return:
      type: Ubiquity.NET.Llvm.Values.GlobalVariable
      description: New global variable
    content.vb: Public Function AddGlobalInAddressSpace(addressSpace As UInteger, typeRef As ITypeRef, isConst As Boolean, linkage As Linkage, constVal As Constant) As GlobalVariable
  overload: Ubiquity.NET.Llvm.Module.AddGlobalInAddressSpace*
  implements:
  - Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
  nameWithType.vb: Module.AddGlobalInAddressSpace(UInteger, ITypeRef, Boolean, Linkage, Constant)
  fullName.vb: Ubiquity.NET.Llvm.Module.AddGlobalInAddressSpace(UInteger, Ubiquity.NET.Llvm.Types.ITypeRef, Boolean, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant)
  name.vb: AddGlobalInAddressSpace(UInteger, ITypeRef, Boolean, Linkage, Constant)
- uid: Ubiquity.NET.Llvm.Module.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
  commentId: M:Ubiquity.NET.Llvm.Module.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
  id: AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: AddGlobalInAddressSpace(uint, ITypeRef, bool, Linkage, Constant, string)
  nameWithType: Module.AddGlobalInAddressSpace(uint, ITypeRef, bool, Linkage, Constant, string)
  fullName: Ubiquity.NET.Llvm.Module.AddGlobalInAddressSpace(uint, Ubiquity.NET.Llvm.Types.ITypeRef, bool, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant, string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AddGlobalInAddressSpace
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 138
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Adds a global to this module
  example: []
  syntax:
    content: public GlobalVariable AddGlobalInAddressSpace(uint addressSpace, ITypeRef typeRef, bool isConst, Linkage linkage, Constant constVal, string name)
    parameters:
    - id: addressSpace
      type: System.UInt32
      description: Address space to add the global to
    - id: typeRef
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Type of the value
    - id: isConst
      type: System.Boolean
      description: Flag to indicate if this global is a constant
    - id: linkage
      type: Ubiquity.NET.Llvm.Values.Linkage
      description: Linkage type for this global
    - id: constVal
      type: Ubiquity.NET.Llvm.Values.Constant
      description: Initial value for the global
    - id: name
      type: System.String
      description: Name of the variable
    return:
      type: Ubiquity.NET.Llvm.Values.GlobalVariable
      description: New global variable
    content.vb: Public Function AddGlobalInAddressSpace(addressSpace As UInteger, typeRef As ITypeRef, isConst As Boolean, linkage As Linkage, constVal As Constant, name As String) As GlobalVariable
  overload: Ubiquity.NET.Llvm.Module.AddGlobalInAddressSpace*
  implements:
  - Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
  nameWithType.vb: Module.AddGlobalInAddressSpace(UInteger, ITypeRef, Boolean, Linkage, Constant, String)
  fullName.vb: Ubiquity.NET.Llvm.Module.AddGlobalInAddressSpace(UInteger, Ubiquity.NET.Llvm.Types.ITypeRef, Boolean, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant, String)
  name.vb: AddGlobalInAddressSpace(UInteger, ITypeRef, Boolean, Linkage, Constant, String)
- uid: Ubiquity.NET.Llvm.Module.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
  commentId: M:Ubiquity.NET.Llvm.Module.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
  id: AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: AddGlobal(ITypeRef, string)
  nameWithType: Module.AddGlobal(ITypeRef, string)
  fullName: Ubiquity.NET.Llvm.Module.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef, string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AddGlobal
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 141
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Adds a global to this module
  example: []
  syntax:
    content: public GlobalVariable AddGlobal(ITypeRef typeRef, string name)
    parameters:
    - id: typeRef
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Type of the value
    - id: name
      type: System.String
      description: Name of the global
    return:
      type: Ubiquity.NET.Llvm.Values.GlobalVariable
      description: The new <xref href="Ubiquity.NET.Llvm.Values.GlobalVariable" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Function AddGlobal(typeRef As ITypeRef, name As String) As GlobalVariable
  overload: Ubiquity.NET.Llvm.Module.AddGlobal*
  implements:
  - Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
  nameWithType.vb: Module.AddGlobal(ITypeRef, String)
  fullName.vb: Ubiquity.NET.Llvm.Module.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef, String)
  name.vb: AddGlobal(ITypeRef, String)
- uid: Ubiquity.NET.Llvm.Module.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
  commentId: M:Ubiquity.NET.Llvm.Module.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
  id: AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: AddGlobal(ITypeRef, bool, Linkage, Constant)
  nameWithType: Module.AddGlobal(ITypeRef, bool, Linkage, Constant)
  fullName: Ubiquity.NET.Llvm.Module.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef, bool, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AddGlobal
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 144
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Adds a global to this module
  example: []
  syntax:
    content: public GlobalVariable AddGlobal(ITypeRef typeRef, bool isConst, Linkage linkage, Constant constVal)
    parameters:
    - id: typeRef
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Type of the value
    - id: isConst
      type: System.Boolean
      description: Flag to indicate if this global is a constant
    - id: linkage
      type: Ubiquity.NET.Llvm.Values.Linkage
      description: Linkage type for this global
    - id: constVal
      type: Ubiquity.NET.Llvm.Values.Constant
      description: Initial value for the global
    return:
      type: Ubiquity.NET.Llvm.Values.GlobalVariable
      description: New global variable
    content.vb: Public Function AddGlobal(typeRef As ITypeRef, isConst As Boolean, linkage As Linkage, constVal As Constant) As GlobalVariable
  overload: Ubiquity.NET.Llvm.Module.AddGlobal*
  implements:
  - Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
  nameWithType.vb: Module.AddGlobal(ITypeRef, Boolean, Linkage, Constant)
  fullName.vb: Ubiquity.NET.Llvm.Module.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef, Boolean, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant)
  name.vb: AddGlobal(ITypeRef, Boolean, Linkage, Constant)
- uid: Ubiquity.NET.Llvm.Module.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
  commentId: M:Ubiquity.NET.Llvm.Module.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
  id: AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: AddGlobal(ITypeRef, bool, Linkage, Constant, string)
  nameWithType: Module.AddGlobal(ITypeRef, bool, Linkage, Constant, string)
  fullName: Ubiquity.NET.Llvm.Module.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef, bool, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant, string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AddGlobal
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 147
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Adds a global to this module
  example: []
  syntax:
    content: public GlobalVariable AddGlobal(ITypeRef typeRef, bool isConst, Linkage linkage, Constant constVal, string name)
    parameters:
    - id: typeRef
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Type of the value
    - id: isConst
      type: System.Boolean
      description: Flag to indicate if this global is a constant
    - id: linkage
      type: Ubiquity.NET.Llvm.Values.Linkage
      description: Linkage type for this global
    - id: constVal
      type: Ubiquity.NET.Llvm.Values.Constant
      description: Initial value for the global
    - id: name
      type: System.String
      description: Name of the variable
    return:
      type: Ubiquity.NET.Llvm.Values.GlobalVariable
      description: New global variable
    content.vb: Public Function AddGlobal(typeRef As ITypeRef, isConst As Boolean, linkage As Linkage, constVal As Constant, name As String) As GlobalVariable
  overload: Ubiquity.NET.Llvm.Module.AddGlobal*
  implements:
  - Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
  nameWithType.vb: Module.AddGlobal(ITypeRef, Boolean, Linkage, Constant, String)
  fullName.vb: Ubiquity.NET.Llvm.Module.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef, Boolean, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant, String)
  name.vb: AddGlobal(ITypeRef, Boolean, Linkage, Constant, String)
- uid: Ubiquity.NET.Llvm.Module.GetTypeByName(System.String)
  commentId: M:Ubiquity.NET.Llvm.Module.GetTypeByName(System.String)
  id: GetTypeByName(System.String)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: GetTypeByName(string)
  nameWithType: Module.GetTypeByName(string)
  fullName: Ubiquity.NET.Llvm.Module.GetTypeByName(string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: GetTypeByName
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 150
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Retrieves a <xref href="Ubiquity.NET.Llvm.Types.ITypeRef" data-throw-if-not-resolved="false"></xref> by name from the module
  example: []
  syntax:
    content: public ITypeRef? GetTypeByName(string name)
    parameters:
    - id: name
      type: System.String
      description: Name of the type
    return:
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: The type or null if no type with the specified name exists in the module
    content.vb: Public Function GetTypeByName(name As String) As ITypeRef
  overload: Ubiquity.NET.Llvm.Module.GetTypeByName*
  implements:
  - Ubiquity.NET.Llvm.IModule.GetTypeByName(System.String)
  nameWithType.vb: Module.GetTypeByName(String)
  fullName.vb: Ubiquity.NET.Llvm.Module.GetTypeByName(String)
  name.vb: GetTypeByName(String)
- uid: Ubiquity.NET.Llvm.Module.GetNamedGlobal(System.String)
  commentId: M:Ubiquity.NET.Llvm.Module.GetNamedGlobal(System.String)
  id: GetNamedGlobal(System.String)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: GetNamedGlobal(string)
  nameWithType: Module.GetNamedGlobal(string)
  fullName: Ubiquity.NET.Llvm.Module.GetNamedGlobal(string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: GetNamedGlobal
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 153
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Retrieves a named global from the module
  example: []
  syntax:
    content: public GlobalVariable? GetNamedGlobal(string name)
    parameters:
    - id: name
      type: System.String
      description: Name of the global
    return:
      type: Ubiquity.NET.Llvm.Values.GlobalVariable
      description: <xref href="Ubiquity.NET.Llvm.Values.GlobalVariable" data-throw-if-not-resolved="false"></xref> or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if not found
    content.vb: Public Function GetNamedGlobal(name As String) As GlobalVariable
  overload: Ubiquity.NET.Llvm.Module.GetNamedGlobal*
  implements:
  - Ubiquity.NET.Llvm.IModule.GetNamedGlobal(System.String)
  nameWithType.vb: Module.GetNamedGlobal(String)
  fullName.vb: Ubiquity.NET.Llvm.Module.GetNamedGlobal(String)
  name.vb: GetNamedGlobal(String)
- uid: Ubiquity.NET.Llvm.Module.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,System.UInt32)
  commentId: M:Ubiquity.NET.Llvm.Module.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,System.UInt32)
  id: AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,System.UInt32)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: AddModuleFlag(ModuleFlagBehavior, string, uint)
  nameWithType: Module.AddModuleFlag(ModuleFlagBehavior, string, uint)
  fullName: Ubiquity.NET.Llvm.Module.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior, string, uint)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AddModuleFlag
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 156
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Adds a module flag to the module
  example: []
  syntax:
    content: public void AddModuleFlag(ModuleFlagBehavior behavior, string name, uint value)
    parameters:
    - id: behavior
      type: Ubiquity.NET.Llvm.ModuleFlagBehavior
      description: ModuleHandle flag behavior for this flag
    - id: name
      type: System.String
      description: Name of the flag
    - id: value
      type: System.UInt32
      description: Value of the flag
    content.vb: Public Sub AddModuleFlag(behavior As ModuleFlagBehavior, name As String, value As UInteger)
  overload: Ubiquity.NET.Llvm.Module.AddModuleFlag*
  implements:
  - Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,System.UInt32)
  nameWithType.vb: Module.AddModuleFlag(ModuleFlagBehavior, String, UInteger)
  fullName.vb: Ubiquity.NET.Llvm.Module.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior, String, UInteger)
  name.vb: AddModuleFlag(ModuleFlagBehavior, String, UInteger)
- uid: Ubiquity.NET.Llvm.Module.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
  commentId: M:Ubiquity.NET.Llvm.Module.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
  id: AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: AddModuleFlag(ModuleFlagBehavior, string, IrMetadata)
  nameWithType: Module.AddModuleFlag(ModuleFlagBehavior, string, IrMetadata)
  fullName: Ubiquity.NET.Llvm.Module.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior, string, Ubiquity.NET.Llvm.Metadata.IrMetadata)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AddModuleFlag
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 159
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Adds a module flag to the module
  example: []
  syntax:
    content: public void AddModuleFlag(ModuleFlagBehavior behavior, string name, IrMetadata value)
    parameters:
    - id: behavior
      type: Ubiquity.NET.Llvm.ModuleFlagBehavior
      description: ModuleHandle flag behavior for this flag
    - id: name
      type: System.String
      description: Name of the flag
    - id: value
      type: Ubiquity.NET.Llvm.Metadata.IrMetadata
      description: Value of the flag
    content.vb: Public Sub AddModuleFlag(behavior As ModuleFlagBehavior, name As String, value As IrMetadata)
  overload: Ubiquity.NET.Llvm.Module.AddModuleFlag*
  implements:
  - Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
  nameWithType.vb: Module.AddModuleFlag(ModuleFlagBehavior, String, IrMetadata)
  fullName.vb: Ubiquity.NET.Llvm.Module.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior, String, Ubiquity.NET.Llvm.Metadata.IrMetadata)
  name.vb: AddModuleFlag(ModuleFlagBehavior, String, IrMetadata)
- uid: Ubiquity.NET.Llvm.Module.AddNamedMetadataOperand(System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
  commentId: M:Ubiquity.NET.Llvm.Module.AddNamedMetadataOperand(System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
  id: AddNamedMetadataOperand(System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: AddNamedMetadataOperand(string, IrMetadata)
  nameWithType: Module.AddNamedMetadataOperand(string, IrMetadata)
  fullName: Ubiquity.NET.Llvm.Module.AddNamedMetadataOperand(string, Ubiquity.NET.Llvm.Metadata.IrMetadata)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AddNamedMetadataOperand
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 162
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Adds operand value to named metadata
  example: []
  syntax:
    content: public void AddNamedMetadataOperand(string name, IrMetadata value)
    parameters:
    - id: name
      type: System.String
      description: Name of the metadata
    - id: value
      type: Ubiquity.NET.Llvm.Metadata.IrMetadata
      description: operand value
    content.vb: Public Sub AddNamedMetadataOperand(name As String, value As IrMetadata)
  overload: Ubiquity.NET.Llvm.Module.AddNamedMetadataOperand*
  implements:
  - Ubiquity.NET.Llvm.IModule.AddNamedMetadataOperand(System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
  nameWithType.vb: Module.AddNamedMetadataOperand(String, IrMetadata)
  fullName.vb: Ubiquity.NET.Llvm.Module.AddNamedMetadataOperand(String, Ubiquity.NET.Llvm.Metadata.IrMetadata)
  name.vb: AddNamedMetadataOperand(String, IrMetadata)
- uid: Ubiquity.NET.Llvm.Module.AddVersionIdentMetadata(System.String)
  commentId: M:Ubiquity.NET.Llvm.Module.AddVersionIdentMetadata(System.String)
  id: AddVersionIdentMetadata(System.String)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: AddVersionIdentMetadata(string)
  nameWithType: Module.AddVersionIdentMetadata(string)
  fullName: Ubiquity.NET.Llvm.Module.AddVersionIdentMetadata(string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AddVersionIdentMetadata
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 165
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Adds an llvm.ident metadata string to the module
  example: []
  syntax:
    content: public void AddVersionIdentMetadata(string version)
    parameters:
    - id: version
      type: System.String
      description: version information to place in the llvm.ident metadata
    content.vb: Public Sub AddVersionIdentMetadata(version As String)
  overload: Ubiquity.NET.Llvm.Module.AddVersionIdentMetadata*
  implements:
  - Ubiquity.NET.Llvm.IModule.AddVersionIdentMetadata(System.String)
  nameWithType.vb: Module.AddVersionIdentMetadata(String)
  fullName.vb: Ubiquity.NET.Llvm.Module.AddVersionIdentMetadata(String)
  name.vb: AddVersionIdentMetadata(String)
- uid: Ubiquity.NET.Llvm.Module.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,Ubiquity.NET.Llvm.DebugInfo.DIScope,System.String,System.String,Ubiquity.NET.Llvm.DebugInfo.DIFile,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType,System.Boolean,System.Boolean,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags,System.Boolean)
  commentId: M:Ubiquity.NET.Llvm.Module.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,Ubiquity.NET.Llvm.DebugInfo.DIScope,System.String,System.String,Ubiquity.NET.Llvm.DebugInfo.DIFile,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType,System.Boolean,System.Boolean,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags,System.Boolean)
  id: CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,Ubiquity.NET.Llvm.DebugInfo.DIScope,System.String,System.String,Ubiquity.NET.Llvm.DebugInfo.DIFile,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType,System.Boolean,System.Boolean,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags,System.Boolean)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: CreateFunction(ref readonly DIBuilder, DIScope?, string, string?, DIFile?, uint, DebugFunctionType, bool, bool, uint, DebugInfoFlags, bool)
  nameWithType: Module.CreateFunction(ref readonly DIBuilder, DIScope?, string, string?, DIFile?, uint, DebugFunctionType, bool, bool, uint, DebugInfoFlags, bool)
  fullName: Ubiquity.NET.Llvm.Module.CreateFunction(ref readonly Ubiquity.NET.Llvm.DebugInfo.DIBuilder, Ubiquity.NET.Llvm.DebugInfo.DIScope?, string, string?, Ubiquity.NET.Llvm.DebugInfo.DIFile?, uint, Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType, bool, bool, uint, Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags, bool)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: CreateFunction
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 168
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Creates a Function definition with Debug information
  example: []
  syntax:
    content: public Function CreateFunction(ref readonly DIBuilder diBuilder, DIScope? scope, string name, string? linkageName, DIFile? file, uint line, DebugFunctionType signature, bool isLocalToUnit, bool isDefinition, uint scopeLine, DebugInfoFlags debugFlags, bool isOptimized)
    parameters:
    - id: diBuilder
      type: Ubiquity.NET.Llvm.DebugInfo.DIBuilder
      description: The debug info builder to use to create the function (must be associated with this module)
    - id: scope
      type: Ubiquity.NET.Llvm.DebugInfo.DIScope
      description: Containing scope for the function
    - id: name
      type: System.String
      description: Name of the function in source language form
    - id: linkageName
      type: System.String
      description: Mangled linker visible name of the function (may be same as <code class="paramref">name</code> if mangling not required by source language
    - id: file
      type: Ubiquity.NET.Llvm.DebugInfo.DIFile
      description: File containing the function definition
    - id: line
      type: System.UInt32
      description: Line number of the function definition
    - id: signature
      type: Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType
      description: LLVM Function type for the signature of the function
    - id: isLocalToUnit
      type: System.Boolean
      description: Flag to indicate if this function is local to the compilation unit
    - id: isDefinition
      type: System.Boolean
      description: Flag to indicate if this is a definition
    - id: scopeLine
      type: System.UInt32
      description: First line of the function's outermost scope, this may not be the same as the first line of the function definition due to source formatting
    - id: debugFlags
      type: Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags
      description: Additional flags describing this function
    - id: isOptimized
      type: System.Boolean
      description: Flag to indicate if this function is optimized
    return:
      type: Ubiquity.NET.Llvm.Values.Function
      description: Function described by the arguments
    content.vb: Public Function CreateFunction(diBuilder As DIBuilder, scope As DIScope, name As String, linkageName As String, file As DIFile, line As UInteger, signature As DebugFunctionType, isLocalToUnit As Boolean, isDefinition As Boolean, scopeLine As UInteger, debugFlags As DebugInfoFlags, isOptimized As Boolean) As [Function]
  overload: Ubiquity.NET.Llvm.Module.CreateFunction*
  implements:
  - Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,Ubiquity.NET.Llvm.DebugInfo.DIScope,System.String,System.String,Ubiquity.NET.Llvm.DebugInfo.DIFile,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType,System.Boolean,System.Boolean,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags,System.Boolean)
  nameWithType.vb: Module.CreateFunction(DIBuilder, DIScope, String, String, DIFile, UInteger, DebugFunctionType, Boolean, Boolean, UInteger, DebugInfoFlags, Boolean)
  fullName.vb: Ubiquity.NET.Llvm.Module.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder, Ubiquity.NET.Llvm.DebugInfo.DIScope, String, String, Ubiquity.NET.Llvm.DebugInfo.DIFile, UInteger, Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType, Boolean, Boolean, UInteger, Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags, Boolean)
  name.vb: CreateFunction(DIBuilder, DIScope, String, String, DIFile, UInteger, DebugFunctionType, Boolean, Boolean, UInteger, DebugInfoFlags, Boolean)
- uid: Ubiquity.NET.Llvm.Module.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}})
  commentId: M:Ubiquity.NET.Llvm.Module.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}})
  id: CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}})
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: CreateFunction(ref readonly DIBuilder, string, bool, IDebugType<ITypeRef, DIType>, IEnumerable<IDebugType<ITypeRef, DIType>>)
  nameWithType: Module.CreateFunction(ref readonly DIBuilder, string, bool, IDebugType<ITypeRef, DIType>, IEnumerable<IDebugType<ITypeRef, DIType>>)
  fullName: Ubiquity.NET.Llvm.Module.CreateFunction(ref readonly Ubiquity.NET.Llvm.DebugInfo.DIBuilder, string, bool, Ubiquity.NET.Llvm.DebugInfo.IDebugType<Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType>, System.Collections.Generic.IEnumerable<Ubiquity.NET.Llvm.DebugInfo.IDebugType<Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType>>)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: CreateFunction
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 171
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Creates a function
  example: []
  syntax:
    content: public Function CreateFunction(ref readonly DIBuilder diBuilder, string name, bool isVarArg, IDebugType<ITypeRef, DIType> returnType, IEnumerable<IDebugType<ITypeRef, DIType>> argumentTypes)
    parameters:
    - id: diBuilder
      type: Ubiquity.NET.Llvm.DebugInfo.DIBuilder
      description: <xref href="Ubiquity.NET.Llvm.DebugInfo.DIBuilder" data-throw-if-not-resolved="false"></xref> for creation of debug information
    - id: name
      type: System.String
      description: Name of the function
    - id: isVarArg
      type: System.Boolean
      description: Flag indicating if the function supports a variadic argument list
    - id: returnType
      type: Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}
      description: Return type of the function
    - id: argumentTypes
      type: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}}
      description: Arguments for the function
    return:
      type: Ubiquity.NET.Llvm.Values.Function
      description: >-
        Function, matching the signature specified. This may be a previously declared or defined

        function or a new function if none matching the name and signature is already present.
    content.vb: Public Function CreateFunction(diBuilder As DIBuilder, name As String, isVarArg As Boolean, returnType As IDebugType(Of ITypeRef, DIType), argumentTypes As IEnumerable(Of IDebugType(Of ITypeRef, DIType))) As [Function]
  overload: Ubiquity.NET.Llvm.Module.CreateFunction*
  implements:
  - Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}})
  nameWithType.vb: Module.CreateFunction(DIBuilder, String, Boolean, IDebugType(Of ITypeRef, DIType), IEnumerable(Of IDebugType(Of ITypeRef, DIType)))
  fullName.vb: Ubiquity.NET.Llvm.Module.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder, String, Boolean, Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType), System.Collections.Generic.IEnumerable(Of Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType)))
  name.vb: CreateFunction(DIBuilder, String, Boolean, IDebugType(Of ITypeRef, DIType), IEnumerable(Of IDebugType(Of ITypeRef, DIType)))
- uid: Ubiquity.NET.Llvm.Module.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}[])
  commentId: M:Ubiquity.NET.Llvm.Module.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}[])
  id: CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}[])
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: CreateFunction(ref readonly DIBuilder, string, bool, IDebugType<ITypeRef, DIType>, params IDebugType<ITypeRef, DIType>[])
  nameWithType: Module.CreateFunction(ref readonly DIBuilder, string, bool, IDebugType<ITypeRef, DIType>, params IDebugType<ITypeRef, DIType>[])
  fullName: Ubiquity.NET.Llvm.Module.CreateFunction(ref readonly Ubiquity.NET.Llvm.DebugInfo.DIBuilder, string, bool, Ubiquity.NET.Llvm.DebugInfo.IDebugType<Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType>, params Ubiquity.NET.Llvm.DebugInfo.IDebugType<Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType>[])
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: CreateFunction
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 174
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Creates a function
  example: []
  syntax:
    content: public Function CreateFunction(ref readonly DIBuilder diBuilder, string name, bool isVarArg, IDebugType<ITypeRef, DIType> returnType, params IDebugType<ITypeRef, DIType>[] argumentTypes)
    parameters:
    - id: diBuilder
      type: Ubiquity.NET.Llvm.DebugInfo.DIBuilder
      description: <xref href="Ubiquity.NET.Llvm.DebugInfo.DIBuilder" data-throw-if-not-resolved="false"></xref> for creation of debug information
    - id: name
      type: System.String
      description: Name of the function
    - id: isVarArg
      type: System.Boolean
      description: Flag indicating if the function supports a variadic argument list
    - id: returnType
      type: Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}
      description: Return type of the function
    - id: argumentTypes
      type: Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}[]
      description: Arguments for the function
    return:
      type: Ubiquity.NET.Llvm.Values.Function
      description: >-
        Function, matching the signature specified. This may be a previously declared or defined

        function or a new function if none matching the name and signature is already present.
    content.vb: Public Function CreateFunction(diBuilder As DIBuilder, name As String, isVarArg As Boolean, returnType As IDebugType(Of ITypeRef, DIType), ParamArray argumentTypes As IDebugType(Of ITypeRef, DIType)()) As [Function]
  overload: Ubiquity.NET.Llvm.Module.CreateFunction*
  implements:
  - Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}[])
  nameWithType.vb: Module.CreateFunction(DIBuilder, String, Boolean, IDebugType(Of ITypeRef, DIType), ParamArray IDebugType(Of ITypeRef, DIType)())
  fullName.vb: Ubiquity.NET.Llvm.Module.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder, String, Boolean, Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType), ParamArray Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType)())
  name.vb: CreateFunction(DIBuilder, String, Boolean, IDebugType(Of ITypeRef, DIType), ParamArray IDebugType(Of ITypeRef, DIType)())
- uid: Ubiquity.NET.Llvm.Module.GetIntrinsicDeclaration(System.String,Ubiquity.NET.Llvm.Types.ITypeRef[])
  commentId: M:Ubiquity.NET.Llvm.Module.GetIntrinsicDeclaration(System.String,Ubiquity.NET.Llvm.Types.ITypeRef[])
  id: GetIntrinsicDeclaration(System.String,Ubiquity.NET.Llvm.Types.ITypeRef[])
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: GetIntrinsicDeclaration(string, params ITypeRef[])
  nameWithType: Module.GetIntrinsicDeclaration(string, params ITypeRef[])
  fullName: Ubiquity.NET.Llvm.Module.GetIntrinsicDeclaration(string, params Ubiquity.NET.Llvm.Types.ITypeRef[])
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: GetIntrinsicDeclaration
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 177
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets a declaration for an LLVM intrinsic function
  remarks: >-
    This method will match an overloaded intrinsic based on the parameter types. If an intrinsic

    has no overloads then an exact match is required. If the intrinsic has overloads than a prefix

    match is used.

    <div class="IMPORTANT"><h5>important</h5><p>

    It is important to note that the prefix match requires the name provided to have a length greater

    than that of the name of the intrinsic and that the name starts with a matching overloaded intrinsic.

    for example: 'llvm.memset' would not match the overloaded memset intrinsic but 'llvm.memset.p.i' does.

    Thus, it is generally a good idea to use the signature from the LLVM documentation without the address

    space, or bit widths. That is instead of 'llvm.memset.p0i8.i32' use 'llvm.memset.p.i'.

    </p></div>
  example: []
  syntax:
    content: public Function GetIntrinsicDeclaration(string name, params ITypeRef[] args)
    parameters:
    - id: name
      type: System.String
      description: Name of the intrinsic
    - id: args
      type: Ubiquity.NET.Llvm.Types.ITypeRef[]
      description: Args for the intrinsic
    return:
      type: Ubiquity.NET.Llvm.Values.Function
      description: Function declaration
    content.vb: Public Function GetIntrinsicDeclaration(name As String, ParamArray args As ITypeRef()) As [Function]
  overload: Ubiquity.NET.Llvm.Module.GetIntrinsicDeclaration*
  implements:
  - Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(System.String,Ubiquity.NET.Llvm.Types.ITypeRef[])
  nameWithType.vb: Module.GetIntrinsicDeclaration(String, ParamArray ITypeRef())
  fullName.vb: Ubiquity.NET.Llvm.Module.GetIntrinsicDeclaration(String, ParamArray Ubiquity.NET.Llvm.Types.ITypeRef())
  name.vb: GetIntrinsicDeclaration(String, ParamArray ITypeRef())
- uid: Ubiquity.NET.Llvm.Module.GetIntrinsicDeclaration(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef[])
  commentId: M:Ubiquity.NET.Llvm.Module.GetIntrinsicDeclaration(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef[])
  id: GetIntrinsicDeclaration(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef[])
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: GetIntrinsicDeclaration(uint, params ITypeRef[])
  nameWithType: Module.GetIntrinsicDeclaration(uint, params ITypeRef[])
  fullName: Ubiquity.NET.Llvm.Module.GetIntrinsicDeclaration(uint, params Ubiquity.NET.Llvm.Types.ITypeRef[])
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: GetIntrinsicDeclaration
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 180
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets a declaration for an LLVM intrinsic function
  example: []
  syntax:
    content: public Function GetIntrinsicDeclaration(uint id, params ITypeRef[] args)
    parameters:
    - id: id
      type: System.UInt32
      description: id of the intrinsic
    - id: args
      type: Ubiquity.NET.Llvm.Types.ITypeRef[]
      description: Arguments for the intrinsic
    return:
      type: Ubiquity.NET.Llvm.Values.Function
      description: Function declaration
    content.vb: Public Function GetIntrinsicDeclaration(id As UInteger, ParamArray args As ITypeRef()) As [Function]
  overload: Ubiquity.NET.Llvm.Module.GetIntrinsicDeclaration*
  implements:
  - Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef[])
  nameWithType.vb: Module.GetIntrinsicDeclaration(UInteger, ParamArray ITypeRef())
  fullName.vb: Ubiquity.NET.Llvm.Module.GetIntrinsicDeclaration(UInteger, ParamArray Ubiquity.NET.Llvm.Types.ITypeRef())
  name.vb: GetIntrinsicDeclaration(UInteger, ParamArray ITypeRef())
- uid: Ubiquity.NET.Llvm.Module.Clone
  commentId: M:Ubiquity.NET.Llvm.Module.Clone
  id: Clone
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: Module.Clone()
  fullName: Ubiquity.NET.Llvm.Module.Clone()
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Clone
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 183
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Clones the current module into the same context
  example: []
  syntax:
    content: public Module Clone()
    return:
      type: Ubiquity.NET.Llvm.Module
      description: Cloned module
    content.vb: Public Function Clone() As [Module]
  overload: Ubiquity.NET.Llvm.Module.Clone*
  implements:
  - Ubiquity.NET.Llvm.IModule.Clone
- uid: Ubiquity.NET.Llvm.Module.Clone(Ubiquity.NET.Llvm.IContext)
  commentId: M:Ubiquity.NET.Llvm.Module.Clone(Ubiquity.NET.Llvm.IContext)
  id: Clone(Ubiquity.NET.Llvm.IContext)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: Clone(IContext)
  nameWithType: Module.Clone(IContext)
  fullName: Ubiquity.NET.Llvm.Module.Clone(Ubiquity.NET.Llvm.IContext)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Clone
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 186
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Clones the module into a new <xref href="Ubiquity.NET.Llvm.IContext" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public Module Clone(IContext targetContext)
    parameters:
    - id: targetContext
      type: Ubiquity.NET.Llvm.IContext
      description: <xref href="Ubiquity.NET.Llvm.IContext" data-throw-if-not-resolved="false"></xref> to clone the module into
    return:
      type: Ubiquity.NET.Llvm.Module
      description: Cloned copy of the module
    content.vb: Public Function Clone(targetContext As IContext) As [Module]
  overload: Ubiquity.NET.Llvm.Module.Clone*
  implements:
  - Ubiquity.NET.Llvm.IModule.Clone(Ubiquity.NET.Llvm.IContext)
- uid: Ubiquity.NET.Llvm.Module.SourceFileName
  commentId: P:Ubiquity.NET.Llvm.Module.SourceFileName
  id: SourceFileName
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: SourceFileName
  nameWithType: Module.SourceFileName
  fullName: Ubiquity.NET.Llvm.Module.SourceFileName
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: SourceFileName
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 189
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets or sets the name of the source file generating this module
  example: []
  syntax:
    content: public string SourceFileName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property SourceFileName As String
  overload: Ubiquity.NET.Llvm.Module.SourceFileName*
  implements:
  - Ubiquity.NET.Llvm.IModule.SourceFileName
- uid: Ubiquity.NET.Llvm.Module.Comdats
  commentId: P:Ubiquity.NET.Llvm.Module.Comdats
  id: Comdats
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: Comdats
  nameWithType: Module.Comdats
  fullName: Ubiquity.NET.Llvm.Module.Comdats
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Comdats
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 192
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the Comdats for this module
  example: []
  syntax:
    content: public ComdatCollection Comdats { get; }
    parameters: []
    return:
      type: Ubiquity.NET.Llvm.ComdatCollection
    content.vb: Public ReadOnly Property Comdats As ComdatCollection
  overload: Ubiquity.NET.Llvm.Module.Comdats*
  implements:
  - Ubiquity.NET.Llvm.IModule.Comdats
- uid: Ubiquity.NET.Llvm.Module.Context
  commentId: P:Ubiquity.NET.Llvm.Module.Context
  id: Context
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: Module.Context
  fullName: Ubiquity.NET.Llvm.Module.Context
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Context
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 195
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the <xref href="Ubiquity.NET.Llvm.IModule.Context" data-throw-if-not-resolved="false"></xref> this module belongs to
  example: []
  syntax:
    content: public IContext Context { get; }
    parameters: []
    return:
      type: Ubiquity.NET.Llvm.IContext
    content.vb: Public ReadOnly Property Context As IContext
  overload: Ubiquity.NET.Llvm.Module.Context*
  implements:
  - Ubiquity.NET.Llvm.IModule.Context
- uid: Ubiquity.NET.Llvm.Module.ModuleFlags
  commentId: P:Ubiquity.NET.Llvm.Module.ModuleFlags
  id: ModuleFlags
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: ModuleFlags
  nameWithType: Module.ModuleFlags
  fullName: Ubiquity.NET.Llvm.Module.ModuleFlags
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: ModuleFlags
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 198
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the IrMetadata for module level flags
  example: []
  syntax:
    content: public IReadOnlyDictionary<string, ModuleFlag> ModuleFlags { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{System.String,Ubiquity.NET.Llvm.Metadata.ModuleFlag}
    content.vb: Public ReadOnly Property ModuleFlags As IReadOnlyDictionary(Of String, ModuleFlag)
  overload: Ubiquity.NET.Llvm.Module.ModuleFlags*
  implements:
  - Ubiquity.NET.Llvm.IModule.ModuleFlags
- uid: Ubiquity.NET.Llvm.Module.CompileUnits
  commentId: P:Ubiquity.NET.Llvm.Module.CompileUnits
  id: CompileUnits
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: CompileUnits
  nameWithType: Module.CompileUnits
  fullName: Ubiquity.NET.Llvm.Module.CompileUnits
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: CompileUnits
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 201
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the Debug Compile units for this module
  example: []
  syntax:
    content: public IEnumerable<DICompileUnit> CompileUnits { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.DICompileUnit}
    content.vb: Public ReadOnly Property CompileUnits As IEnumerable(Of DICompileUnit)
  overload: Ubiquity.NET.Llvm.Module.CompileUnits*
  implements:
  - Ubiquity.NET.Llvm.IModule.CompileUnits
- uid: Ubiquity.NET.Llvm.Module.DataLayoutString
  commentId: P:Ubiquity.NET.Llvm.Module.DataLayoutString
  id: DataLayoutString
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: DataLayoutString
  nameWithType: Module.DataLayoutString
  fullName: Ubiquity.NET.Llvm.Module.DataLayoutString
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: DataLayoutString
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 204
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets or Sets the Data layout string for this module
  remarks: >-
    <div class="NOTE"><h5>note</h5><p>The data layout string doesn't do what seems obvious.

    That is, it doesn't force the target back-end to generate code

    or types with a particular layout. Rather, the layout string has

    to match the implicit layout of the target. Thus it should only

    come from the actual <xref href="Ubiquity.NET.Llvm.TargetMachine" data-throw-if-not-resolved="false"></xref> the code is

    targeting.</p></div>
  example: []
  syntax:
    content: public LazyEncodedString DataLayoutString { get; set; }
    parameters: []
    return:
      type: Ubiquity.NET.InteropHelpers.LazyEncodedString
    content.vb: Public Property DataLayoutString As LazyEncodedString
  overload: Ubiquity.NET.Llvm.Module.DataLayoutString*
  implements:
  - Ubiquity.NET.Llvm.IModule.DataLayoutString
- uid: Ubiquity.NET.Llvm.Module.Layout
  commentId: P:Ubiquity.NET.Llvm.Module.Layout
  id: Layout
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: Layout
  nameWithType: Module.Layout
  fullName: Ubiquity.NET.Llvm.Module.Layout
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Layout
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 207
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets or sets the target data layout for this module
  remarks: >-
    The setter uses a by value copy where the input value is serialized to

    a string and then set via <xref href="Ubiquity.NET.Llvm.IModule.DataLayoutString" data-throw-if-not-resolved="false"></xref>. That is, even

    if the implementation of <xref href="Ubiquity.NET.Llvm.IDataLayout" data-throw-if-not-resolved="false"></xref> is for an <xref href="System.IDisposable" data-throw-if-not-resolved="false"></xref>

    type no ownership transfer occurs.
  example: []
  syntax:
    content: public IDataLayout Layout { get; set; }
    parameters: []
    return:
      type: Ubiquity.NET.Llvm.IDataLayout
    content.vb: Public Property Layout As IDataLayout
  overload: Ubiquity.NET.Llvm.Module.Layout*
  implements:
  - Ubiquity.NET.Llvm.IModule.Layout
- uid: Ubiquity.NET.Llvm.Module.TargetTriple
  commentId: P:Ubiquity.NET.Llvm.Module.TargetTriple
  id: TargetTriple
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: TargetTriple
  nameWithType: Module.TargetTriple
  fullName: Ubiquity.NET.Llvm.Module.TargetTriple
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: TargetTriple
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 210
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets or sets the Target Triple describing the target, ABI and OS
  example: []
  syntax:
    content: public string TargetTriple { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property TargetTriple As String
  overload: Ubiquity.NET.Llvm.Module.TargetTriple*
  implements:
  - Ubiquity.NET.Llvm.IModule.TargetTriple
- uid: Ubiquity.NET.Llvm.Module.Globals
  commentId: P:Ubiquity.NET.Llvm.Module.Globals
  id: Globals
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: Globals
  nameWithType: Module.Globals
  fullName: Ubiquity.NET.Llvm.Module.Globals
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Globals
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 213
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the <xref href="Ubiquity.NET.Llvm.Values.GlobalVariable" data-throw-if-not-resolved="false"></xref>s contained by this module
  example: []
  syntax:
    content: public IEnumerable<GlobalVariable> Globals { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.GlobalVariable}
    content.vb: Public ReadOnly Property Globals As IEnumerable(Of GlobalVariable)
  overload: Ubiquity.NET.Llvm.Module.Globals*
  implements:
  - Ubiquity.NET.Llvm.IModule.Globals
- uid: Ubiquity.NET.Llvm.Module.Functions
  commentId: P:Ubiquity.NET.Llvm.Module.Functions
  id: Functions
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: Functions
  nameWithType: Module.Functions
  fullName: Ubiquity.NET.Llvm.Module.Functions
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Functions
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 216
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the functions contained in this module
  example: []
  syntax:
    content: public IEnumerable<Function> Functions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.Function}
    content.vb: Public ReadOnly Property Functions As IEnumerable(Of [Function])
  overload: Ubiquity.NET.Llvm.Module.Functions*
  implements:
  - Ubiquity.NET.Llvm.IModule.Functions
- uid: Ubiquity.NET.Llvm.Module.Aliases
  commentId: P:Ubiquity.NET.Llvm.Module.Aliases
  id: Aliases
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: Aliases
  nameWithType: Module.Aliases
  fullName: Ubiquity.NET.Llvm.Module.Aliases
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Aliases
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 219
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the global aliases in this module
  example: []
  syntax:
    content: public IEnumerable<GlobalAlias> Aliases { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.GlobalAlias}
    content.vb: Public ReadOnly Property Aliases As IEnumerable(Of GlobalAlias)
  overload: Ubiquity.NET.Llvm.Module.Aliases*
  implements:
  - Ubiquity.NET.Llvm.IModule.Aliases
- uid: Ubiquity.NET.Llvm.Module.NamedMetadata
  commentId: P:Ubiquity.NET.Llvm.Module.NamedMetadata
  id: NamedMetadata
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: NamedMetadata
  nameWithType: Module.NamedMetadata
  fullName: Ubiquity.NET.Llvm.Module.NamedMetadata
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: NamedMetadata
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 222
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the <xref href="Ubiquity.NET.Llvm.Metadata.NamedMDNode" data-throw-if-not-resolved="false"></xref>s for this module
  example: []
  syntax:
    content: public IEnumerable<NamedMDNode> NamedMetadata { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Metadata.NamedMDNode}
    content.vb: Public ReadOnly Property NamedMetadata As IEnumerable(Of NamedMDNode)
  overload: Ubiquity.NET.Llvm.Module.NamedMetadata*
  implements:
  - Ubiquity.NET.Llvm.IModule.NamedMetadata
- uid: Ubiquity.NET.Llvm.Module.IndirectFunctions
  commentId: P:Ubiquity.NET.Llvm.Module.IndirectFunctions
  id: IndirectFunctions
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: IndirectFunctions
  nameWithType: Module.IndirectFunctions
  fullName: Ubiquity.NET.Llvm.Module.IndirectFunctions
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: IndirectFunctions
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 225
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the <xref href="Ubiquity.NET.Llvm.Values.GlobalIFunc" data-throw-if-not-resolved="false"></xref>s in this module
  example: []
  syntax:
    content: public IEnumerable<GlobalIFunc> IndirectFunctions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.GlobalIFunc}
    content.vb: Public ReadOnly Property IndirectFunctions As IEnumerable(Of GlobalIFunc)
  overload: Ubiquity.NET.Llvm.Module.IndirectFunctions*
  implements:
  - Ubiquity.NET.Llvm.IModule.IndirectFunctions
- uid: Ubiquity.NET.Llvm.Module.Name
  commentId: P:Ubiquity.NET.Llvm.Module.Name
  id: Name
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Module.Name
  fullName: Ubiquity.NET.Llvm.Module.Name
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Name
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 228
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the name of the module
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Ubiquity.NET.Llvm.Module.Name*
  implements:
  - Ubiquity.NET.Llvm.IModule.Name
- uid: Ubiquity.NET.Llvm.Module.ModuleInlineAsm
  commentId: P:Ubiquity.NET.Llvm.Module.ModuleInlineAsm
  id: ModuleInlineAsm
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: ModuleInlineAsm
  nameWithType: Module.ModuleInlineAsm
  fullName: Ubiquity.NET.Llvm.Module.ModuleInlineAsm
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: ModuleInlineAsm
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 231
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets or sets the module level inline assembly
  example: []
  syntax:
    content: public string ModuleInlineAsm { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ModuleInlineAsm As String
  overload: Ubiquity.NET.Llvm.Module.ModuleInlineAsm*
  implements:
  - Ubiquity.NET.Llvm.IModule.ModuleInlineAsm
- uid: Ubiquity.NET.Llvm.Module.LoadFrom(System.String,Ubiquity.NET.Llvm.IContext)
  commentId: M:Ubiquity.NET.Llvm.Module.LoadFrom(System.String,Ubiquity.NET.Llvm.IContext)
  id: LoadFrom(System.String,Ubiquity.NET.Llvm.IContext)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: LoadFrom(string, IContext)
  nameWithType: Module.LoadFrom(string, IContext)
  fullName: Ubiquity.NET.Llvm.Module.LoadFrom(string, Ubiquity.NET.Llvm.IContext)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: LoadFrom
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 238
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Load a bit-code module from a given file
  example: []
  syntax:
    content: public static Module LoadFrom(string path, IContext context)
    parameters:
    - id: path
      type: System.String
      description: path of the file to load
    - id: context
      type: Ubiquity.NET.Llvm.IContext
      description: Context to use for creating the module
    return:
      type: Ubiquity.NET.Llvm.Module
      description: Loaded <xref href="Ubiquity.NET.Llvm.Module" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function LoadFrom(path As String, context As IContext) As [Module]
  overload: Ubiquity.NET.Llvm.Module.LoadFrom*
  nameWithType.vb: Module.LoadFrom(String, IContext)
  fullName.vb: Ubiquity.NET.Llvm.Module.LoadFrom(String, Ubiquity.NET.Llvm.IContext)
  name.vb: LoadFrom(String, IContext)
- uid: Ubiquity.NET.Llvm.Module.LoadFrom(Ubiquity.NET.Llvm.MemoryBuffer,Ubiquity.NET.Llvm.IContext)
  commentId: M:Ubiquity.NET.Llvm.Module.LoadFrom(Ubiquity.NET.Llvm.MemoryBuffer,Ubiquity.NET.Llvm.IContext)
  id: LoadFrom(Ubiquity.NET.Llvm.MemoryBuffer,Ubiquity.NET.Llvm.IContext)
  parent: Ubiquity.NET.Llvm.Module
  langs:
  - csharp
  - vb
  name: LoadFrom(MemoryBuffer, IContext)
  nameWithType: Module.LoadFrom(MemoryBuffer, IContext)
  fullName: Ubiquity.NET.Llvm.Module.LoadFrom(Ubiquity.NET.Llvm.MemoryBuffer, Ubiquity.NET.Llvm.IContext)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Module.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: LoadFrom
    path: ../src/Ubiquity.NET.Llvm/Module.cs
    startLine: 263
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Load bit code from a memory buffer
  remarks: >-
    This along with <xref href="Ubiquity.NET.Llvm.Module.WriteToBuffer" data-throw-if-not-resolved="false"></xref> are useful for "cloning"

    a module from one context to another. This allows creation of multiple

    modules on different threads and contexts and later moving them to a

    single context in order to link them into a single final module for

    optimization.
  example: []
  syntax:
    content: public static Module LoadFrom(MemoryBuffer buffer, IContext context)
    parameters:
    - id: buffer
      type: Ubiquity.NET.Llvm.MemoryBuffer
      description: Buffer to load from
    - id: context
      type: Ubiquity.NET.Llvm.IContext
      description: Context to load the module into
    return:
      type: Ubiquity.NET.Llvm.Module
      description: Loaded <xref href="Ubiquity.NET.Llvm.Module" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function LoadFrom(buffer As MemoryBuffer, context As IContext) As [Module]
  overload: Ubiquity.NET.Llvm.Module.LoadFrom*
references:
- uid: Ubiquity.NET.Llvm
  commentId: N:Ubiquity.NET.Llvm
  href: Ubiquity.html
  name: Ubiquity.NET.Llvm
  nameWithType: Ubiquity.NET.Llvm
  fullName: Ubiquity.NET.Llvm
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Ubiquity.NET.Llvm.IModule
  commentId: T:Ubiquity.NET.Llvm.IModule
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.IModule.html
  name: IModule
  nameWithType: IModule
  fullName: Ubiquity.NET.Llvm.IModule
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.IEquatable{Ubiquity.NET.Llvm.IModule}
  commentId: T:System.IEquatable{Ubiquity.NET.Llvm.IModule}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<IModule>
  nameWithType: IEquatable<IModule>
  fullName: System.IEquatable<Ubiquity.NET.Llvm.IModule>
  nameWithType.vb: IEquatable(Of IModule)
  fullName.vb: System.IEquatable(Of Ubiquity.NET.Llvm.IModule)
  name.vb: IEquatable(Of IModule)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: Ubiquity.NET.Llvm.IModule
    name: IModule
    href: Ubiquity.NET.Llvm.IModule.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.IModule
    name: IModule
    href: Ubiquity.NET.Llvm.IModule.html
  - name: )
- uid: System.IEquatable{Ubiquity.NET.Llvm.Module}
  commentId: T:System.IEquatable{Ubiquity.NET.Llvm.Module}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<Module>
  nameWithType: IEquatable<Module>
  fullName: System.IEquatable<Ubiquity.NET.Llvm.Module>
  nameWithType.vb: IEquatable(Of Module)
  fullName.vb: System.IEquatable(Of Ubiquity.NET.Llvm.Module)
  name.vb: IEquatable(Of Module)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: Ubiquity.NET.Llvm.Module
    name: Module
    href: Ubiquity.NET.Llvm.Module.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.Module
    name: Module
    href: Ubiquity.NET.Llvm.Module.html
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Ubiquity.NET.Llvm.Module.Equals*
  commentId: Overload:Ubiquity.NET.Llvm.Module.Equals
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_Equals_Ubiquity_NET_Llvm_IModule_
  name: Equals
  nameWithType: Module.Equals
  fullName: Ubiquity.NET.Llvm.Module.Equals
- uid: System.IEquatable{Ubiquity.NET.Llvm.IModule}.Equals(Ubiquity.NET.Llvm.IModule)
  commentId: M:System.IEquatable{Ubiquity.NET.Llvm.IModule}.Equals(Ubiquity.NET.Llvm.IModule)
  parent: System.IEquatable{Ubiquity.NET.Llvm.IModule}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(IModule)
  nameWithType: IEquatable<IModule>.Equals(IModule)
  fullName: System.IEquatable<Ubiquity.NET.Llvm.IModule>.Equals(Ubiquity.NET.Llvm.IModule)
  nameWithType.vb: IEquatable(Of IModule).Equals(IModule)
  fullName.vb: System.IEquatable(Of Ubiquity.NET.Llvm.IModule).Equals(Ubiquity.NET.Llvm.IModule)
  spec.csharp:
  - uid: System.IEquatable{Ubiquity.NET.Llvm.IModule}.Equals(Ubiquity.NET.Llvm.IModule)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: Ubiquity.NET.Llvm.IModule
    name: IModule
    href: Ubiquity.NET.Llvm.IModule.html
  - name: )
  spec.vb:
  - uid: System.IEquatable{Ubiquity.NET.Llvm.IModule}.Equals(Ubiquity.NET.Llvm.IModule)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: Ubiquity.NET.Llvm.IModule
    name: IModule
    href: Ubiquity.NET.Llvm.IModule.html
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
- uid: System.IEquatable{Ubiquity.NET.Llvm.Module}.Equals(Ubiquity.NET.Llvm.Module)
  commentId: M:System.IEquatable{Ubiquity.NET.Llvm.Module}.Equals(Ubiquity.NET.Llvm.Module)
  parent: System.IEquatable{Ubiquity.NET.Llvm.Module}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(Module)
  nameWithType: IEquatable<Module>.Equals(Module)
  fullName: System.IEquatable<Ubiquity.NET.Llvm.Module>.Equals(Ubiquity.NET.Llvm.Module)
  nameWithType.vb: IEquatable(Of Module).Equals(Module)
  fullName.vb: System.IEquatable(Of Ubiquity.NET.Llvm.Module).Equals(Ubiquity.NET.Llvm.Module)
  spec.csharp:
  - uid: System.IEquatable{Ubiquity.NET.Llvm.Module}.Equals(Ubiquity.NET.Llvm.Module)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: Ubiquity.NET.Llvm.Module
    name: Module
    href: Ubiquity.NET.Llvm.Module.html
  - name: )
  spec.vb:
  - uid: System.IEquatable{Ubiquity.NET.Llvm.Module}.Equals(Ubiquity.NET.Llvm.Module)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: Ubiquity.NET.Llvm.Module
    name: Module
    href: Ubiquity.NET.Llvm.Module.html
  - name: )
- uid: Ubiquity.NET.Llvm.Module
  commentId: T:Ubiquity.NET.Llvm.Module
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.Module.html
  name: Module
  nameWithType: Module
  fullName: Ubiquity.NET.Llvm.Module
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: Ubiquity.NET.Llvm.Module.GetHashCode*
  commentId: Overload:Ubiquity.NET.Llvm.Module.GetHashCode
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_GetHashCode
  name: GetHashCode
  nameWithType: Module.GetHashCode
  fullName: Ubiquity.NET.Llvm.Module.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Ubiquity.NET.Llvm.Module.DebugMetadataVersion*
  commentId: Overload:Ubiquity.NET.Llvm.Module.DebugMetadataVersion
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_DebugMetadataVersion
  name: DebugMetadataVersion
  nameWithType: Module.DebugMetadataVersion
  fullName: Ubiquity.NET.Llvm.Module.DebugMetadataVersion
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint32
  name: uint
  nameWithType: uint
  fullName: uint
  nameWithType.vb: UInteger
  fullName.vb: UInteger
  name.vb: UInteger
- uid: Ubiquity.NET.Llvm.Module.IsDisposed*
  commentId: Overload:Ubiquity.NET.Llvm.Module.IsDisposed
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_IsDisposed
  name: IsDisposed
  nameWithType: Module.IsDisposed
  fullName: Ubiquity.NET.Llvm.Module.IsDisposed
- uid: Ubiquity.NET.Llvm.Module.Dispose*
  commentId: Overload:Ubiquity.NET.Llvm.Module.Dispose
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_Dispose
  name: Dispose
  nameWithType: Module.Dispose
  fullName: Ubiquity.NET.Llvm.Module.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
- uid: Ubiquity.NET.Llvm.Module.AppendInlineAsm*
  commentId: Overload:Ubiquity.NET.Llvm.Module.AppendInlineAsm
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_AppendInlineAsm_System_String_
  name: AppendInlineAsm
  nameWithType: Module.AppendInlineAsm
  fullName: Ubiquity.NET.Llvm.Module.AppendInlineAsm
- uid: Ubiquity.NET.Llvm.IModule.AppendInlineAsm(System.String)
  commentId: M:Ubiquity.NET.Llvm.IModule.AppendInlineAsm(System.String)
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AppendInlineAsm_System_String_
  name: AppendInlineAsm(string)
  nameWithType: IModule.AppendInlineAsm(string)
  fullName: Ubiquity.NET.Llvm.IModule.AppendInlineAsm(string)
  nameWithType.vb: IModule.AppendInlineAsm(String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AppendInlineAsm(String)
  name.vb: AppendInlineAsm(String)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.AppendInlineAsm(System.String)
    name: AppendInlineAsm
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AppendInlineAsm_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.AppendInlineAsm(System.String)
    name: AppendInlineAsm
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AppendInlineAsm_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: Ubiquity.NET.Llvm.Module.TryRunPasses*
  commentId: Overload:Ubiquity.NET.Llvm.Module.TryRunPasses
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_TryRunPasses_System_String___
  name: TryRunPasses
  nameWithType: Module.TryRunPasses
  fullName: Ubiquity.NET.Llvm.Module.TryRunPasses
- uid: Ubiquity.NET.Llvm.IModule.TryRunPasses(System.String[])
  commentId: M:Ubiquity.NET.Llvm.IModule.TryRunPasses(System.String[])
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_TryRunPasses_System_String___
  name: TryRunPasses(params string[])
  nameWithType: IModule.TryRunPasses(params string[])
  fullName: Ubiquity.NET.Llvm.IModule.TryRunPasses(params string[])
  nameWithType.vb: IModule.TryRunPasses(ParamArray String())
  fullName.vb: Ubiquity.NET.Llvm.IModule.TryRunPasses(ParamArray String())
  name.vb: TryRunPasses(ParamArray String())
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.TryRunPasses(System.String[])
    name: TryRunPasses
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_TryRunPasses_System_String___
  - name: (
  - name: params
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.TryRunPasses(System.String[])
    name: TryRunPasses
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_TryRunPasses_System_String___
  - name: (
  - name: ParamArray
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
  - name: )
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: Ubiquity.NET.Llvm.ErrorInfo
  commentId: T:Ubiquity.NET.Llvm.ErrorInfo
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.ErrorInfo.html
  name: ErrorInfo
  nameWithType: ErrorInfo
  fullName: Ubiquity.NET.Llvm.ErrorInfo
- uid: Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
  commentId: M:Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_TryRunPasses_Ubiquity_NET_Llvm_PassBuilderOptions_System_String___
  name: TryRunPasses(PassBuilderOptions, params string[])
  nameWithType: IModule.TryRunPasses(PassBuilderOptions, params string[])
  fullName: Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.PassBuilderOptions, params string[])
  nameWithType.vb: IModule.TryRunPasses(PassBuilderOptions, ParamArray String())
  fullName.vb: Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.PassBuilderOptions, ParamArray String())
  name.vb: TryRunPasses(PassBuilderOptions, ParamArray String())
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
    name: TryRunPasses
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_TryRunPasses_Ubiquity_NET_Llvm_PassBuilderOptions_System_String___
  - name: (
  - uid: Ubiquity.NET.Llvm.PassBuilderOptions
    name: PassBuilderOptions
    href: Ubiquity.NET.Llvm.PassBuilderOptions.html
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
    name: TryRunPasses
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_TryRunPasses_Ubiquity_NET_Llvm_PassBuilderOptions_System_String___
  - name: (
  - uid: Ubiquity.NET.Llvm.PassBuilderOptions
    name: PassBuilderOptions
    href: Ubiquity.NET.Llvm.PassBuilderOptions.html
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
  - name: )
- uid: Ubiquity.NET.Llvm.PassBuilderOptions
  commentId: T:Ubiquity.NET.Llvm.PassBuilderOptions
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.PassBuilderOptions.html
  name: PassBuilderOptions
  nameWithType: PassBuilderOptions
  fullName: Ubiquity.NET.Llvm.PassBuilderOptions
- uid: Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.TargetMachine,Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
  commentId: M:Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.TargetMachine,Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_TryRunPasses_Ubiquity_NET_Llvm_TargetMachine_Ubiquity_NET_Llvm_PassBuilderOptions_System_String___
  name: TryRunPasses(TargetMachine, PassBuilderOptions, params string[])
  nameWithType: IModule.TryRunPasses(TargetMachine, PassBuilderOptions, params string[])
  fullName: Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.TargetMachine, Ubiquity.NET.Llvm.PassBuilderOptions, params string[])
  nameWithType.vb: IModule.TryRunPasses(TargetMachine, PassBuilderOptions, ParamArray String())
  fullName.vb: Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.TargetMachine, Ubiquity.NET.Llvm.PassBuilderOptions, ParamArray String())
  name.vb: TryRunPasses(TargetMachine, PassBuilderOptions, ParamArray String())
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.TargetMachine,Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
    name: TryRunPasses
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_TryRunPasses_Ubiquity_NET_Llvm_TargetMachine_Ubiquity_NET_Llvm_PassBuilderOptions_System_String___
  - name: (
  - uid: Ubiquity.NET.Llvm.TargetMachine
    name: TargetMachine
    href: Ubiquity.NET.Llvm.TargetMachine.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.PassBuilderOptions
    name: PassBuilderOptions
    href: Ubiquity.NET.Llvm.PassBuilderOptions.html
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.TargetMachine,Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
    name: TryRunPasses
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_TryRunPasses_Ubiquity_NET_Llvm_TargetMachine_Ubiquity_NET_Llvm_PassBuilderOptions_System_String___
  - name: (
  - uid: Ubiquity.NET.Llvm.TargetMachine
    name: TargetMachine
    href: Ubiquity.NET.Llvm.TargetMachine.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.PassBuilderOptions
    name: PassBuilderOptions
    href: Ubiquity.NET.Llvm.PassBuilderOptions.html
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
  - name: )
- uid: Ubiquity.NET.Llvm.TargetMachine
  commentId: T:Ubiquity.NET.Llvm.TargetMachine
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.TargetMachine.html
  name: TargetMachine
  nameWithType: TargetMachine
  fullName: Ubiquity.NET.Llvm.TargetMachine
- uid: Ubiquity.NET.Llvm.Module.Link*
  commentId: Overload:Ubiquity.NET.Llvm.Module.Link
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_Link_Ubiquity_NET_Llvm_Module_
  name: Link
  nameWithType: Module.Link
  fullName: Ubiquity.NET.Llvm.Module.Link
- uid: Ubiquity.NET.Llvm.IModule.Link(Ubiquity.NET.Llvm.Module)
  commentId: M:Ubiquity.NET.Llvm.IModule.Link(Ubiquity.NET.Llvm.Module)
  parent: Ubiquity.NET.Llvm.IModule
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Link_Ubiquity_NET_Llvm_Module_
  name: Link(Module)
  nameWithType: IModule.Link(Module)
  fullName: Ubiquity.NET.Llvm.IModule.Link(Ubiquity.NET.Llvm.Module)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.Link(Ubiquity.NET.Llvm.Module)
    name: Link
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Link_Ubiquity_NET_Llvm_Module_
  - name: (
  - uid: Ubiquity.NET.Llvm.Module
    name: Module
    href: Ubiquity.NET.Llvm.Module.html
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.Link(Ubiquity.NET.Llvm.Module)
    name: Link
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Link_Ubiquity_NET_Llvm_Module_
  - name: (
  - uid: Ubiquity.NET.Llvm.Module
    name: Module
    href: Ubiquity.NET.Llvm.Module.html
  - name: )
- uid: Ubiquity.NET.Llvm.Module.Verify*
  commentId: Overload:Ubiquity.NET.Llvm.Module.Verify
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_Verify_System_String__
  name: Verify
  nameWithType: Module.Verify
  fullName: Ubiquity.NET.Llvm.Module.Verify
- uid: Ubiquity.NET.Llvm.IModule.Verify(System.String@)
  commentId: M:Ubiquity.NET.Llvm.IModule.Verify(System.String@)
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Verify_System_String__
  name: Verify(out string)
  nameWithType: IModule.Verify(out string)
  fullName: Ubiquity.NET.Llvm.IModule.Verify(out string)
  nameWithType.vb: IModule.Verify(String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.Verify(String)
  name.vb: Verify(String)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.Verify(System.String@)
    name: Verify
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Verify_System_String__
  - name: (
  - name: out
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.Verify(System.String@)
    name: Verify
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Verify_System_String__
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Ubiquity.NET.Llvm.Module.TryGetFunction*
  commentId: Overload:Ubiquity.NET.Llvm.Module.TryGetFunction
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_TryGetFunction_System_String_Ubiquity_NET_Llvm_Values_Function__
  name: TryGetFunction
  nameWithType: Module.TryGetFunction
  fullName: Ubiquity.NET.Llvm.Module.TryGetFunction
- uid: Ubiquity.NET.Llvm.IModule.TryGetFunction(System.String,Ubiquity.NET.Llvm.Values.Function@)
  commentId: M:Ubiquity.NET.Llvm.IModule.TryGetFunction(System.String,Ubiquity.NET.Llvm.Values.Function@)
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_TryGetFunction_System_String_Ubiquity_NET_Llvm_Values_Function__
  name: TryGetFunction(string, out Function)
  nameWithType: IModule.TryGetFunction(string, out Function)
  fullName: Ubiquity.NET.Llvm.IModule.TryGetFunction(string, out Ubiquity.NET.Llvm.Values.Function)
  nameWithType.vb: IModule.TryGetFunction(String, Function)
  fullName.vb: Ubiquity.NET.Llvm.IModule.TryGetFunction(String, Ubiquity.NET.Llvm.Values.Function)
  name.vb: TryGetFunction(String, Function)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.TryGetFunction(System.String,Ubiquity.NET.Llvm.Values.Function@)
    name: TryGetFunction
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_TryGetFunction_System_String_Ubiquity_NET_Llvm_Values_Function__
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.Function
    name: Function
    href: Ubiquity.NET.Llvm.Values.Function.html
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.TryGetFunction(System.String,Ubiquity.NET.Llvm.Values.Function@)
    name: TryGetFunction
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_TryGetFunction_System_String_Ubiquity_NET_Llvm_Values_Function__
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.Function
    name: Function
    href: Ubiquity.NET.Llvm.Values.Function.html
  - name: )
- uid: Ubiquity.NET.Llvm.Values.Function
  commentId: T:Ubiquity.NET.Llvm.Values.Function
  parent: Ubiquity.NET.Llvm.Values
  href: Ubiquity.NET.Llvm.Values.Function.html
  name: Function
  nameWithType: Function
  fullName: Ubiquity.NET.Llvm.Values.Function
- uid: Ubiquity.NET.Llvm.Values
  commentId: N:Ubiquity.NET.Llvm.Values
  href: Ubiquity.html
  name: Ubiquity.NET.Llvm.Values
  nameWithType: Ubiquity.NET.Llvm.Values
  fullName: Ubiquity.NET.Llvm.Values
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.Values
    name: Values
    href: Ubiquity.NET.Llvm.Values.html
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.Values
    name: Values
    href: Ubiquity.NET.Llvm.Values.html
- uid: Ubiquity.NET.Llvm.Values.GlobalIFunc
  commentId: T:Ubiquity.NET.Llvm.Values.GlobalIFunc
  parent: Ubiquity.NET.Llvm.Values
  href: Ubiquity.NET.Llvm.Values.GlobalIFunc.html
  name: GlobalIFunc
  nameWithType: GlobalIFunc
  fullName: Ubiquity.NET.Llvm.Values.GlobalIFunc
- uid: Ubiquity.NET.Llvm.Module.CreateAndAddGlobalIFunc*
  commentId: Overload:Ubiquity.NET.Llvm.Module.CreateAndAddGlobalIFunc
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_CreateAndAddGlobalIFunc_System_String_Ubiquity_NET_Llvm_Types_ITypeRef_System_UInt32_Ubiquity_NET_Llvm_Values_Function_
  name: CreateAndAddGlobalIFunc
  nameWithType: Module.CreateAndAddGlobalIFunc
  fullName: Ubiquity.NET.Llvm.Module.CreateAndAddGlobalIFunc
- uid: Ubiquity.NET.Llvm.IModule.CreateAndAddGlobalIFunc(System.String,Ubiquity.NET.Llvm.Types.ITypeRef,System.UInt32,Ubiquity.NET.Llvm.Values.Function)
  commentId: M:Ubiquity.NET.Llvm.IModule.CreateAndAddGlobalIFunc(System.String,Ubiquity.NET.Llvm.Types.ITypeRef,System.UInt32,Ubiquity.NET.Llvm.Values.Function)
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_CreateAndAddGlobalIFunc_System_String_Ubiquity_NET_Llvm_Types_ITypeRef_System_UInt32_Ubiquity_NET_Llvm_Values_Function_
  name: CreateAndAddGlobalIFunc(string, ITypeRef, uint, Function)
  nameWithType: IModule.CreateAndAddGlobalIFunc(string, ITypeRef, uint, Function)
  fullName: Ubiquity.NET.Llvm.IModule.CreateAndAddGlobalIFunc(string, Ubiquity.NET.Llvm.Types.ITypeRef, uint, Ubiquity.NET.Llvm.Values.Function)
  nameWithType.vb: IModule.CreateAndAddGlobalIFunc(String, ITypeRef, UInteger, Function)
  fullName.vb: Ubiquity.NET.Llvm.IModule.CreateAndAddGlobalIFunc(String, Ubiquity.NET.Llvm.Types.ITypeRef, UInteger, Ubiquity.NET.Llvm.Values.Function)
  name.vb: CreateAndAddGlobalIFunc(String, ITypeRef, UInteger, Function)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.CreateAndAddGlobalIFunc(System.String,Ubiquity.NET.Llvm.Types.ITypeRef,System.UInt32,Ubiquity.NET.Llvm.Values.Function)
    name: CreateAndAddGlobalIFunc
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_CreateAndAddGlobalIFunc_System_String_Ubiquity_NET_Llvm_Types_ITypeRef_System_UInt32_Ubiquity_NET_Llvm_Values_Function_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: System.UInt32
    name: uint
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.Function
    name: Function
    href: Ubiquity.NET.Llvm.Values.Function.html
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.CreateAndAddGlobalIFunc(System.String,Ubiquity.NET.Llvm.Types.ITypeRef,System.UInt32,Ubiquity.NET.Llvm.Values.Function)
    name: CreateAndAddGlobalIFunc
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_CreateAndAddGlobalIFunc_System_String_Ubiquity_NET_Llvm_Types_ITypeRef_System_UInt32_Ubiquity_NET_Llvm_Values_Function_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: System.UInt32
    name: UInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.Function
    name: Function
    href: Ubiquity.NET.Llvm.Values.Function.html
  - name: )
- uid: Ubiquity.NET.Llvm.Types.ITypeRef
  commentId: T:Ubiquity.NET.Llvm.Types.ITypeRef
  parent: Ubiquity.NET.Llvm.Types
  href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  name: ITypeRef
  nameWithType: ITypeRef
  fullName: Ubiquity.NET.Llvm.Types.ITypeRef
- uid: Ubiquity.NET.Llvm.Types
  commentId: N:Ubiquity.NET.Llvm.Types
  href: Ubiquity.html
  name: Ubiquity.NET.Llvm.Types
  nameWithType: Ubiquity.NET.Llvm.Types
  fullName: Ubiquity.NET.Llvm.Types
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.Types
    name: Types
    href: Ubiquity.NET.Llvm.Types.html
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.Types
    name: Types
    href: Ubiquity.NET.Llvm.Types.html
- uid: Ubiquity.NET.Llvm.Module.TryGetNamedGlobalIFunc*
  commentId: Overload:Ubiquity.NET.Llvm.Module.TryGetNamedGlobalIFunc
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_TryGetNamedGlobalIFunc_System_String_Ubiquity_NET_Llvm_Values_GlobalIFunc__
  name: TryGetNamedGlobalIFunc
  nameWithType: Module.TryGetNamedGlobalIFunc
  fullName: Ubiquity.NET.Llvm.Module.TryGetNamedGlobalIFunc
- uid: Ubiquity.NET.Llvm.IModule.TryGetNamedGlobalIFunc(System.String,Ubiquity.NET.Llvm.Values.GlobalIFunc@)
  commentId: M:Ubiquity.NET.Llvm.IModule.TryGetNamedGlobalIFunc(System.String,Ubiquity.NET.Llvm.Values.GlobalIFunc@)
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_TryGetNamedGlobalIFunc_System_String_Ubiquity_NET_Llvm_Values_GlobalIFunc__
  name: TryGetNamedGlobalIFunc(string, out GlobalIFunc)
  nameWithType: IModule.TryGetNamedGlobalIFunc(string, out GlobalIFunc)
  fullName: Ubiquity.NET.Llvm.IModule.TryGetNamedGlobalIFunc(string, out Ubiquity.NET.Llvm.Values.GlobalIFunc)
  nameWithType.vb: IModule.TryGetNamedGlobalIFunc(String, GlobalIFunc)
  fullName.vb: Ubiquity.NET.Llvm.IModule.TryGetNamedGlobalIFunc(String, Ubiquity.NET.Llvm.Values.GlobalIFunc)
  name.vb: TryGetNamedGlobalIFunc(String, GlobalIFunc)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.TryGetNamedGlobalIFunc(System.String,Ubiquity.NET.Llvm.Values.GlobalIFunc@)
    name: TryGetNamedGlobalIFunc
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_TryGetNamedGlobalIFunc_System_String_Ubiquity_NET_Llvm_Values_GlobalIFunc__
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.GlobalIFunc
    name: GlobalIFunc
    href: Ubiquity.NET.Llvm.Values.GlobalIFunc.html
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.TryGetNamedGlobalIFunc(System.String,Ubiquity.NET.Llvm.Values.GlobalIFunc@)
    name: TryGetNamedGlobalIFunc
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_TryGetNamedGlobalIFunc_System_String_Ubiquity_NET_Llvm_Values_GlobalIFunc__
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.GlobalIFunc
    name: GlobalIFunc
    href: Ubiquity.NET.Llvm.Values.GlobalIFunc.html
  - name: )
- uid: Ubiquity.NET.Llvm.Module.CreateFunction*
  commentId: Overload:Ubiquity.NET.Llvm.Module.CreateFunction
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_CreateFunction_System_String_Ubiquity_NET_Llvm_Types_IFunctionType_
  name: CreateFunction
  nameWithType: Module.CreateFunction
  fullName: Ubiquity.NET.Llvm.Module.CreateFunction
- uid: Ubiquity.NET.Llvm.IModule.CreateFunction(System.String,Ubiquity.NET.Llvm.Types.IFunctionType)
  commentId: M:Ubiquity.NET.Llvm.IModule.CreateFunction(System.String,Ubiquity.NET.Llvm.Types.IFunctionType)
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_CreateFunction_System_String_Ubiquity_NET_Llvm_Types_IFunctionType_
  name: CreateFunction(string, IFunctionType)
  nameWithType: IModule.CreateFunction(string, IFunctionType)
  fullName: Ubiquity.NET.Llvm.IModule.CreateFunction(string, Ubiquity.NET.Llvm.Types.IFunctionType)
  nameWithType.vb: IModule.CreateFunction(String, IFunctionType)
  fullName.vb: Ubiquity.NET.Llvm.IModule.CreateFunction(String, Ubiquity.NET.Llvm.Types.IFunctionType)
  name.vb: CreateFunction(String, IFunctionType)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.CreateFunction(System.String,Ubiquity.NET.Llvm.Types.IFunctionType)
    name: CreateFunction
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_CreateFunction_System_String_Ubiquity_NET_Llvm_Types_IFunctionType_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.IFunctionType
    name: IFunctionType
    href: Ubiquity.NET.Llvm.Types.IFunctionType.html
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.CreateFunction(System.String,Ubiquity.NET.Llvm.Types.IFunctionType)
    name: CreateFunction
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_CreateFunction_System_String_Ubiquity_NET_Llvm_Types_IFunctionType_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.IFunctionType
    name: IFunctionType
    href: Ubiquity.NET.Llvm.Types.IFunctionType.html
  - name: )
- uid: Ubiquity.NET.Llvm.Types.IFunctionType
  commentId: T:Ubiquity.NET.Llvm.Types.IFunctionType
  parent: Ubiquity.NET.Llvm.Types
  href: Ubiquity.NET.Llvm.Types.IFunctionType.html
  name: IFunctionType
  nameWithType: IFunctionType
  fullName: Ubiquity.NET.Llvm.Types.IFunctionType
- uid: Ubiquity.NET.Llvm.Module.WriteToFile*
  commentId: Overload:Ubiquity.NET.Llvm.Module.WriteToFile
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_WriteToFile_System_String_
  name: WriteToFile
  nameWithType: Module.WriteToFile
  fullName: Ubiquity.NET.Llvm.Module.WriteToFile
- uid: Ubiquity.NET.Llvm.IModule.WriteToFile(System.String)
  commentId: M:Ubiquity.NET.Llvm.IModule.WriteToFile(System.String)
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_WriteToFile_System_String_
  name: WriteToFile(string)
  nameWithType: IModule.WriteToFile(string)
  fullName: Ubiquity.NET.Llvm.IModule.WriteToFile(string)
  nameWithType.vb: IModule.WriteToFile(String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.WriteToFile(String)
  name.vb: WriteToFile(String)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.WriteToFile(System.String)
    name: WriteToFile
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_WriteToFile_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.WriteToFile(System.String)
    name: WriteToFile
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_WriteToFile_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Ubiquity.NET.Llvm.Module.WriteToTextFile*
  commentId: Overload:Ubiquity.NET.Llvm.Module.WriteToTextFile
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_WriteToTextFile_System_String_System_String__
  name: WriteToTextFile
  nameWithType: Module.WriteToTextFile
  fullName: Ubiquity.NET.Llvm.Module.WriteToTextFile
- uid: Ubiquity.NET.Llvm.IModule.WriteToTextFile(System.String,System.String@)
  commentId: M:Ubiquity.NET.Llvm.IModule.WriteToTextFile(System.String,System.String@)
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_WriteToTextFile_System_String_System_String__
  name: WriteToTextFile(string, out string)
  nameWithType: IModule.WriteToTextFile(string, out string)
  fullName: Ubiquity.NET.Llvm.IModule.WriteToTextFile(string, out string)
  nameWithType.vb: IModule.WriteToTextFile(String, String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.WriteToTextFile(String, String)
  name.vb: WriteToTextFile(String, String)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.WriteToTextFile(System.String,System.String@)
    name: WriteToTextFile
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_WriteToTextFile_System_String_System_String__
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.WriteToTextFile(System.String,System.String@)
    name: WriteToTextFile
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_WriteToTextFile_System_String_System_String__
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Ubiquity.NET.Llvm.Module.WriteToString*
  commentId: Overload:Ubiquity.NET.Llvm.Module.WriteToString
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_WriteToString
  name: WriteToString
  nameWithType: Module.WriteToString
  fullName: Ubiquity.NET.Llvm.Module.WriteToString
- uid: Ubiquity.NET.Llvm.IModule.WriteToString
  commentId: M:Ubiquity.NET.Llvm.IModule.WriteToString
  parent: Ubiquity.NET.Llvm.IModule
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_WriteToString
  name: WriteToString()
  nameWithType: IModule.WriteToString()
  fullName: Ubiquity.NET.Llvm.IModule.WriteToString()
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.WriteToString
    name: WriteToString
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_WriteToString
  - name: (
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.WriteToString
    name: WriteToString
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_WriteToString
  - name: (
  - name: )
- uid: Ubiquity.NET.Llvm.MemoryBuffer
  commentId: T:Ubiquity.NET.Llvm.MemoryBuffer
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.MemoryBuffer.html
  name: MemoryBuffer
  nameWithType: MemoryBuffer
  fullName: Ubiquity.NET.Llvm.MemoryBuffer
- uid: Ubiquity.NET.Llvm.Module.WriteToBuffer*
  commentId: Overload:Ubiquity.NET.Llvm.Module.WriteToBuffer
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_WriteToBuffer
  name: WriteToBuffer
  nameWithType: Module.WriteToBuffer
  fullName: Ubiquity.NET.Llvm.Module.WriteToBuffer
- uid: Ubiquity.NET.Llvm.IModule.WriteToBuffer
  commentId: M:Ubiquity.NET.Llvm.IModule.WriteToBuffer
  parent: Ubiquity.NET.Llvm.IModule
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_WriteToBuffer
  name: WriteToBuffer()
  nameWithType: IModule.WriteToBuffer()
  fullName: Ubiquity.NET.Llvm.IModule.WriteToBuffer()
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.WriteToBuffer
    name: WriteToBuffer
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_WriteToBuffer
  - name: (
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.WriteToBuffer
    name: WriteToBuffer
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_WriteToBuffer
  - name: (
  - name: )
- uid: Ubiquity.NET.Llvm.Values.GlobalAlias
  commentId: T:Ubiquity.NET.Llvm.Values.GlobalAlias
  parent: Ubiquity.NET.Llvm.Values
  href: Ubiquity.NET.Llvm.Values.GlobalAlias.html
  name: GlobalAlias
  nameWithType: GlobalAlias
  fullName: Ubiquity.NET.Llvm.Values.GlobalAlias
- uid: Ubiquity.NET.Llvm.Module.AddAlias*
  commentId: Overload:Ubiquity.NET.Llvm.Module.AddAlias
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_AddAlias_Ubiquity_NET_Llvm_Values_Value_System_String_System_UInt32_
  name: AddAlias
  nameWithType: Module.AddAlias
  fullName: Ubiquity.NET.Llvm.Module.AddAlias
- uid: Ubiquity.NET.Llvm.IModule.AddAlias(Ubiquity.NET.Llvm.Values.Value,System.String,System.UInt32)
  commentId: M:Ubiquity.NET.Llvm.IModule.AddAlias(Ubiquity.NET.Llvm.Values.Value,System.String,System.UInt32)
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddAlias_Ubiquity_NET_Llvm_Values_Value_System_String_System_UInt32_
  name: AddAlias(Value, string, uint)
  nameWithType: IModule.AddAlias(Value, string, uint)
  fullName: Ubiquity.NET.Llvm.IModule.AddAlias(Ubiquity.NET.Llvm.Values.Value, string, uint)
  nameWithType.vb: IModule.AddAlias(Value, String, UInteger)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AddAlias(Ubiquity.NET.Llvm.Values.Value, String, UInteger)
  name.vb: AddAlias(Value, String, UInteger)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.AddAlias(Ubiquity.NET.Llvm.Values.Value,System.String,System.UInt32)
    name: AddAlias
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddAlias_Ubiquity_NET_Llvm_Values_Value_System_String_System_UInt32_
  - name: (
  - uid: Ubiquity.NET.Llvm.Values.Value
    name: Value
    href: Ubiquity.NET.Llvm.Values.Value.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.UInt32
    name: uint
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.AddAlias(Ubiquity.NET.Llvm.Values.Value,System.String,System.UInt32)
    name: AddAlias
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddAlias_Ubiquity_NET_Llvm_Values_Value_System_String_System_UInt32_
  - name: (
  - uid: Ubiquity.NET.Llvm.Values.Value
    name: Value
    href: Ubiquity.NET.Llvm.Values.Value.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.UInt32
    name: UInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: )
- uid: Ubiquity.NET.Llvm.Values.Value
  commentId: T:Ubiquity.NET.Llvm.Values.Value
  parent: Ubiquity.NET.Llvm.Values
  href: Ubiquity.NET.Llvm.Values.Value.html
  name: Value
  nameWithType: Value
  fullName: Ubiquity.NET.Llvm.Values.Value
- uid: Ubiquity.NET.Llvm.Module.GetAlias*
  commentId: Overload:Ubiquity.NET.Llvm.Module.GetAlias
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_GetAlias_System_String_
  name: GetAlias
  nameWithType: Module.GetAlias
  fullName: Ubiquity.NET.Llvm.Module.GetAlias
- uid: Ubiquity.NET.Llvm.IModule.GetAlias(System.String)
  commentId: M:Ubiquity.NET.Llvm.IModule.GetAlias(System.String)
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_GetAlias_System_String_
  name: GetAlias(string)
  nameWithType: IModule.GetAlias(string)
  fullName: Ubiquity.NET.Llvm.IModule.GetAlias(string)
  nameWithType.vb: IModule.GetAlias(String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.GetAlias(String)
  name.vb: GetAlias(String)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.GetAlias(System.String)
    name: GetAlias
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_GetAlias_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.GetAlias(System.String)
    name: GetAlias
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_GetAlias_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Ubiquity.NET.Llvm.Values.GlobalVariable
  commentId: T:Ubiquity.NET.Llvm.Values.GlobalVariable
  parent: Ubiquity.NET.Llvm.Values
  href: Ubiquity.NET.Llvm.Values.GlobalVariable.html
  name: GlobalVariable
  nameWithType: GlobalVariable
  fullName: Ubiquity.NET.Llvm.Values.GlobalVariable
- uid: Ubiquity.NET.Llvm.Module.AddGlobalInAddressSpace*
  commentId: Overload:Ubiquity.NET.Llvm.Module.AddGlobalInAddressSpace
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_AddGlobalInAddressSpace_System_UInt32_Ubiquity_NET_Llvm_Types_ITypeRef_System_String_
  name: AddGlobalInAddressSpace
  nameWithType: Module.AddGlobalInAddressSpace
  fullName: Ubiquity.NET.Llvm.Module.AddGlobalInAddressSpace
- uid: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
  commentId: M:Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddGlobalInAddressSpace_System_UInt32_Ubiquity_NET_Llvm_Types_ITypeRef_System_String_
  name: AddGlobalInAddressSpace(uint, ITypeRef, string)
  nameWithType: IModule.AddGlobalInAddressSpace(uint, ITypeRef, string)
  fullName: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(uint, Ubiquity.NET.Llvm.Types.ITypeRef, string)
  nameWithType.vb: IModule.AddGlobalInAddressSpace(UInteger, ITypeRef, String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(UInteger, Ubiquity.NET.Llvm.Types.ITypeRef, String)
  name.vb: AddGlobalInAddressSpace(UInteger, ITypeRef, String)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
    name: AddGlobalInAddressSpace
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddGlobalInAddressSpace_System_UInt32_Ubiquity_NET_Llvm_Types_ITypeRef_System_String_
  - name: (
  - uid: System.UInt32
    name: uint
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
    name: AddGlobalInAddressSpace
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddGlobalInAddressSpace_System_UInt32_Ubiquity_NET_Llvm_Types_ITypeRef_System_String_
  - name: (
  - uid: System.UInt32
    name: UInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
  commentId: M:Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddGlobalInAddressSpace_System_UInt32_Ubiquity_NET_Llvm_Types_ITypeRef_System_Boolean_Ubiquity_NET_Llvm_Values_Linkage_Ubiquity_NET_Llvm_Values_Constant_
  name: AddGlobalInAddressSpace(uint, ITypeRef, bool, Linkage, Constant)
  nameWithType: IModule.AddGlobalInAddressSpace(uint, ITypeRef, bool, Linkage, Constant)
  fullName: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(uint, Ubiquity.NET.Llvm.Types.ITypeRef, bool, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant)
  nameWithType.vb: IModule.AddGlobalInAddressSpace(UInteger, ITypeRef, Boolean, Linkage, Constant)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(UInteger, Ubiquity.NET.Llvm.Types.ITypeRef, Boolean, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant)
  name.vb: AddGlobalInAddressSpace(UInteger, ITypeRef, Boolean, Linkage, Constant)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
    name: AddGlobalInAddressSpace
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddGlobalInAddressSpace_System_UInt32_Ubiquity_NET_Llvm_Types_ITypeRef_System_Boolean_Ubiquity_NET_Llvm_Values_Linkage_Ubiquity_NET_Llvm_Values_Constant_
  - name: (
  - uid: System.UInt32
    name: uint
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.Linkage
    name: Linkage
    href: Ubiquity.NET.Llvm.Values.Linkage.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.Constant
    name: Constant
    href: Ubiquity.NET.Llvm.Values.Constant.html
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
    name: AddGlobalInAddressSpace
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddGlobalInAddressSpace_System_UInt32_Ubiquity_NET_Llvm_Types_ITypeRef_System_Boolean_Ubiquity_NET_Llvm_Values_Linkage_Ubiquity_NET_Llvm_Values_Constant_
  - name: (
  - uid: System.UInt32
    name: UInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.Linkage
    name: Linkage
    href: Ubiquity.NET.Llvm.Values.Linkage.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.Constant
    name: Constant
    href: Ubiquity.NET.Llvm.Values.Constant.html
  - name: )
- uid: Ubiquity.NET.Llvm.Values.Linkage
  commentId: T:Ubiquity.NET.Llvm.Values.Linkage
  parent: Ubiquity.NET.Llvm.Values
  href: Ubiquity.NET.Llvm.Values.Linkage.html
  name: Linkage
  nameWithType: Linkage
  fullName: Ubiquity.NET.Llvm.Values.Linkage
- uid: Ubiquity.NET.Llvm.Values.Constant
  commentId: T:Ubiquity.NET.Llvm.Values.Constant
  parent: Ubiquity.NET.Llvm.Values
  href: Ubiquity.NET.Llvm.Values.Constant.html
  name: Constant
  nameWithType: Constant
  fullName: Ubiquity.NET.Llvm.Values.Constant
- uid: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
  commentId: M:Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddGlobalInAddressSpace_System_UInt32_Ubiquity_NET_Llvm_Types_ITypeRef_System_Boolean_Ubiquity_NET_Llvm_Values_Linkage_Ubiquity_NET_Llvm_Values_Constant_System_String_
  name: AddGlobalInAddressSpace(uint, ITypeRef, bool, Linkage, Constant, string)
  nameWithType: IModule.AddGlobalInAddressSpace(uint, ITypeRef, bool, Linkage, Constant, string)
  fullName: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(uint, Ubiquity.NET.Llvm.Types.ITypeRef, bool, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant, string)
  nameWithType.vb: IModule.AddGlobalInAddressSpace(UInteger, ITypeRef, Boolean, Linkage, Constant, String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(UInteger, Ubiquity.NET.Llvm.Types.ITypeRef, Boolean, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant, String)
  name.vb: AddGlobalInAddressSpace(UInteger, ITypeRef, Boolean, Linkage, Constant, String)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
    name: AddGlobalInAddressSpace
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddGlobalInAddressSpace_System_UInt32_Ubiquity_NET_Llvm_Types_ITypeRef_System_Boolean_Ubiquity_NET_Llvm_Values_Linkage_Ubiquity_NET_Llvm_Values_Constant_System_String_
  - name: (
  - uid: System.UInt32
    name: uint
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.Linkage
    name: Linkage
    href: Ubiquity.NET.Llvm.Values.Linkage.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.Constant
    name: Constant
    href: Ubiquity.NET.Llvm.Values.Constant.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
    name: AddGlobalInAddressSpace
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddGlobalInAddressSpace_System_UInt32_Ubiquity_NET_Llvm_Types_ITypeRef_System_Boolean_Ubiquity_NET_Llvm_Values_Linkage_Ubiquity_NET_Llvm_Values_Constant_System_String_
  - name: (
  - uid: System.UInt32
    name: UInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.Linkage
    name: Linkage
    href: Ubiquity.NET.Llvm.Values.Linkage.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.Constant
    name: Constant
    href: Ubiquity.NET.Llvm.Values.Constant.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Ubiquity.NET.Llvm.Module.AddGlobal*
  commentId: Overload:Ubiquity.NET.Llvm.Module.AddGlobal
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_AddGlobal_Ubiquity_NET_Llvm_Types_ITypeRef_System_String_
  name: AddGlobal
  nameWithType: Module.AddGlobal
  fullName: Ubiquity.NET.Llvm.Module.AddGlobal
- uid: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
  commentId: M:Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddGlobal_Ubiquity_NET_Llvm_Types_ITypeRef_System_String_
  name: AddGlobal(ITypeRef, string)
  nameWithType: IModule.AddGlobal(ITypeRef, string)
  fullName: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef, string)
  nameWithType.vb: IModule.AddGlobal(ITypeRef, String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef, String)
  name.vb: AddGlobal(ITypeRef, String)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
    name: AddGlobal
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddGlobal_Ubiquity_NET_Llvm_Types_ITypeRef_System_String_
  - name: (
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
    name: AddGlobal
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddGlobal_Ubiquity_NET_Llvm_Types_ITypeRef_System_String_
  - name: (
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
  commentId: M:Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddGlobal_Ubiquity_NET_Llvm_Types_ITypeRef_System_Boolean_Ubiquity_NET_Llvm_Values_Linkage_Ubiquity_NET_Llvm_Values_Constant_
  name: AddGlobal(ITypeRef, bool, Linkage, Constant)
  nameWithType: IModule.AddGlobal(ITypeRef, bool, Linkage, Constant)
  fullName: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef, bool, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant)
  nameWithType.vb: IModule.AddGlobal(ITypeRef, Boolean, Linkage, Constant)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef, Boolean, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant)
  name.vb: AddGlobal(ITypeRef, Boolean, Linkage, Constant)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
    name: AddGlobal
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddGlobal_Ubiquity_NET_Llvm_Types_ITypeRef_System_Boolean_Ubiquity_NET_Llvm_Values_Linkage_Ubiquity_NET_Llvm_Values_Constant_
  - name: (
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.Linkage
    name: Linkage
    href: Ubiquity.NET.Llvm.Values.Linkage.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.Constant
    name: Constant
    href: Ubiquity.NET.Llvm.Values.Constant.html
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
    name: AddGlobal
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddGlobal_Ubiquity_NET_Llvm_Types_ITypeRef_System_Boolean_Ubiquity_NET_Llvm_Values_Linkage_Ubiquity_NET_Llvm_Values_Constant_
  - name: (
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.Linkage
    name: Linkage
    href: Ubiquity.NET.Llvm.Values.Linkage.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.Constant
    name: Constant
    href: Ubiquity.NET.Llvm.Values.Constant.html
  - name: )
- uid: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
  commentId: M:Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddGlobal_Ubiquity_NET_Llvm_Types_ITypeRef_System_Boolean_Ubiquity_NET_Llvm_Values_Linkage_Ubiquity_NET_Llvm_Values_Constant_System_String_
  name: AddGlobal(ITypeRef, bool, Linkage, Constant, string)
  nameWithType: IModule.AddGlobal(ITypeRef, bool, Linkage, Constant, string)
  fullName: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef, bool, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant, string)
  nameWithType.vb: IModule.AddGlobal(ITypeRef, Boolean, Linkage, Constant, String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef, Boolean, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant, String)
  name.vb: AddGlobal(ITypeRef, Boolean, Linkage, Constant, String)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
    name: AddGlobal
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddGlobal_Ubiquity_NET_Llvm_Types_ITypeRef_System_Boolean_Ubiquity_NET_Llvm_Values_Linkage_Ubiquity_NET_Llvm_Values_Constant_System_String_
  - name: (
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.Linkage
    name: Linkage
    href: Ubiquity.NET.Llvm.Values.Linkage.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.Constant
    name: Constant
    href: Ubiquity.NET.Llvm.Values.Constant.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
    name: AddGlobal
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddGlobal_Ubiquity_NET_Llvm_Types_ITypeRef_System_Boolean_Ubiquity_NET_Llvm_Values_Linkage_Ubiquity_NET_Llvm_Values_Constant_System_String_
  - name: (
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.Linkage
    name: Linkage
    href: Ubiquity.NET.Llvm.Values.Linkage.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.Constant
    name: Constant
    href: Ubiquity.NET.Llvm.Values.Constant.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Ubiquity.NET.Llvm.Module.GetTypeByName*
  commentId: Overload:Ubiquity.NET.Llvm.Module.GetTypeByName
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_GetTypeByName_System_String_
  name: GetTypeByName
  nameWithType: Module.GetTypeByName
  fullName: Ubiquity.NET.Llvm.Module.GetTypeByName
- uid: Ubiquity.NET.Llvm.IModule.GetTypeByName(System.String)
  commentId: M:Ubiquity.NET.Llvm.IModule.GetTypeByName(System.String)
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_GetTypeByName_System_String_
  name: GetTypeByName(string)
  nameWithType: IModule.GetTypeByName(string)
  fullName: Ubiquity.NET.Llvm.IModule.GetTypeByName(string)
  nameWithType.vb: IModule.GetTypeByName(String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.GetTypeByName(String)
  name.vb: GetTypeByName(String)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.GetTypeByName(System.String)
    name: GetTypeByName
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_GetTypeByName_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.GetTypeByName(System.String)
    name: GetTypeByName
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_GetTypeByName_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Ubiquity.NET.Llvm.Module.GetNamedGlobal*
  commentId: Overload:Ubiquity.NET.Llvm.Module.GetNamedGlobal
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_GetNamedGlobal_System_String_
  name: GetNamedGlobal
  nameWithType: Module.GetNamedGlobal
  fullName: Ubiquity.NET.Llvm.Module.GetNamedGlobal
- uid: Ubiquity.NET.Llvm.IModule.GetNamedGlobal(System.String)
  commentId: M:Ubiquity.NET.Llvm.IModule.GetNamedGlobal(System.String)
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_GetNamedGlobal_System_String_
  name: GetNamedGlobal(string)
  nameWithType: IModule.GetNamedGlobal(string)
  fullName: Ubiquity.NET.Llvm.IModule.GetNamedGlobal(string)
  nameWithType.vb: IModule.GetNamedGlobal(String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.GetNamedGlobal(String)
  name.vb: GetNamedGlobal(String)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.GetNamedGlobal(System.String)
    name: GetNamedGlobal
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_GetNamedGlobal_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.GetNamedGlobal(System.String)
    name: GetNamedGlobal
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_GetNamedGlobal_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Ubiquity.NET.Llvm.Module.AddModuleFlag*
  commentId: Overload:Ubiquity.NET.Llvm.Module.AddModuleFlag
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_AddModuleFlag_Ubiquity_NET_Llvm_ModuleFlagBehavior_System_String_System_UInt32_
  name: AddModuleFlag
  nameWithType: Module.AddModuleFlag
  fullName: Ubiquity.NET.Llvm.Module.AddModuleFlag
- uid: Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,System.UInt32)
  commentId: M:Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,System.UInt32)
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddModuleFlag_Ubiquity_NET_Llvm_ModuleFlagBehavior_System_String_System_UInt32_
  name: AddModuleFlag(ModuleFlagBehavior, string, uint)
  nameWithType: IModule.AddModuleFlag(ModuleFlagBehavior, string, uint)
  fullName: Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior, string, uint)
  nameWithType.vb: IModule.AddModuleFlag(ModuleFlagBehavior, String, UInteger)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior, String, UInteger)
  name.vb: AddModuleFlag(ModuleFlagBehavior, String, UInteger)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,System.UInt32)
    name: AddModuleFlag
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddModuleFlag_Ubiquity_NET_Llvm_ModuleFlagBehavior_System_String_System_UInt32_
  - name: (
  - uid: Ubiquity.NET.Llvm.ModuleFlagBehavior
    name: ModuleFlagBehavior
    href: Ubiquity.NET.Llvm.ModuleFlagBehavior.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.UInt32
    name: uint
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,System.UInt32)
    name: AddModuleFlag
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddModuleFlag_Ubiquity_NET_Llvm_ModuleFlagBehavior_System_String_System_UInt32_
  - name: (
  - uid: Ubiquity.NET.Llvm.ModuleFlagBehavior
    name: ModuleFlagBehavior
    href: Ubiquity.NET.Llvm.ModuleFlagBehavior.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.UInt32
    name: UInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: )
- uid: Ubiquity.NET.Llvm.ModuleFlagBehavior
  commentId: T:Ubiquity.NET.Llvm.ModuleFlagBehavior
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.ModuleFlagBehavior.html
  name: ModuleFlagBehavior
  nameWithType: ModuleFlagBehavior
  fullName: Ubiquity.NET.Llvm.ModuleFlagBehavior
- uid: Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
  commentId: M:Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddModuleFlag_Ubiquity_NET_Llvm_ModuleFlagBehavior_System_String_Ubiquity_NET_Llvm_Metadata_IrMetadata_
  name: AddModuleFlag(ModuleFlagBehavior, string, IrMetadata)
  nameWithType: IModule.AddModuleFlag(ModuleFlagBehavior, string, IrMetadata)
  fullName: Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior, string, Ubiquity.NET.Llvm.Metadata.IrMetadata)
  nameWithType.vb: IModule.AddModuleFlag(ModuleFlagBehavior, String, IrMetadata)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior, String, Ubiquity.NET.Llvm.Metadata.IrMetadata)
  name.vb: AddModuleFlag(ModuleFlagBehavior, String, IrMetadata)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
    name: AddModuleFlag
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddModuleFlag_Ubiquity_NET_Llvm_ModuleFlagBehavior_System_String_Ubiquity_NET_Llvm_Metadata_IrMetadata_
  - name: (
  - uid: Ubiquity.NET.Llvm.ModuleFlagBehavior
    name: ModuleFlagBehavior
    href: Ubiquity.NET.Llvm.ModuleFlagBehavior.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Metadata.IrMetadata
    name: IrMetadata
    href: Ubiquity.NET.Llvm.Metadata.IrMetadata.html
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
    name: AddModuleFlag
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddModuleFlag_Ubiquity_NET_Llvm_ModuleFlagBehavior_System_String_Ubiquity_NET_Llvm_Metadata_IrMetadata_
  - name: (
  - uid: Ubiquity.NET.Llvm.ModuleFlagBehavior
    name: ModuleFlagBehavior
    href: Ubiquity.NET.Llvm.ModuleFlagBehavior.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Metadata.IrMetadata
    name: IrMetadata
    href: Ubiquity.NET.Llvm.Metadata.IrMetadata.html
  - name: )
- uid: Ubiquity.NET.Llvm.Metadata.IrMetadata
  commentId: T:Ubiquity.NET.Llvm.Metadata.IrMetadata
  parent: Ubiquity.NET.Llvm.Metadata
  href: Ubiquity.NET.Llvm.Metadata.IrMetadata.html
  name: IrMetadata
  nameWithType: IrMetadata
  fullName: Ubiquity.NET.Llvm.Metadata.IrMetadata
- uid: Ubiquity.NET.Llvm.Metadata
  commentId: N:Ubiquity.NET.Llvm.Metadata
  href: Ubiquity.html
  name: Ubiquity.NET.Llvm.Metadata
  nameWithType: Ubiquity.NET.Llvm.Metadata
  fullName: Ubiquity.NET.Llvm.Metadata
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.Metadata
    name: Metadata
    href: Ubiquity.NET.Llvm.Metadata.html
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.Metadata
    name: Metadata
    href: Ubiquity.NET.Llvm.Metadata.html
- uid: Ubiquity.NET.Llvm.Module.AddNamedMetadataOperand*
  commentId: Overload:Ubiquity.NET.Llvm.Module.AddNamedMetadataOperand
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_AddNamedMetadataOperand_System_String_Ubiquity_NET_Llvm_Metadata_IrMetadata_
  name: AddNamedMetadataOperand
  nameWithType: Module.AddNamedMetadataOperand
  fullName: Ubiquity.NET.Llvm.Module.AddNamedMetadataOperand
- uid: Ubiquity.NET.Llvm.IModule.AddNamedMetadataOperand(System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
  commentId: M:Ubiquity.NET.Llvm.IModule.AddNamedMetadataOperand(System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddNamedMetadataOperand_System_String_Ubiquity_NET_Llvm_Metadata_IrMetadata_
  name: AddNamedMetadataOperand(string, IrMetadata)
  nameWithType: IModule.AddNamedMetadataOperand(string, IrMetadata)
  fullName: Ubiquity.NET.Llvm.IModule.AddNamedMetadataOperand(string, Ubiquity.NET.Llvm.Metadata.IrMetadata)
  nameWithType.vb: IModule.AddNamedMetadataOperand(String, IrMetadata)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AddNamedMetadataOperand(String, Ubiquity.NET.Llvm.Metadata.IrMetadata)
  name.vb: AddNamedMetadataOperand(String, IrMetadata)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.AddNamedMetadataOperand(System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
    name: AddNamedMetadataOperand
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddNamedMetadataOperand_System_String_Ubiquity_NET_Llvm_Metadata_IrMetadata_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Metadata.IrMetadata
    name: IrMetadata
    href: Ubiquity.NET.Llvm.Metadata.IrMetadata.html
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.AddNamedMetadataOperand(System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
    name: AddNamedMetadataOperand
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddNamedMetadataOperand_System_String_Ubiquity_NET_Llvm_Metadata_IrMetadata_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Metadata.IrMetadata
    name: IrMetadata
    href: Ubiquity.NET.Llvm.Metadata.IrMetadata.html
  - name: )
- uid: Ubiquity.NET.Llvm.Module.AddVersionIdentMetadata*
  commentId: Overload:Ubiquity.NET.Llvm.Module.AddVersionIdentMetadata
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_AddVersionIdentMetadata_System_String_
  name: AddVersionIdentMetadata
  nameWithType: Module.AddVersionIdentMetadata
  fullName: Ubiquity.NET.Llvm.Module.AddVersionIdentMetadata
- uid: Ubiquity.NET.Llvm.IModule.AddVersionIdentMetadata(System.String)
  commentId: M:Ubiquity.NET.Llvm.IModule.AddVersionIdentMetadata(System.String)
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddVersionIdentMetadata_System_String_
  name: AddVersionIdentMetadata(string)
  nameWithType: IModule.AddVersionIdentMetadata(string)
  fullName: Ubiquity.NET.Llvm.IModule.AddVersionIdentMetadata(string)
  nameWithType.vb: IModule.AddVersionIdentMetadata(String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AddVersionIdentMetadata(String)
  name.vb: AddVersionIdentMetadata(String)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.AddVersionIdentMetadata(System.String)
    name: AddVersionIdentMetadata
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddVersionIdentMetadata_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.AddVersionIdentMetadata(System.String)
    name: AddVersionIdentMetadata
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddVersionIdentMetadata_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,Ubiquity.NET.Llvm.DebugInfo.DIScope,System.String,System.String,Ubiquity.NET.Llvm.DebugInfo.DIFile,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType,System.Boolean,System.Boolean,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags,System.Boolean)
  commentId: M:Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,Ubiquity.NET.Llvm.DebugInfo.DIScope,System.String,System.String,Ubiquity.NET.Llvm.DebugInfo.DIFile,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType,System.Boolean,System.Boolean,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags,System.Boolean)
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_CreateFunction_Ubiquity_NET_Llvm_DebugInfo_DIBuilder__Ubiquity_NET_Llvm_DebugInfo_DIScope_System_String_System_String_Ubiquity_NET_Llvm_DebugInfo_DIFile_System_UInt32_Ubiquity_NET_Llvm_DebugInfo_DebugFunctionType_System_Boolean_System_Boolean_System_UInt32_Ubiquity_NET_Llvm_DebugInfo_DebugInfoFlags_System_Boolean_
  name: CreateFunction(ref readonly DIBuilder, DIScope, string, string, DIFile, uint, DebugFunctionType, bool, bool, uint, DebugInfoFlags, bool)
  nameWithType: IModule.CreateFunction(ref readonly DIBuilder, DIScope, string, string, DIFile, uint, DebugFunctionType, bool, bool, uint, DebugInfoFlags, bool)
  fullName: Ubiquity.NET.Llvm.IModule.CreateFunction(ref readonly Ubiquity.NET.Llvm.DebugInfo.DIBuilder, Ubiquity.NET.Llvm.DebugInfo.DIScope, string, string, Ubiquity.NET.Llvm.DebugInfo.DIFile, uint, Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType, bool, bool, uint, Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags, bool)
  nameWithType.vb: IModule.CreateFunction(DIBuilder, DIScope, String, String, DIFile, UInteger, DebugFunctionType, Boolean, Boolean, UInteger, DebugInfoFlags, Boolean)
  fullName.vb: Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder, Ubiquity.NET.Llvm.DebugInfo.DIScope, String, String, Ubiquity.NET.Llvm.DebugInfo.DIFile, UInteger, Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType, Boolean, Boolean, UInteger, Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags, Boolean)
  name.vb: CreateFunction(DIBuilder, DIScope, String, String, DIFile, UInteger, DebugFunctionType, Boolean, Boolean, UInteger, DebugInfoFlags, Boolean)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,Ubiquity.NET.Llvm.DebugInfo.DIScope,System.String,System.String,Ubiquity.NET.Llvm.DebugInfo.DIFile,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType,System.Boolean,System.Boolean,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags,System.Boolean)
    name: CreateFunction
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_CreateFunction_Ubiquity_NET_Llvm_DebugInfo_DIBuilder__Ubiquity_NET_Llvm_DebugInfo_DIScope_System_String_System_String_Ubiquity_NET_Llvm_DebugInfo_DIFile_System_UInt32_Ubiquity_NET_Llvm_DebugInfo_DebugFunctionType_System_Boolean_System_Boolean_System_UInt32_Ubiquity_NET_Llvm_DebugInfo_DebugInfoFlags_System_Boolean_
  - name: (
  - name: ref
  - name: " "
  - name: readonly
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIBuilder
    name: DIBuilder
    href: Ubiquity.NET.Llvm.DebugInfo.DIBuilder.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIScope
    name: DIScope
    href: Ubiquity.NET.Llvm.DebugInfo.DIScope.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIFile
    name: DIFile
    href: Ubiquity.NET.Llvm.DebugInfo.DIFile.html
  - name: ','
  - name: " "
  - uid: System.UInt32
    name: uint
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType
    name: DebugFunctionType
    href: Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.UInt32
    name: uint
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags
    name: DebugInfoFlags
    href: Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,Ubiquity.NET.Llvm.DebugInfo.DIScope,System.String,System.String,Ubiquity.NET.Llvm.DebugInfo.DIFile,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType,System.Boolean,System.Boolean,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags,System.Boolean)
    name: CreateFunction
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_CreateFunction_Ubiquity_NET_Llvm_DebugInfo_DIBuilder__Ubiquity_NET_Llvm_DebugInfo_DIScope_System_String_System_String_Ubiquity_NET_Llvm_DebugInfo_DIFile_System_UInt32_Ubiquity_NET_Llvm_DebugInfo_DebugFunctionType_System_Boolean_System_Boolean_System_UInt32_Ubiquity_NET_Llvm_DebugInfo_DebugInfoFlags_System_Boolean_
  - name: (
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIBuilder
    name: DIBuilder
    href: Ubiquity.NET.Llvm.DebugInfo.DIBuilder.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIScope
    name: DIScope
    href: Ubiquity.NET.Llvm.DebugInfo.DIScope.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIFile
    name: DIFile
    href: Ubiquity.NET.Llvm.DebugInfo.DIFile.html
  - name: ','
  - name: " "
  - uid: System.UInt32
    name: UInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType
    name: DebugFunctionType
    href: Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.UInt32
    name: UInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags
    name: DebugInfoFlags
    href: Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Ubiquity.NET.Llvm.DebugInfo.DIBuilder
  commentId: T:Ubiquity.NET.Llvm.DebugInfo.DIBuilder
  parent: Ubiquity.NET.Llvm.DebugInfo
  href: Ubiquity.NET.Llvm.DebugInfo.DIBuilder.html
  name: DIBuilder
  nameWithType: DIBuilder
  fullName: Ubiquity.NET.Llvm.DebugInfo.DIBuilder
- uid: Ubiquity.NET.Llvm.DebugInfo.DIScope
  commentId: T:Ubiquity.NET.Llvm.DebugInfo.DIScope
  parent: Ubiquity.NET.Llvm.DebugInfo
  href: Ubiquity.NET.Llvm.DebugInfo.DIScope.html
  name: DIScope
  nameWithType: DIScope
  fullName: Ubiquity.NET.Llvm.DebugInfo.DIScope
- uid: Ubiquity.NET.Llvm.DebugInfo.DIFile
  commentId: T:Ubiquity.NET.Llvm.DebugInfo.DIFile
  parent: Ubiquity.NET.Llvm.DebugInfo
  href: Ubiquity.NET.Llvm.DebugInfo.DIFile.html
  name: DIFile
  nameWithType: DIFile
  fullName: Ubiquity.NET.Llvm.DebugInfo.DIFile
- uid: Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType
  commentId: T:Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType
  parent: Ubiquity.NET.Llvm.DebugInfo
  href: Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType.html
  name: DebugFunctionType
  nameWithType: DebugFunctionType
  fullName: Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType
- uid: Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags
  commentId: T:Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags
  parent: Ubiquity.NET.Llvm.DebugInfo
  href: Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags.html
  name: DebugInfoFlags
  nameWithType: DebugInfoFlags
  fullName: Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags
- uid: Ubiquity.NET.Llvm.DebugInfo
  commentId: N:Ubiquity.NET.Llvm.DebugInfo
  href: Ubiquity.html
  name: Ubiquity.NET.Llvm.DebugInfo
  nameWithType: Ubiquity.NET.Llvm.DebugInfo
  fullName: Ubiquity.NET.Llvm.DebugInfo
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.DebugInfo
    name: DebugInfo
    href: Ubiquity.NET.Llvm.DebugInfo.html
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.DebugInfo
    name: DebugInfo
    href: Ubiquity.NET.Llvm.DebugInfo.html
- uid: Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}})
  commentId: M:Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}})
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_CreateFunction_Ubiquity_NET_Llvm_DebugInfo_DIBuilder__System_String_System_Boolean_Ubiquity_NET_Llvm_DebugInfo_IDebugType_Ubiquity_NET_Llvm_Types_ITypeRef_Ubiquity_NET_Llvm_DebugInfo_DIType__System_Collections_Generic_IEnumerable_Ubiquity_NET_Llvm_DebugInfo_IDebugType_Ubiquity_NET_Llvm_Types_ITypeRef_Ubiquity_NET_Llvm_DebugInfo_DIType___
  name: CreateFunction(ref readonly DIBuilder, string, bool, IDebugType<ITypeRef, DIType>, IEnumerable<IDebugType<ITypeRef, DIType>>)
  nameWithType: IModule.CreateFunction(ref readonly DIBuilder, string, bool, IDebugType<ITypeRef, DIType>, IEnumerable<IDebugType<ITypeRef, DIType>>)
  fullName: Ubiquity.NET.Llvm.IModule.CreateFunction(ref readonly Ubiquity.NET.Llvm.DebugInfo.DIBuilder, string, bool, Ubiquity.NET.Llvm.DebugInfo.IDebugType<Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType>, System.Collections.Generic.IEnumerable<Ubiquity.NET.Llvm.DebugInfo.IDebugType<Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType>>)
  nameWithType.vb: IModule.CreateFunction(DIBuilder, String, Boolean, IDebugType(Of ITypeRef, DIType), IEnumerable(Of IDebugType(Of ITypeRef, DIType)))
  fullName.vb: Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder, String, Boolean, Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType), System.Collections.Generic.IEnumerable(Of Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType)))
  name.vb: CreateFunction(DIBuilder, String, Boolean, IDebugType(Of ITypeRef, DIType), IEnumerable(Of IDebugType(Of ITypeRef, DIType)))
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}})
    name: CreateFunction
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_CreateFunction_Ubiquity_NET_Llvm_DebugInfo_DIBuilder__System_String_System_Boolean_Ubiquity_NET_Llvm_DebugInfo_IDebugType_Ubiquity_NET_Llvm_Types_ITypeRef_Ubiquity_NET_Llvm_DebugInfo_DIType__System_Collections_Generic_IEnumerable_Ubiquity_NET_Llvm_DebugInfo_IDebugType_Ubiquity_NET_Llvm_Types_ITypeRef_Ubiquity_NET_Llvm_DebugInfo_DIType___
  - name: (
  - name: ref
  - name: " "
  - name: readonly
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIBuilder
    name: DIBuilder
    href: Ubiquity.NET.Llvm.DebugInfo.DIBuilder.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: <
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIType
    name: DIType
    href: Ubiquity.NET.Llvm.DebugInfo.DIType.html
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: <
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIType
    name: DIType
    href: Ubiquity.NET.Llvm.DebugInfo.DIType.html
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}})
    name: CreateFunction
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_CreateFunction_Ubiquity_NET_Llvm_DebugInfo_DIBuilder__System_String_System_Boolean_Ubiquity_NET_Llvm_DebugInfo_IDebugType_Ubiquity_NET_Llvm_Types_ITypeRef_Ubiquity_NET_Llvm_DebugInfo_DIType__System_Collections_Generic_IEnumerable_Ubiquity_NET_Llvm_DebugInfo_IDebugType_Ubiquity_NET_Llvm_Types_ITypeRef_Ubiquity_NET_Llvm_DebugInfo_DIType___
  - name: (
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIBuilder
    name: DIBuilder
    href: Ubiquity.NET.Llvm.DebugInfo.DIBuilder.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIType
    name: DIType
    href: Ubiquity.NET.Llvm.DebugInfo.DIType.html
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIType
    name: DIType
    href: Ubiquity.NET.Llvm.DebugInfo.DIType.html
  - name: )
  - name: )
  - name: )
- uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}
  commentId: T:Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}
  parent: Ubiquity.NET.Llvm.DebugInfo
  definition: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
  href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  name: IDebugType<ITypeRef, DIType>
  nameWithType: IDebugType<ITypeRef, DIType>
  fullName: Ubiquity.NET.Llvm.DebugInfo.IDebugType<Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType>
  nameWithType.vb: IDebugType(Of ITypeRef, DIType)
  fullName.vb: Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType)
  name.vb: IDebugType(Of ITypeRef, DIType)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: <
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIType
    name: DIType
    href: Ubiquity.NET.Llvm.DebugInfo.DIType.html
  - name: '>'
  spec.vb:
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIType
    name: DIType
    href: Ubiquity.NET.Llvm.DebugInfo.DIType.html
  - name: )
- uid: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}}
  commentId: T:System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<IDebugType<ITypeRef, DIType>>
  nameWithType: IEnumerable<IDebugType<ITypeRef, DIType>>
  fullName: System.Collections.Generic.IEnumerable<Ubiquity.NET.Llvm.DebugInfo.IDebugType<Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType>>
  nameWithType.vb: IEnumerable(Of IDebugType(Of ITypeRef, DIType))
  fullName.vb: System.Collections.Generic.IEnumerable(Of Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType))
  name.vb: IEnumerable(Of IDebugType(Of ITypeRef, DIType))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: <
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIType
    name: DIType
    href: Ubiquity.NET.Llvm.DebugInfo.DIType.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIType
    name: DIType
    href: Ubiquity.NET.Llvm.DebugInfo.DIType.html
  - name: )
  - name: )
- uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
  commentId: T:Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
  href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  name: IDebugType<TNative, TDebug>
  nameWithType: IDebugType<TNative, TDebug>
  fullName: Ubiquity.NET.Llvm.DebugInfo.IDebugType<TNative, TDebug>
  nameWithType.vb: IDebugType(Of TNative, TDebug)
  fullName.vb: Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of TNative, TDebug)
  name.vb: IDebugType(Of TNative, TDebug)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: <
  - name: TNative
  - name: ','
  - name: " "
  - name: TDebug
  - name: '>'
  spec.vb:
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TNative
  - name: ','
  - name: " "
  - name: TDebug
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}[])
  commentId: M:Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}[])
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_CreateFunction_Ubiquity_NET_Llvm_DebugInfo_DIBuilder__System_String_System_Boolean_Ubiquity_NET_Llvm_DebugInfo_IDebugType_Ubiquity_NET_Llvm_Types_ITypeRef_Ubiquity_NET_Llvm_DebugInfo_DIType__Ubiquity_NET_Llvm_DebugInfo_IDebugType_Ubiquity_NET_Llvm_Types_ITypeRef_Ubiquity_NET_Llvm_DebugInfo_DIType____
  name: CreateFunction(ref readonly DIBuilder, string, bool, IDebugType<ITypeRef, DIType>, params IDebugType<ITypeRef, DIType>[])
  nameWithType: IModule.CreateFunction(ref readonly DIBuilder, string, bool, IDebugType<ITypeRef, DIType>, params IDebugType<ITypeRef, DIType>[])
  fullName: Ubiquity.NET.Llvm.IModule.CreateFunction(ref readonly Ubiquity.NET.Llvm.DebugInfo.DIBuilder, string, bool, Ubiquity.NET.Llvm.DebugInfo.IDebugType<Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType>, params Ubiquity.NET.Llvm.DebugInfo.IDebugType<Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType>[])
  nameWithType.vb: IModule.CreateFunction(DIBuilder, String, Boolean, IDebugType(Of ITypeRef, DIType), ParamArray IDebugType(Of ITypeRef, DIType)())
  fullName.vb: Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder, String, Boolean, Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType), ParamArray Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType)())
  name.vb: CreateFunction(DIBuilder, String, Boolean, IDebugType(Of ITypeRef, DIType), ParamArray IDebugType(Of ITypeRef, DIType)())
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}[])
    name: CreateFunction
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_CreateFunction_Ubiquity_NET_Llvm_DebugInfo_DIBuilder__System_String_System_Boolean_Ubiquity_NET_Llvm_DebugInfo_IDebugType_Ubiquity_NET_Llvm_Types_ITypeRef_Ubiquity_NET_Llvm_DebugInfo_DIType__Ubiquity_NET_Llvm_DebugInfo_IDebugType_Ubiquity_NET_Llvm_Types_ITypeRef_Ubiquity_NET_Llvm_DebugInfo_DIType____
  - name: (
  - name: ref
  - name: " "
  - name: readonly
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIBuilder
    name: DIBuilder
    href: Ubiquity.NET.Llvm.DebugInfo.DIBuilder.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: <
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIType
    name: DIType
    href: Ubiquity.NET.Llvm.DebugInfo.DIType.html
  - name: '>'
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: <
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIType
    name: DIType
    href: Ubiquity.NET.Llvm.DebugInfo.DIType.html
  - name: '>'
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}[])
    name: CreateFunction
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_CreateFunction_Ubiquity_NET_Llvm_DebugInfo_DIBuilder__System_String_System_Boolean_Ubiquity_NET_Llvm_DebugInfo_IDebugType_Ubiquity_NET_Llvm_Types_ITypeRef_Ubiquity_NET_Llvm_DebugInfo_DIType__Ubiquity_NET_Llvm_DebugInfo_IDebugType_Ubiquity_NET_Llvm_Types_ITypeRef_Ubiquity_NET_Llvm_DebugInfo_DIType____
  - name: (
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIBuilder
    name: DIBuilder
    href: Ubiquity.NET.Llvm.DebugInfo.DIBuilder.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIType
    name: DIType
    href: Ubiquity.NET.Llvm.DebugInfo.DIType.html
  - name: )
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIType
    name: DIType
    href: Ubiquity.NET.Llvm.DebugInfo.DIType.html
  - name: )
  - name: (
  - name: )
  - name: )
- uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}[]
  isExternal: true
  href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  name: IDebugType<ITypeRef, DIType>[]
  nameWithType: IDebugType<ITypeRef, DIType>[]
  fullName: Ubiquity.NET.Llvm.DebugInfo.IDebugType<Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType>[]
  nameWithType.vb: IDebugType(Of ITypeRef, DIType)()
  fullName.vb: Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType)()
  name.vb: IDebugType(Of ITypeRef, DIType)()
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: <
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIType
    name: DIType
    href: Ubiquity.NET.Llvm.DebugInfo.DIType.html
  - name: '>'
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIType
    name: DIType
    href: Ubiquity.NET.Llvm.DebugInfo.DIType.html
  - name: )
  - name: (
  - name: )
- uid: Ubiquity.NET.Llvm.Module.GetIntrinsicDeclaration*
  commentId: Overload:Ubiquity.NET.Llvm.Module.GetIntrinsicDeclaration
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_GetIntrinsicDeclaration_System_String_Ubiquity_NET_Llvm_Types_ITypeRef___
  name: GetIntrinsicDeclaration
  nameWithType: Module.GetIntrinsicDeclaration
  fullName: Ubiquity.NET.Llvm.Module.GetIntrinsicDeclaration
- uid: Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(System.String,Ubiquity.NET.Llvm.Types.ITypeRef[])
  commentId: M:Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(System.String,Ubiquity.NET.Llvm.Types.ITypeRef[])
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_GetIntrinsicDeclaration_System_String_Ubiquity_NET_Llvm_Types_ITypeRef___
  name: GetIntrinsicDeclaration(string, params ITypeRef[])
  nameWithType: IModule.GetIntrinsicDeclaration(string, params ITypeRef[])
  fullName: Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(string, params Ubiquity.NET.Llvm.Types.ITypeRef[])
  nameWithType.vb: IModule.GetIntrinsicDeclaration(String, ParamArray ITypeRef())
  fullName.vb: Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(String, ParamArray Ubiquity.NET.Llvm.Types.ITypeRef())
  name.vb: GetIntrinsicDeclaration(String, ParamArray ITypeRef())
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(System.String,Ubiquity.NET.Llvm.Types.ITypeRef[])
    name: GetIntrinsicDeclaration
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_GetIntrinsicDeclaration_System_String_Ubiquity_NET_Llvm_Types_ITypeRef___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(System.String,Ubiquity.NET.Llvm.Types.ITypeRef[])
    name: GetIntrinsicDeclaration
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_GetIntrinsicDeclaration_System_String_Ubiquity_NET_Llvm_Types_ITypeRef___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: (
  - name: )
  - name: )
- uid: Ubiquity.NET.Llvm.Types.ITypeRef[]
  isExternal: true
  href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  name: ITypeRef[]
  nameWithType: ITypeRef[]
  fullName: Ubiquity.NET.Llvm.Types.ITypeRef[]
  nameWithType.vb: ITypeRef()
  fullName.vb: Ubiquity.NET.Llvm.Types.ITypeRef()
  name.vb: ITypeRef()
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: (
  - name: )
- uid: Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef[])
  commentId: M:Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef[])
  parent: Ubiquity.NET.Llvm.IModule
  isExternal: true
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_GetIntrinsicDeclaration_System_UInt32_Ubiquity_NET_Llvm_Types_ITypeRef___
  name: GetIntrinsicDeclaration(uint, params ITypeRef[])
  nameWithType: IModule.GetIntrinsicDeclaration(uint, params ITypeRef[])
  fullName: Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(uint, params Ubiquity.NET.Llvm.Types.ITypeRef[])
  nameWithType.vb: IModule.GetIntrinsicDeclaration(UInteger, ParamArray ITypeRef())
  fullName.vb: Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(UInteger, ParamArray Ubiquity.NET.Llvm.Types.ITypeRef())
  name.vb: GetIntrinsicDeclaration(UInteger, ParamArray ITypeRef())
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef[])
    name: GetIntrinsicDeclaration
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_GetIntrinsicDeclaration_System_UInt32_Ubiquity_NET_Llvm_Types_ITypeRef___
  - name: (
  - uid: System.UInt32
    name: uint
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef[])
    name: GetIntrinsicDeclaration
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_GetIntrinsicDeclaration_System_UInt32_Ubiquity_NET_Llvm_Types_ITypeRef___
  - name: (
  - uid: System.UInt32
    name: UInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: (
  - name: )
  - name: )
- uid: Ubiquity.NET.Llvm.Module.Clone*
  commentId: Overload:Ubiquity.NET.Llvm.Module.Clone
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_Clone
  name: Clone
  nameWithType: Module.Clone
  fullName: Ubiquity.NET.Llvm.Module.Clone
- uid: Ubiquity.NET.Llvm.IModule.Clone
  commentId: M:Ubiquity.NET.Llvm.IModule.Clone
  parent: Ubiquity.NET.Llvm.IModule
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Clone
  name: Clone()
  nameWithType: IModule.Clone()
  fullName: Ubiquity.NET.Llvm.IModule.Clone()
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.Clone
    name: Clone
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Clone
  - name: (
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.Clone
    name: Clone
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Clone
  - name: (
  - name: )
- uid: Ubiquity.NET.Llvm.IContext
  commentId: T:Ubiquity.NET.Llvm.IContext
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.IContext.html
  name: IContext
  nameWithType: IContext
  fullName: Ubiquity.NET.Llvm.IContext
- uid: Ubiquity.NET.Llvm.IModule.Clone(Ubiquity.NET.Llvm.IContext)
  commentId: M:Ubiquity.NET.Llvm.IModule.Clone(Ubiquity.NET.Llvm.IContext)
  parent: Ubiquity.NET.Llvm.IModule
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Clone_Ubiquity_NET_Llvm_IContext_
  name: Clone(IContext)
  nameWithType: IModule.Clone(IContext)
  fullName: Ubiquity.NET.Llvm.IModule.Clone(Ubiquity.NET.Llvm.IContext)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IModule.Clone(Ubiquity.NET.Llvm.IContext)
    name: Clone
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Clone_Ubiquity_NET_Llvm_IContext_
  - name: (
  - uid: Ubiquity.NET.Llvm.IContext
    name: IContext
    href: Ubiquity.NET.Llvm.IContext.html
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IModule.Clone(Ubiquity.NET.Llvm.IContext)
    name: Clone
    href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Clone_Ubiquity_NET_Llvm_IContext_
  - name: (
  - uid: Ubiquity.NET.Llvm.IContext
    name: IContext
    href: Ubiquity.NET.Llvm.IContext.html
  - name: )
- uid: Ubiquity.NET.Llvm.Module.SourceFileName*
  commentId: Overload:Ubiquity.NET.Llvm.Module.SourceFileName
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_SourceFileName
  name: SourceFileName
  nameWithType: Module.SourceFileName
  fullName: Ubiquity.NET.Llvm.Module.SourceFileName
- uid: Ubiquity.NET.Llvm.IModule.SourceFileName
  commentId: P:Ubiquity.NET.Llvm.IModule.SourceFileName
  parent: Ubiquity.NET.Llvm.IModule
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_SourceFileName
  name: SourceFileName
  nameWithType: IModule.SourceFileName
  fullName: Ubiquity.NET.Llvm.IModule.SourceFileName
- uid: Ubiquity.NET.Llvm.Module.Comdats*
  commentId: Overload:Ubiquity.NET.Llvm.Module.Comdats
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_Comdats
  name: Comdats
  nameWithType: Module.Comdats
  fullName: Ubiquity.NET.Llvm.Module.Comdats
- uid: Ubiquity.NET.Llvm.IModule.Comdats
  commentId: P:Ubiquity.NET.Llvm.IModule.Comdats
  parent: Ubiquity.NET.Llvm.IModule
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Comdats
  name: Comdats
  nameWithType: IModule.Comdats
  fullName: Ubiquity.NET.Llvm.IModule.Comdats
- uid: Ubiquity.NET.Llvm.ComdatCollection
  commentId: T:Ubiquity.NET.Llvm.ComdatCollection
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.ComdatCollection.html
  name: ComdatCollection
  nameWithType: ComdatCollection
  fullName: Ubiquity.NET.Llvm.ComdatCollection
- uid: Ubiquity.NET.Llvm.IModule.Context
  commentId: P:Ubiquity.NET.Llvm.IModule.Context
  parent: Ubiquity.NET.Llvm.IModule
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Context
  name: Context
  nameWithType: IModule.Context
  fullName: Ubiquity.NET.Llvm.IModule.Context
- uid: Ubiquity.NET.Llvm.Module.Context*
  commentId: Overload:Ubiquity.NET.Llvm.Module.Context
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_Context
  name: Context
  nameWithType: Module.Context
  fullName: Ubiquity.NET.Llvm.Module.Context
- uid: Ubiquity.NET.Llvm.Module.ModuleFlags*
  commentId: Overload:Ubiquity.NET.Llvm.Module.ModuleFlags
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_ModuleFlags
  name: ModuleFlags
  nameWithType: Module.ModuleFlags
  fullName: Ubiquity.NET.Llvm.Module.ModuleFlags
- uid: Ubiquity.NET.Llvm.IModule.ModuleFlags
  commentId: P:Ubiquity.NET.Llvm.IModule.ModuleFlags
  parent: Ubiquity.NET.Llvm.IModule
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_ModuleFlags
  name: ModuleFlags
  nameWithType: IModule.ModuleFlags
  fullName: Ubiquity.NET.Llvm.IModule.ModuleFlags
- uid: System.Collections.Generic.IReadOnlyDictionary{System.String,Ubiquity.NET.Llvm.Metadata.ModuleFlag}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{System.String,Ubiquity.NET.Llvm.Metadata.ModuleFlag}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  name: IReadOnlyDictionary<string, ModuleFlag>
  nameWithType: IReadOnlyDictionary<string, ModuleFlag>
  fullName: System.Collections.Generic.IReadOnlyDictionary<string, Ubiquity.NET.Llvm.Metadata.ModuleFlag>
  nameWithType.vb: IReadOnlyDictionary(Of String, ModuleFlag)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of String, Ubiquity.NET.Llvm.Metadata.ModuleFlag)
  name.vb: IReadOnlyDictionary(Of String, ModuleFlag)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Metadata.ModuleFlag
    name: ModuleFlag
    href: Ubiquity.NET.Llvm.Metadata.ModuleFlag.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Metadata.ModuleFlag
    name: ModuleFlag
    href: Ubiquity.NET.Llvm.Metadata.ModuleFlag.html
  - name: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Ubiquity.NET.Llvm.Module.CompileUnits*
  commentId: Overload:Ubiquity.NET.Llvm.Module.CompileUnits
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_CompileUnits
  name: CompileUnits
  nameWithType: Module.CompileUnits
  fullName: Ubiquity.NET.Llvm.Module.CompileUnits
- uid: Ubiquity.NET.Llvm.IModule.CompileUnits
  commentId: P:Ubiquity.NET.Llvm.IModule.CompileUnits
  parent: Ubiquity.NET.Llvm.IModule
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_CompileUnits
  name: CompileUnits
  nameWithType: IModule.CompileUnits
  fullName: Ubiquity.NET.Llvm.IModule.CompileUnits
- uid: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.DICompileUnit}
  commentId: T:System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.DICompileUnit}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<DICompileUnit>
  nameWithType: IEnumerable<DICompileUnit>
  fullName: System.Collections.Generic.IEnumerable<Ubiquity.NET.Llvm.DebugInfo.DICompileUnit>
  nameWithType.vb: IEnumerable(Of DICompileUnit)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Ubiquity.NET.Llvm.DebugInfo.DICompileUnit)
  name.vb: IEnumerable(Of DICompileUnit)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Ubiquity.NET.Llvm.DebugInfo.DICompileUnit
    name: DICompileUnit
    href: Ubiquity.NET.Llvm.DebugInfo.DICompileUnit.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DICompileUnit
    name: DICompileUnit
    href: Ubiquity.NET.Llvm.DebugInfo.DICompileUnit.html
  - name: )
- uid: Ubiquity.NET.Llvm.Module.DataLayoutString*
  commentId: Overload:Ubiquity.NET.Llvm.Module.DataLayoutString
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_DataLayoutString
  name: DataLayoutString
  nameWithType: Module.DataLayoutString
  fullName: Ubiquity.NET.Llvm.Module.DataLayoutString
- uid: Ubiquity.NET.Llvm.IModule.DataLayoutString
  commentId: P:Ubiquity.NET.Llvm.IModule.DataLayoutString
  parent: Ubiquity.NET.Llvm.IModule
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_DataLayoutString
  name: DataLayoutString
  nameWithType: IModule.DataLayoutString
  fullName: Ubiquity.NET.Llvm.IModule.DataLayoutString
- uid: Ubiquity.NET.InteropHelpers.LazyEncodedString
  commentId: T:Ubiquity.NET.InteropHelpers.LazyEncodedString
  parent: Ubiquity.NET.InteropHelpers
  name: LazyEncodedString
  nameWithType: LazyEncodedString
  fullName: Ubiquity.NET.InteropHelpers.LazyEncodedString
- uid: Ubiquity.NET.InteropHelpers
  commentId: N:Ubiquity.NET.InteropHelpers
  name: Ubiquity.NET.InteropHelpers
  nameWithType: Ubiquity.NET.InteropHelpers
  fullName: Ubiquity.NET.InteropHelpers
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
  - name: .
  - uid: Ubiquity.NET
    name: NET
  - name: .
  - uid: Ubiquity.NET.InteropHelpers
    name: InteropHelpers
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
  - name: .
  - uid: Ubiquity.NET
    name: NET
  - name: .
  - uid: Ubiquity.NET.InteropHelpers
    name: InteropHelpers
- uid: Ubiquity.NET.Llvm.IDataLayout
  commentId: T:Ubiquity.NET.Llvm.IDataLayout
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.IDataLayout.html
  name: IDataLayout
  nameWithType: IDataLayout
  fullName: Ubiquity.NET.Llvm.IDataLayout
- uid: Ubiquity.NET.Llvm.Module.Layout*
  commentId: Overload:Ubiquity.NET.Llvm.Module.Layout
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_Layout
  name: Layout
  nameWithType: Module.Layout
  fullName: Ubiquity.NET.Llvm.Module.Layout
- uid: Ubiquity.NET.Llvm.IModule.Layout
  commentId: P:Ubiquity.NET.Llvm.IModule.Layout
  parent: Ubiquity.NET.Llvm.IModule
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Layout
  name: Layout
  nameWithType: IModule.Layout
  fullName: Ubiquity.NET.Llvm.IModule.Layout
- uid: Ubiquity.NET.Llvm.Module.TargetTriple*
  commentId: Overload:Ubiquity.NET.Llvm.Module.TargetTriple
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_TargetTriple
  name: TargetTriple
  nameWithType: Module.TargetTriple
  fullName: Ubiquity.NET.Llvm.Module.TargetTriple
- uid: Ubiquity.NET.Llvm.IModule.TargetTriple
  commentId: P:Ubiquity.NET.Llvm.IModule.TargetTriple
  parent: Ubiquity.NET.Llvm.IModule
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_TargetTriple
  name: TargetTriple
  nameWithType: IModule.TargetTriple
  fullName: Ubiquity.NET.Llvm.IModule.TargetTriple
- uid: Ubiquity.NET.Llvm.Module.Globals*
  commentId: Overload:Ubiquity.NET.Llvm.Module.Globals
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_Globals
  name: Globals
  nameWithType: Module.Globals
  fullName: Ubiquity.NET.Llvm.Module.Globals
- uid: Ubiquity.NET.Llvm.IModule.Globals
  commentId: P:Ubiquity.NET.Llvm.IModule.Globals
  parent: Ubiquity.NET.Llvm.IModule
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Globals
  name: Globals
  nameWithType: IModule.Globals
  fullName: Ubiquity.NET.Llvm.IModule.Globals
- uid: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.GlobalVariable}
  commentId: T:System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.GlobalVariable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<GlobalVariable>
  nameWithType: IEnumerable<GlobalVariable>
  fullName: System.Collections.Generic.IEnumerable<Ubiquity.NET.Llvm.Values.GlobalVariable>
  nameWithType.vb: IEnumerable(Of GlobalVariable)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Ubiquity.NET.Llvm.Values.GlobalVariable)
  name.vb: IEnumerable(Of GlobalVariable)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Ubiquity.NET.Llvm.Values.GlobalVariable
    name: GlobalVariable
    href: Ubiquity.NET.Llvm.Values.GlobalVariable.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.GlobalVariable
    name: GlobalVariable
    href: Ubiquity.NET.Llvm.Values.GlobalVariable.html
  - name: )
- uid: Ubiquity.NET.Llvm.Module.Functions*
  commentId: Overload:Ubiquity.NET.Llvm.Module.Functions
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_Functions
  name: Functions
  nameWithType: Module.Functions
  fullName: Ubiquity.NET.Llvm.Module.Functions
- uid: Ubiquity.NET.Llvm.IModule.Functions
  commentId: P:Ubiquity.NET.Llvm.IModule.Functions
  parent: Ubiquity.NET.Llvm.IModule
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Functions
  name: Functions
  nameWithType: IModule.Functions
  fullName: Ubiquity.NET.Llvm.IModule.Functions
- uid: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.Function}
  commentId: T:System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.Function}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Function>
  nameWithType: IEnumerable<Function>
  fullName: System.Collections.Generic.IEnumerable<Ubiquity.NET.Llvm.Values.Function>
  nameWithType.vb: IEnumerable(Of Function)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Ubiquity.NET.Llvm.Values.Function)
  name.vb: IEnumerable(Of Function)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Ubiquity.NET.Llvm.Values.Function
    name: Function
    href: Ubiquity.NET.Llvm.Values.Function.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.Function
    name: Function
    href: Ubiquity.NET.Llvm.Values.Function.html
  - name: )
- uid: Ubiquity.NET.Llvm.Module.Aliases*
  commentId: Overload:Ubiquity.NET.Llvm.Module.Aliases
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_Aliases
  name: Aliases
  nameWithType: Module.Aliases
  fullName: Ubiquity.NET.Llvm.Module.Aliases
- uid: Ubiquity.NET.Llvm.IModule.Aliases
  commentId: P:Ubiquity.NET.Llvm.IModule.Aliases
  parent: Ubiquity.NET.Llvm.IModule
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Aliases
  name: Aliases
  nameWithType: IModule.Aliases
  fullName: Ubiquity.NET.Llvm.IModule.Aliases
- uid: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.GlobalAlias}
  commentId: T:System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.GlobalAlias}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<GlobalAlias>
  nameWithType: IEnumerable<GlobalAlias>
  fullName: System.Collections.Generic.IEnumerable<Ubiquity.NET.Llvm.Values.GlobalAlias>
  nameWithType.vb: IEnumerable(Of GlobalAlias)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Ubiquity.NET.Llvm.Values.GlobalAlias)
  name.vb: IEnumerable(Of GlobalAlias)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Ubiquity.NET.Llvm.Values.GlobalAlias
    name: GlobalAlias
    href: Ubiquity.NET.Llvm.Values.GlobalAlias.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.GlobalAlias
    name: GlobalAlias
    href: Ubiquity.NET.Llvm.Values.GlobalAlias.html
  - name: )
- uid: Ubiquity.NET.Llvm.Metadata.NamedMDNode
  commentId: T:Ubiquity.NET.Llvm.Metadata.NamedMDNode
  href: Ubiquity.NET.Llvm.Metadata.NamedMDNode.html
  name: NamedMDNode
  nameWithType: NamedMDNode
  fullName: Ubiquity.NET.Llvm.Metadata.NamedMDNode
- uid: Ubiquity.NET.Llvm.Module.NamedMetadata*
  commentId: Overload:Ubiquity.NET.Llvm.Module.NamedMetadata
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_NamedMetadata
  name: NamedMetadata
  nameWithType: Module.NamedMetadata
  fullName: Ubiquity.NET.Llvm.Module.NamedMetadata
- uid: Ubiquity.NET.Llvm.IModule.NamedMetadata
  commentId: P:Ubiquity.NET.Llvm.IModule.NamedMetadata
  parent: Ubiquity.NET.Llvm.IModule
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_NamedMetadata
  name: NamedMetadata
  nameWithType: IModule.NamedMetadata
  fullName: Ubiquity.NET.Llvm.IModule.NamedMetadata
- uid: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Metadata.NamedMDNode}
  commentId: T:System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Metadata.NamedMDNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<NamedMDNode>
  nameWithType: IEnumerable<NamedMDNode>
  fullName: System.Collections.Generic.IEnumerable<Ubiquity.NET.Llvm.Metadata.NamedMDNode>
  nameWithType.vb: IEnumerable(Of NamedMDNode)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Ubiquity.NET.Llvm.Metadata.NamedMDNode)
  name.vb: IEnumerable(Of NamedMDNode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Ubiquity.NET.Llvm.Metadata.NamedMDNode
    name: NamedMDNode
    href: Ubiquity.NET.Llvm.Metadata.NamedMDNode.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.Metadata.NamedMDNode
    name: NamedMDNode
    href: Ubiquity.NET.Llvm.Metadata.NamedMDNode.html
  - name: )
- uid: Ubiquity.NET.Llvm.Module.IndirectFunctions*
  commentId: Overload:Ubiquity.NET.Llvm.Module.IndirectFunctions
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_IndirectFunctions
  name: IndirectFunctions
  nameWithType: Module.IndirectFunctions
  fullName: Ubiquity.NET.Llvm.Module.IndirectFunctions
- uid: Ubiquity.NET.Llvm.IModule.IndirectFunctions
  commentId: P:Ubiquity.NET.Llvm.IModule.IndirectFunctions
  parent: Ubiquity.NET.Llvm.IModule
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_IndirectFunctions
  name: IndirectFunctions
  nameWithType: IModule.IndirectFunctions
  fullName: Ubiquity.NET.Llvm.IModule.IndirectFunctions
- uid: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.GlobalIFunc}
  commentId: T:System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.GlobalIFunc}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<GlobalIFunc>
  nameWithType: IEnumerable<GlobalIFunc>
  fullName: System.Collections.Generic.IEnumerable<Ubiquity.NET.Llvm.Values.GlobalIFunc>
  nameWithType.vb: IEnumerable(Of GlobalIFunc)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Ubiquity.NET.Llvm.Values.GlobalIFunc)
  name.vb: IEnumerable(Of GlobalIFunc)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Ubiquity.NET.Llvm.Values.GlobalIFunc
    name: GlobalIFunc
    href: Ubiquity.NET.Llvm.Values.GlobalIFunc.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.GlobalIFunc
    name: GlobalIFunc
    href: Ubiquity.NET.Llvm.Values.GlobalIFunc.html
  - name: )
- uid: Ubiquity.NET.Llvm.Module.Name*
  commentId: Overload:Ubiquity.NET.Llvm.Module.Name
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_Name
  name: Name
  nameWithType: Module.Name
  fullName: Ubiquity.NET.Llvm.Module.Name
- uid: Ubiquity.NET.Llvm.IModule.Name
  commentId: P:Ubiquity.NET.Llvm.IModule.Name
  parent: Ubiquity.NET.Llvm.IModule
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Name
  name: Name
  nameWithType: IModule.Name
  fullName: Ubiquity.NET.Llvm.IModule.Name
- uid: Ubiquity.NET.Llvm.Module.ModuleInlineAsm*
  commentId: Overload:Ubiquity.NET.Llvm.Module.ModuleInlineAsm
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_ModuleInlineAsm
  name: ModuleInlineAsm
  nameWithType: Module.ModuleInlineAsm
  fullName: Ubiquity.NET.Llvm.Module.ModuleInlineAsm
- uid: Ubiquity.NET.Llvm.IModule.ModuleInlineAsm
  commentId: P:Ubiquity.NET.Llvm.IModule.ModuleInlineAsm
  parent: Ubiquity.NET.Llvm.IModule
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_ModuleInlineAsm
  name: ModuleInlineAsm
  nameWithType: IModule.ModuleInlineAsm
  fullName: Ubiquity.NET.Llvm.IModule.ModuleInlineAsm
- uid: Ubiquity.NET.Llvm.Module.LoadFrom*
  commentId: Overload:Ubiquity.NET.Llvm.Module.LoadFrom
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_LoadFrom_System_String_Ubiquity_NET_Llvm_IContext_
  name: LoadFrom
  nameWithType: Module.LoadFrom
  fullName: Ubiquity.NET.Llvm.Module.LoadFrom
- uid: Ubiquity.NET.Llvm.Module.WriteToBuffer
  commentId: M:Ubiquity.NET.Llvm.Module.WriteToBuffer
  href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_WriteToBuffer
  name: WriteToBuffer()
  nameWithType: Module.WriteToBuffer()
  fullName: Ubiquity.NET.Llvm.Module.WriteToBuffer()
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.Module.WriteToBuffer
    name: WriteToBuffer
    href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_WriteToBuffer
  - name: (
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.Module.WriteToBuffer
    name: WriteToBuffer
    href: Ubiquity.NET.Llvm.Module.html#Ubiquity_NET_Llvm_Module_WriteToBuffer
  - name: (
  - name: )
