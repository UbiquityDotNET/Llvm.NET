### YamlMime:ManagedReference
items:
- uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
  commentId: T:Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
  id: IDebugType`2
  parent: Ubiquity.NET.Llvm.DebugInfo
  children:
  - Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.CreateArrayType(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.UInt32,System.UInt32)
  - Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.CreatePointerType(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.UInt32)
  - Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.DebugInfoType
  - Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.NativeType
  langs:
  - csharp
  - vb
  name: IDebugType<TNative, TDebug>
  nameWithType: IDebugType<TNative, TDebug>
  fullName: Ubiquity.NET.Llvm.DebugInfo.IDebugType<TNative, TDebug>
  type: Interface
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/DebugInfo/IDebugType.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: IDebugType
    path: ../src/Ubiquity.NET.Llvm/DebugInfo/IDebugType.cs
    startLine: 29
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.DebugInfo
  summary: Provides pairing of a <xref href="Ubiquity.NET.Llvm.Types.ITypeRef" data-throw-if-not-resolved="false"></xref> with a <xref href="Ubiquity.NET.Llvm.DebugInfo.IDebugType%602.DebugInfoType" data-throw-if-not-resolved="false"></xref> for function signatures
  remarks: >-
    <p>Primitive types and function signature types are all interned in LLVM, thus there won't be a

    strict one to one relationship between an LLVM type and corresponding language specific debug

    type. (e.g. unsigned char, char, byte and signed byte might all be 8 bit integer values as far

    as LLVM is concerned.) Also, when using the pointer+alloca+memcpy pattern to pass by value the

    actual source debug info type is different than the LLVM function signature. This interface and

    it's implementations are used to construct native type and debug info pairing to allow applications

    to maintain a link from their AST or IR types into the LLVM native type and debug information.

    </p>

    <div class="NOTE"><h5>note</h5><p>

    It is important to note that the relationship from the <xref href="Ubiquity.NET.Llvm.DebugInfo.IDebugType%602.DebugInfoType" data-throw-if-not-resolved="false"></xref> to it's <xref href="Ubiquity.NET.Llvm.DebugInfo.IDebugType%602.NativeType" data-throw-if-not-resolved="false"></xref>

    properties is strictly ***one way***. That is, there is no way to take an arbitrary <xref href="Ubiquity.NET.Llvm.Types.ITypeRef" data-throw-if-not-resolved="false"></xref>

    and re-associate it with the DebugInfoType or an implementation of this interface as there may be many such

    mappings to choose from.

    </p></div>
  example: []
  syntax:
    content: 'public interface IDebugType<out TNative, out TDebug> : ITypeRef, IEquatable<ITypeRef> where TNative : ITypeRef where TDebug : DIType'
    typeParameters:
    - id: TNative
      description: Native LLVM type
    - id: TDebug
      description: Debug type description for the type
    content.vb: Public Interface IDebugType(Of Out TNative As ITypeRef, Out TDebug As DIType) Inherits ITypeRef, IEquatable(Of ITypeRef)
  inheritedMembers:
  - Ubiquity.NET.Llvm.Types.ITypeRef.IsSized
  - Ubiquity.NET.Llvm.Types.ITypeRef.Kind
  - Ubiquity.NET.Llvm.Types.ITypeRef.IsInteger
  - Ubiquity.NET.Llvm.Types.ITypeRef.IsFloat
  - Ubiquity.NET.Llvm.Types.ITypeRef.IsDouble
  - Ubiquity.NET.Llvm.Types.ITypeRef.IsVoid
  - Ubiquity.NET.Llvm.Types.ITypeRef.IsStruct
  - Ubiquity.NET.Llvm.Types.ITypeRef.IsPointer
  - Ubiquity.NET.Llvm.Types.ITypeRef.IsSequence
  - Ubiquity.NET.Llvm.Types.ITypeRef.IsFloatingPoint
  - Ubiquity.NET.Llvm.Types.ITypeRef.Context
  - Ubiquity.NET.Llvm.Types.ITypeRef.IntegerBitWidth
  - Ubiquity.NET.Llvm.Types.ITypeRef.GetNullValue
  - Ubiquity.NET.Llvm.Types.ITypeRef.CreateArrayType(System.UInt32)
  - Ubiquity.NET.Llvm.Types.ITypeRef.CreatePointerType
  - Ubiquity.NET.Llvm.Types.ITypeRef.CreatePointerType(System.UInt32)
  - System.IEquatable{Ubiquity.NET.Llvm.Types.ITypeRef}.Equals(Ubiquity.NET.Llvm.Types.ITypeRef)
  nameWithType.vb: IDebugType(Of TNative, TDebug)
  fullName.vb: Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of TNative, TDebug)
  name.vb: IDebugType(Of TNative, TDebug)
- uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.NativeType
  commentId: P:Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.NativeType
  id: NativeType
  parent: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
  langs:
  - csharp
  - vb
  name: NativeType
  nameWithType: IDebugType<TNative, TDebug>.NativeType
  fullName: Ubiquity.NET.Llvm.DebugInfo.IDebugType<TNative, TDebug>.NativeType
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/DebugInfo/IDebugType.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: NativeType
    path: ../src/Ubiquity.NET.Llvm/DebugInfo/IDebugType.cs
    startLine: 35
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.DebugInfo
  summary: Gets the LLVM NativeType this interface is associating with debug info in <xref href="Ubiquity.NET.Llvm.DebugInfo.IDebugType%602.DebugInfoType" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: TNative NativeType { get; }
    parameters: []
    return:
      type: '{TNative}'
    content.vb: ReadOnly Property NativeType As TNative
  overload: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.NativeType*
  nameWithType.vb: IDebugType(Of TNative, TDebug).NativeType
  fullName.vb: Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of TNative, TDebug).NativeType
- uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.DebugInfoType
  commentId: P:Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.DebugInfoType
  id: DebugInfoType
  parent: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
  langs:
  - csharp
  - vb
  name: DebugInfoType
  nameWithType: IDebugType<TNative, TDebug>.DebugInfoType
  fullName: Ubiquity.NET.Llvm.DebugInfo.IDebugType<TNative, TDebug>.DebugInfoType
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/DebugInfo/IDebugType.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: DebugInfoType
    path: ../src/Ubiquity.NET.Llvm/DebugInfo/IDebugType.cs
    startLine: 38
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.DebugInfo
  summary: Gets the debug information type this interface is associating with <xref href="Ubiquity.NET.Llvm.DebugInfo.IDebugType%602.NativeType" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: TDebug? DebugInfoType { get; }
    parameters: []
    return:
      type: '{TDebug}'
    content.vb: ReadOnly Property DebugInfoType As TDebug
  overload: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.DebugInfoType*
  nameWithType.vb: IDebugType(Of TNative, TDebug).DebugInfoType
  fullName.vb: Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of TNative, TDebug).DebugInfoType
- uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.CreatePointerType(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.UInt32)
  commentId: M:Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.CreatePointerType(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.UInt32)
  id: CreatePointerType(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.UInt32)
  parent: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
  langs:
  - csharp
  - vb
  name: CreatePointerType(ref readonly DIBuilder, uint)
  nameWithType: IDebugType<TNative, TDebug>.CreatePointerType(ref readonly DIBuilder, uint)
  fullName: Ubiquity.NET.Llvm.DebugInfo.IDebugType<TNative, TDebug>.CreatePointerType(ref readonly Ubiquity.NET.Llvm.DebugInfo.DIBuilder, uint)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/DebugInfo/IDebugType.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: CreatePointerType
    path: ../src/Ubiquity.NET.Llvm/DebugInfo/IDebugType.cs
    startLine: 44
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.DebugInfo
  summary: Creates a pointer to this type for a given module and address space
  example: []
  syntax:
    content: DebugPointerType CreatePointerType(ref readonly DIBuilder diBuilder, uint addressSpace)
    parameters:
    - id: diBuilder
      type: Ubiquity.NET.Llvm.DebugInfo.DIBuilder
      description: Debug information builder to use
    - id: addressSpace
      type: System.UInt32
      description: Address space for the pointer
    return:
      type: Ubiquity.NET.Llvm.DebugInfo.DebugPointerType
      description: <xref href="Ubiquity.NET.Llvm.DebugInfo.DebugPointerType" data-throw-if-not-resolved="false"></xref>
    content.vb: Function CreatePointerType(diBuilder As DIBuilder, addressSpace As UInteger) As DebugPointerType
  overload: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.CreatePointerType*
  nameWithType.vb: IDebugType(Of TNative, TDebug).CreatePointerType(DIBuilder, UInteger)
  fullName.vb: Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of TNative, TDebug).CreatePointerType(Ubiquity.NET.Llvm.DebugInfo.DIBuilder, UInteger)
  name.vb: CreatePointerType(DIBuilder, UInteger)
- uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.CreateArrayType(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.UInt32,System.UInt32)
  commentId: M:Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.CreateArrayType(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.UInt32,System.UInt32)
  id: CreateArrayType(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.UInt32,System.UInt32)
  parent: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
  langs:
  - csharp
  - vb
  name: CreateArrayType(ref readonly DIBuilder, uint, uint)
  nameWithType: IDebugType<TNative, TDebug>.CreateArrayType(ref readonly DIBuilder, uint, uint)
  fullName: Ubiquity.NET.Llvm.DebugInfo.IDebugType<TNative, TDebug>.CreateArrayType(ref readonly Ubiquity.NET.Llvm.DebugInfo.DIBuilder, uint, uint)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/DebugInfo/IDebugType.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: CreateArrayType
    path: ../src/Ubiquity.NET.Llvm/DebugInfo/IDebugType.cs
    startLine: 51
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.DebugInfo
  summary: Creates a type defining an array of elements of this type
  example: []
  syntax:
    content: DebugArrayType CreateArrayType(ref readonly DIBuilder diBuilder, uint lowerBound, uint count)
    parameters:
    - id: diBuilder
      type: Ubiquity.NET.Llvm.DebugInfo.DIBuilder
      description: Debug information builder to use
    - id: lowerBound
      type: System.UInt32
      description: Lower bound of the array
    - id: count
      type: System.UInt32
      description: Count of elements in the array
    return:
      type: Ubiquity.NET.Llvm.DebugInfo.DebugArrayType
      description: <xref href="Ubiquity.NET.Llvm.DebugInfo.DebugArrayType" data-throw-if-not-resolved="false"></xref>
    content.vb: Function CreateArrayType(diBuilder As DIBuilder, lowerBound As UInteger, count As UInteger) As DebugArrayType
  overload: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.CreateArrayType*
  nameWithType.vb: IDebugType(Of TNative, TDebug).CreateArrayType(DIBuilder, UInteger, UInteger)
  fullName.vb: Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of TNative, TDebug).CreateArrayType(Ubiquity.NET.Llvm.DebugInfo.DIBuilder, UInteger, UInteger)
  name.vb: CreateArrayType(DIBuilder, UInteger, UInteger)
references:
- uid: Ubiquity.NET.Llvm.Types.ITypeRef
  commentId: T:Ubiquity.NET.Llvm.Types.ITypeRef
  parent: Ubiquity.NET.Llvm.Types
  href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  name: ITypeRef
  nameWithType: ITypeRef
  fullName: Ubiquity.NET.Llvm.Types.ITypeRef
- uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.DebugInfoType
  commentId: P:Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.DebugInfoType
  href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html#Ubiquity_NET_Llvm_DebugInfo_IDebugType_2_DebugInfoType
  name: DebugInfoType
  nameWithType: IDebugType<TNative, TDebug>.DebugInfoType
  fullName: Ubiquity.NET.Llvm.DebugInfo.IDebugType<TNative, TDebug>.DebugInfoType
  nameWithType.vb: IDebugType(Of TNative, TDebug).DebugInfoType
  fullName.vb: Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of TNative, TDebug).DebugInfoType
- uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.NativeType
  commentId: P:Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.NativeType
  href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html#Ubiquity_NET_Llvm_DebugInfo_IDebugType_2_NativeType
  name: NativeType
  nameWithType: IDebugType<TNative, TDebug>.NativeType
  fullName: Ubiquity.NET.Llvm.DebugInfo.IDebugType<TNative, TDebug>.NativeType
  nameWithType.vb: IDebugType(Of TNative, TDebug).NativeType
  fullName.vb: Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of TNative, TDebug).NativeType
- uid: Ubiquity.NET.Llvm.DebugInfo
  commentId: N:Ubiquity.NET.Llvm.DebugInfo
  href: Ubiquity.html
  name: Ubiquity.NET.Llvm.DebugInfo
  nameWithType: Ubiquity.NET.Llvm.DebugInfo
  fullName: Ubiquity.NET.Llvm.DebugInfo
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.DebugInfo
    name: DebugInfo
    href: Ubiquity.NET.Llvm.DebugInfo.html
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.DebugInfo
    name: DebugInfo
    href: Ubiquity.NET.Llvm.DebugInfo.html
- uid: Ubiquity.NET.Llvm.Types.ITypeRef.IsSized
  commentId: P:Ubiquity.NET.Llvm.Types.ITypeRef.IsSized
  parent: Ubiquity.NET.Llvm.Types.ITypeRef
  href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_IsSized
  name: IsSized
  nameWithType: ITypeRef.IsSized
  fullName: Ubiquity.NET.Llvm.Types.ITypeRef.IsSized
- uid: Ubiquity.NET.Llvm.Types.ITypeRef.Kind
  commentId: P:Ubiquity.NET.Llvm.Types.ITypeRef.Kind
  parent: Ubiquity.NET.Llvm.Types.ITypeRef
  href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_Kind
  name: Kind
  nameWithType: ITypeRef.Kind
  fullName: Ubiquity.NET.Llvm.Types.ITypeRef.Kind
- uid: Ubiquity.NET.Llvm.Types.ITypeRef.IsInteger
  commentId: P:Ubiquity.NET.Llvm.Types.ITypeRef.IsInteger
  parent: Ubiquity.NET.Llvm.Types.ITypeRef
  href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_IsInteger
  name: IsInteger
  nameWithType: ITypeRef.IsInteger
  fullName: Ubiquity.NET.Llvm.Types.ITypeRef.IsInteger
- uid: Ubiquity.NET.Llvm.Types.ITypeRef.IsFloat
  commentId: P:Ubiquity.NET.Llvm.Types.ITypeRef.IsFloat
  parent: Ubiquity.NET.Llvm.Types.ITypeRef
  href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_IsFloat
  name: IsFloat
  nameWithType: ITypeRef.IsFloat
  fullName: Ubiquity.NET.Llvm.Types.ITypeRef.IsFloat
- uid: Ubiquity.NET.Llvm.Types.ITypeRef.IsDouble
  commentId: P:Ubiquity.NET.Llvm.Types.ITypeRef.IsDouble
  parent: Ubiquity.NET.Llvm.Types.ITypeRef
  href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_IsDouble
  name: IsDouble
  nameWithType: ITypeRef.IsDouble
  fullName: Ubiquity.NET.Llvm.Types.ITypeRef.IsDouble
- uid: Ubiquity.NET.Llvm.Types.ITypeRef.IsVoid
  commentId: P:Ubiquity.NET.Llvm.Types.ITypeRef.IsVoid
  parent: Ubiquity.NET.Llvm.Types.ITypeRef
  href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_IsVoid
  name: IsVoid
  nameWithType: ITypeRef.IsVoid
  fullName: Ubiquity.NET.Llvm.Types.ITypeRef.IsVoid
- uid: Ubiquity.NET.Llvm.Types.ITypeRef.IsStruct
  commentId: P:Ubiquity.NET.Llvm.Types.ITypeRef.IsStruct
  parent: Ubiquity.NET.Llvm.Types.ITypeRef
  href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_IsStruct
  name: IsStruct
  nameWithType: ITypeRef.IsStruct
  fullName: Ubiquity.NET.Llvm.Types.ITypeRef.IsStruct
- uid: Ubiquity.NET.Llvm.Types.ITypeRef.IsPointer
  commentId: P:Ubiquity.NET.Llvm.Types.ITypeRef.IsPointer
  parent: Ubiquity.NET.Llvm.Types.ITypeRef
  href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_IsPointer
  name: IsPointer
  nameWithType: ITypeRef.IsPointer
  fullName: Ubiquity.NET.Llvm.Types.ITypeRef.IsPointer
- uid: Ubiquity.NET.Llvm.Types.ITypeRef.IsSequence
  commentId: P:Ubiquity.NET.Llvm.Types.ITypeRef.IsSequence
  parent: Ubiquity.NET.Llvm.Types.ITypeRef
  href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_IsSequence
  name: IsSequence
  nameWithType: ITypeRef.IsSequence
  fullName: Ubiquity.NET.Llvm.Types.ITypeRef.IsSequence
- uid: Ubiquity.NET.Llvm.Types.ITypeRef.IsFloatingPoint
  commentId: P:Ubiquity.NET.Llvm.Types.ITypeRef.IsFloatingPoint
  parent: Ubiquity.NET.Llvm.Types.ITypeRef
  href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_IsFloatingPoint
  name: IsFloatingPoint
  nameWithType: ITypeRef.IsFloatingPoint
  fullName: Ubiquity.NET.Llvm.Types.ITypeRef.IsFloatingPoint
- uid: Ubiquity.NET.Llvm.Types.ITypeRef.Context
  commentId: P:Ubiquity.NET.Llvm.Types.ITypeRef.Context
  parent: Ubiquity.NET.Llvm.Types.ITypeRef
  href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_Context
  name: Context
  nameWithType: ITypeRef.Context
  fullName: Ubiquity.NET.Llvm.Types.ITypeRef.Context
- uid: Ubiquity.NET.Llvm.Types.ITypeRef.IntegerBitWidth
  commentId: P:Ubiquity.NET.Llvm.Types.ITypeRef.IntegerBitWidth
  parent: Ubiquity.NET.Llvm.Types.ITypeRef
  href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_IntegerBitWidth
  name: IntegerBitWidth
  nameWithType: ITypeRef.IntegerBitWidth
  fullName: Ubiquity.NET.Llvm.Types.ITypeRef.IntegerBitWidth
- uid: Ubiquity.NET.Llvm.Types.ITypeRef.GetNullValue
  commentId: M:Ubiquity.NET.Llvm.Types.ITypeRef.GetNullValue
  parent: Ubiquity.NET.Llvm.Types.ITypeRef
  href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_GetNullValue
  name: GetNullValue()
  nameWithType: ITypeRef.GetNullValue()
  fullName: Ubiquity.NET.Llvm.Types.ITypeRef.GetNullValue()
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef.GetNullValue
    name: GetNullValue
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_GetNullValue
  - name: (
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef.GetNullValue
    name: GetNullValue
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_GetNullValue
  - name: (
  - name: )
- uid: Ubiquity.NET.Llvm.Types.ITypeRef.CreateArrayType(System.UInt32)
  commentId: M:Ubiquity.NET.Llvm.Types.ITypeRef.CreateArrayType(System.UInt32)
  parent: Ubiquity.NET.Llvm.Types.ITypeRef
  isExternal: true
  href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_CreateArrayType_System_UInt32_
  name: CreateArrayType(uint)
  nameWithType: ITypeRef.CreateArrayType(uint)
  fullName: Ubiquity.NET.Llvm.Types.ITypeRef.CreateArrayType(uint)
  nameWithType.vb: ITypeRef.CreateArrayType(UInteger)
  fullName.vb: Ubiquity.NET.Llvm.Types.ITypeRef.CreateArrayType(UInteger)
  name.vb: CreateArrayType(UInteger)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef.CreateArrayType(System.UInt32)
    name: CreateArrayType
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_CreateArrayType_System_UInt32_
  - name: (
  - uid: System.UInt32
    name: uint
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef.CreateArrayType(System.UInt32)
    name: CreateArrayType
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_CreateArrayType_System_UInt32_
  - name: (
  - uid: System.UInt32
    name: UInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: )
- uid: Ubiquity.NET.Llvm.Types.ITypeRef.CreatePointerType
  commentId: M:Ubiquity.NET.Llvm.Types.ITypeRef.CreatePointerType
  parent: Ubiquity.NET.Llvm.Types.ITypeRef
  href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_CreatePointerType
  name: CreatePointerType()
  nameWithType: ITypeRef.CreatePointerType()
  fullName: Ubiquity.NET.Llvm.Types.ITypeRef.CreatePointerType()
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef.CreatePointerType
    name: CreatePointerType
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_CreatePointerType
  - name: (
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef.CreatePointerType
    name: CreatePointerType
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_CreatePointerType
  - name: (
  - name: )
- uid: Ubiquity.NET.Llvm.Types.ITypeRef.CreatePointerType(System.UInt32)
  commentId: M:Ubiquity.NET.Llvm.Types.ITypeRef.CreatePointerType(System.UInt32)
  parent: Ubiquity.NET.Llvm.Types.ITypeRef
  isExternal: true
  href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_CreatePointerType_System_UInt32_
  name: CreatePointerType(uint)
  nameWithType: ITypeRef.CreatePointerType(uint)
  fullName: Ubiquity.NET.Llvm.Types.ITypeRef.CreatePointerType(uint)
  nameWithType.vb: ITypeRef.CreatePointerType(UInteger)
  fullName.vb: Ubiquity.NET.Llvm.Types.ITypeRef.CreatePointerType(UInteger)
  name.vb: CreatePointerType(UInteger)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef.CreatePointerType(System.UInt32)
    name: CreatePointerType
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_CreatePointerType_System_UInt32_
  - name: (
  - uid: System.UInt32
    name: uint
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef.CreatePointerType(System.UInt32)
    name: CreatePointerType
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html#Ubiquity_NET_Llvm_Types_ITypeRef_CreatePointerType_System_UInt32_
  - name: (
  - uid: System.UInt32
    name: UInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: )
- uid: System.IEquatable{Ubiquity.NET.Llvm.Types.ITypeRef}.Equals(Ubiquity.NET.Llvm.Types.ITypeRef)
  commentId: M:System.IEquatable{Ubiquity.NET.Llvm.Types.ITypeRef}.Equals(Ubiquity.NET.Llvm.Types.ITypeRef)
  parent: System.IEquatable{Ubiquity.NET.Llvm.Types.ITypeRef}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(ITypeRef)
  nameWithType: IEquatable<ITypeRef>.Equals(ITypeRef)
  fullName: System.IEquatable<Ubiquity.NET.Llvm.Types.ITypeRef>.Equals(Ubiquity.NET.Llvm.Types.ITypeRef)
  nameWithType.vb: IEquatable(Of ITypeRef).Equals(ITypeRef)
  fullName.vb: System.IEquatable(Of Ubiquity.NET.Llvm.Types.ITypeRef).Equals(Ubiquity.NET.Llvm.Types.ITypeRef)
  spec.csharp:
  - uid: System.IEquatable{Ubiquity.NET.Llvm.Types.ITypeRef}.Equals(Ubiquity.NET.Llvm.Types.ITypeRef)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: )
  spec.vb:
  - uid: System.IEquatable{Ubiquity.NET.Llvm.Types.ITypeRef}.Equals(Ubiquity.NET.Llvm.Types.ITypeRef)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: )
- uid: Ubiquity.NET.Llvm.Types
  commentId: N:Ubiquity.NET.Llvm.Types
  href: Ubiquity.html
  name: Ubiquity.NET.Llvm.Types
  nameWithType: Ubiquity.NET.Llvm.Types
  fullName: Ubiquity.NET.Llvm.Types
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.Types
    name: Types
    href: Ubiquity.NET.Llvm.Types.html
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.Types
    name: Types
    href: Ubiquity.NET.Llvm.Types.html
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
- uid: System.IEquatable{Ubiquity.NET.Llvm.Types.ITypeRef}
  commentId: T:System.IEquatable{Ubiquity.NET.Llvm.Types.ITypeRef}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<ITypeRef>
  nameWithType: IEquatable<ITypeRef>
  fullName: System.IEquatable<Ubiquity.NET.Llvm.Types.ITypeRef>
  nameWithType.vb: IEquatable(Of ITypeRef)
  fullName.vb: System.IEquatable(Of Ubiquity.NET.Llvm.Types.ITypeRef)
  name.vb: IEquatable(Of ITypeRef)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.NativeType*
  commentId: Overload:Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.NativeType
  href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html#Ubiquity_NET_Llvm_DebugInfo_IDebugType_2_NativeType
  name: NativeType
  nameWithType: IDebugType<TNative, TDebug>.NativeType
  fullName: Ubiquity.NET.Llvm.DebugInfo.IDebugType<TNative, TDebug>.NativeType
  nameWithType.vb: IDebugType(Of TNative, TDebug).NativeType
  fullName.vb: Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of TNative, TDebug).NativeType
- uid: '{TNative}'
  commentId: '!:TNative'
  definition: TNative
  name: TNative
  nameWithType: TNative
  fullName: TNative
- uid: TNative
  name: TNative
  nameWithType: TNative
  fullName: TNative
- uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.DebugInfoType*
  commentId: Overload:Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.DebugInfoType
  href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html#Ubiquity_NET_Llvm_DebugInfo_IDebugType_2_DebugInfoType
  name: DebugInfoType
  nameWithType: IDebugType<TNative, TDebug>.DebugInfoType
  fullName: Ubiquity.NET.Llvm.DebugInfo.IDebugType<TNative, TDebug>.DebugInfoType
  nameWithType.vb: IDebugType(Of TNative, TDebug).DebugInfoType
  fullName.vb: Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of TNative, TDebug).DebugInfoType
- uid: '{TDebug}'
  commentId: '!:TDebug'
  definition: TDebug
  name: TDebug
  nameWithType: TDebug
  fullName: TDebug
- uid: TDebug
  name: TDebug
  nameWithType: TDebug
  fullName: TDebug
- uid: Ubiquity.NET.Llvm.DebugInfo.DebugPointerType
  commentId: T:Ubiquity.NET.Llvm.DebugInfo.DebugPointerType
  parent: Ubiquity.NET.Llvm.DebugInfo
  href: Ubiquity.NET.Llvm.DebugInfo.DebugPointerType.html
  name: DebugPointerType
  nameWithType: DebugPointerType
  fullName: Ubiquity.NET.Llvm.DebugInfo.DebugPointerType
- uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.CreatePointerType*
  commentId: Overload:Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.CreatePointerType
  href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html#Ubiquity_NET_Llvm_DebugInfo_IDebugType_2_CreatePointerType_Ubiquity_NET_Llvm_DebugInfo_DIBuilder__System_UInt32_
  name: CreatePointerType
  nameWithType: IDebugType<TNative, TDebug>.CreatePointerType
  fullName: Ubiquity.NET.Llvm.DebugInfo.IDebugType<TNative, TDebug>.CreatePointerType
  nameWithType.vb: IDebugType(Of TNative, TDebug).CreatePointerType
  fullName.vb: Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of TNative, TDebug).CreatePointerType
- uid: Ubiquity.NET.Llvm.DebugInfo.DIBuilder
  commentId: T:Ubiquity.NET.Llvm.DebugInfo.DIBuilder
  parent: Ubiquity.NET.Llvm.DebugInfo
  href: Ubiquity.NET.Llvm.DebugInfo.DIBuilder.html
  name: DIBuilder
  nameWithType: DIBuilder
  fullName: Ubiquity.NET.Llvm.DebugInfo.DIBuilder
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint32
  name: uint
  nameWithType: uint
  fullName: uint
  nameWithType.vb: UInteger
  fullName.vb: UInteger
  name.vb: UInteger
- uid: Ubiquity.NET.Llvm.DebugInfo.DebugArrayType
  commentId: T:Ubiquity.NET.Llvm.DebugInfo.DebugArrayType
  parent: Ubiquity.NET.Llvm.DebugInfo
  href: Ubiquity.NET.Llvm.DebugInfo.DebugArrayType.html
  name: DebugArrayType
  nameWithType: DebugArrayType
  fullName: Ubiquity.NET.Llvm.DebugInfo.DebugArrayType
- uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.CreateArrayType*
  commentId: Overload:Ubiquity.NET.Llvm.DebugInfo.IDebugType`2.CreateArrayType
  href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html#Ubiquity_NET_Llvm_DebugInfo_IDebugType_2_CreateArrayType_Ubiquity_NET_Llvm_DebugInfo_DIBuilder__System_UInt32_System_UInt32_
  name: CreateArrayType
  nameWithType: IDebugType<TNative, TDebug>.CreateArrayType
  fullName: Ubiquity.NET.Llvm.DebugInfo.IDebugType<TNative, TDebug>.CreateArrayType
  nameWithType.vb: IDebugType(Of TNative, TDebug).CreateArrayType
  fullName.vb: Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of TNative, TDebug).CreateArrayType
