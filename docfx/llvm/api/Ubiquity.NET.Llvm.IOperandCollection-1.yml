### YamlMime:ManagedReference
items:
- uid: Ubiquity.NET.Llvm.IOperandCollection`1
  commentId: T:Ubiquity.NET.Llvm.IOperandCollection`1
  id: IOperandCollection`1
  parent: Ubiquity.NET.Llvm
  children:
  - Ubiquity.NET.Llvm.IOperandCollection`1.Contains(`0)
  - Ubiquity.NET.Llvm.IOperandCollection`1.Item(System.Int32)
  - Ubiquity.NET.Llvm.IOperandCollection`1.Slice(System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: IOperandCollection<T>
  nameWithType: IOperandCollection<T>
  fullName: Ubiquity.NET.Llvm.IOperandCollection<T>
  type: Interface
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IOperandCollection.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: IOperandCollection
    path: ../src/Ubiquity.NET.Llvm/IOperandCollection.cs
    startLine: 17
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Interface for a fixed shape collection of operands
  remarks: >-
    This interface describes a subset of the behavior of <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref>

    and <xref href="System.Collections.Generic.IList%601" data-throw-if-not-resolved="false"></xref> along with an extension of the behavior of <xref href="System.Collections.Generic.IReadOnlyList%601" data-throw-if-not-resolved="false"></xref>.

    The semantics are a collection where the size/shape is not mutable, however the

    individual members are. That is the container does not support adding or removing

    elements, but does allow replacing existing elements.
  example: []
  syntax:
    content: 'public interface IOperandCollection<T> : IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable'
    typeParameters:
    - id: T
      description: Type of elements in the container
    content.vb: Public Interface IOperandCollection(Of T) Inherits IReadOnlyCollection(Of T), IEnumerable(Of T), IEnumerable
  inheritedMembers:
  - System.Collections.Generic.IReadOnlyCollection{{T}}.Count
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  nameWithType.vb: IOperandCollection(Of T)
  fullName.vb: Ubiquity.NET.Llvm.IOperandCollection(Of T)
  name.vb: IOperandCollection(Of T)
- uid: Ubiquity.NET.Llvm.IOperandCollection`1.Item(System.Int32)
  commentId: P:Ubiquity.NET.Llvm.IOperandCollection`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: Ubiquity.NET.Llvm.IOperandCollection`1
  langs:
  - csharp
  - vb
  name: this[int]
  nameWithType: IOperandCollection<T>.this[int]
  fullName: Ubiquity.NET.Llvm.IOperandCollection<T>.this[int]
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IOperandCollection.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: this[]
    path: ../src/Ubiquity.NET.Llvm/IOperandCollection.cs
    startLine: 23
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets or sets the specified element in the collection
  example: []
  syntax:
    content: T this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: index of the element in the collection
    return:
      type: '{T}'
      description: The element in the collection
    content.vb: Default Property this[](index As Integer) As T
  overload: Ubiquity.NET.Llvm.IOperandCollection`1.Item*
  nameWithType.vb: IOperandCollection(Of T).this[](Integer)
  fullName.vb: Ubiquity.NET.Llvm.IOperandCollection(Of T).this[](Integer)
  name.vb: this[](Integer)
- uid: Ubiquity.NET.Llvm.IOperandCollection`1.Contains(`0)
  commentId: M:Ubiquity.NET.Llvm.IOperandCollection`1.Contains(`0)
  id: Contains(`0)
  parent: Ubiquity.NET.Llvm.IOperandCollection`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: IOperandCollection<T>.Contains(T)
  fullName: Ubiquity.NET.Llvm.IOperandCollection<T>.Contains(T)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IOperandCollection.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Contains
    path: ../src/Ubiquity.NET.Llvm/IOperandCollection.cs
    startLine: 28
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets a value indicating whether the collection contains the specified item or not
  example: []
  syntax:
    content: bool Contains(T item)
    parameters:
    - id: item
      type: '{T}'
      description: Item to look for
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the item is found
    content.vb: Function Contains(item As T) As Boolean
  overload: Ubiquity.NET.Llvm.IOperandCollection`1.Contains*
  nameWithType.vb: IOperandCollection(Of T).Contains(T)
  fullName.vb: Ubiquity.NET.Llvm.IOperandCollection(Of T).Contains(T)
- uid: Ubiquity.NET.Llvm.IOperandCollection`1.Slice(System.Int32,System.Int32)
  commentId: M:Ubiquity.NET.Llvm.IOperandCollection`1.Slice(System.Int32,System.Int32)
  id: Slice(System.Int32,System.Int32)
  parent: Ubiquity.NET.Llvm.IOperandCollection`1
  langs:
  - csharp
  - vb
  name: Slice(int, int)
  nameWithType: IOperandCollection<T>.Slice(int, int)
  fullName: Ubiquity.NET.Llvm.IOperandCollection<T>.Slice(int, int)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IOperandCollection.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Slice
    path: ../src/Ubiquity.NET.Llvm/IOperandCollection.cs
    startLine: 34
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Creates a slice of the collection
  example: []
  syntax:
    content: IOperandCollection<T> Slice(int start, int end)
    parameters:
    - id: start
      type: System.Int32
      description: Inclusive start index for the slice
    - id: end
      type: System.Int32
      description: Exclusive end index for the slice
    return:
      type: Ubiquity.NET.Llvm.IOperandCollection`1
      description: Slice of the collection
    content.vb: Function Slice(start As Integer, [end] As Integer) As IOperandCollection(Of T)
  overload: Ubiquity.NET.Llvm.IOperandCollection`1.Slice*
  nameWithType.vb: IOperandCollection(Of T).Slice(Integer, Integer)
  fullName.vb: Ubiquity.NET.Llvm.IOperandCollection(Of T).Slice(Integer, Integer)
  name.vb: Slice(Integer, Integer)
references:
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Ubiquity.NET.Llvm
  commentId: N:Ubiquity.NET.Llvm
  href: Ubiquity.html
  name: Ubiquity.NET.Llvm
  nameWithType: Ubiquity.NET.Llvm
  fullName: Ubiquity.NET.Llvm
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}.Count
  commentId: P:System.Collections.Generic.IReadOnlyCollection{`0}.Count
  parent: System.Collections.Generic.IReadOnlyCollection{{T}}
  definition: System.Collections.Generic.IReadOnlyCollection`1.Count
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1.count
  name: Count
  nameWithType: IReadOnlyCollection<T>.Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  nameWithType.vb: IReadOnlyCollection(Of T).Count
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable{`0}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable{`0}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IReadOnlyCollection`1.Count
  commentId: P:System.Collections.Generic.IReadOnlyCollection`1.Count
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1.count
  name: Count
  nameWithType: IReadOnlyCollection<T>.Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  nameWithType.vb: IReadOnlyCollection(Of T).Count
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Ubiquity.NET.Llvm.IOperandCollection`1.Item*
  commentId: Overload:Ubiquity.NET.Llvm.IOperandCollection`1.Item
  href: Ubiquity.NET.Llvm.IOperandCollection-1.html#Ubiquity_NET_Llvm_IOperandCollection_1_Item_System_Int32_
  name: this
  nameWithType: IOperandCollection<T>.this
  fullName: Ubiquity.NET.Llvm.IOperandCollection<T>.this
  nameWithType.vb: IOperandCollection(Of T).this[]
  fullName.vb: Ubiquity.NET.Llvm.IOperandCollection(Of T).this[]
  name.vb: this[]
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Ubiquity.NET.Llvm.IOperandCollection`1.Contains*
  commentId: Overload:Ubiquity.NET.Llvm.IOperandCollection`1.Contains
  href: Ubiquity.NET.Llvm.IOperandCollection-1.html#Ubiquity_NET_Llvm_IOperandCollection_1_Contains__0_
  name: Contains
  nameWithType: IOperandCollection<T>.Contains
  fullName: Ubiquity.NET.Llvm.IOperandCollection<T>.Contains
  nameWithType.vb: IOperandCollection(Of T).Contains
  fullName.vb: Ubiquity.NET.Llvm.IOperandCollection(Of T).Contains
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Ubiquity.NET.Llvm.IOperandCollection`1.Slice*
  commentId: Overload:Ubiquity.NET.Llvm.IOperandCollection`1.Slice
  href: Ubiquity.NET.Llvm.IOperandCollection-1.html#Ubiquity_NET_Llvm_IOperandCollection_1_Slice_System_Int32_System_Int32_
  name: Slice
  nameWithType: IOperandCollection<T>.Slice
  fullName: Ubiquity.NET.Llvm.IOperandCollection<T>.Slice
  nameWithType.vb: IOperandCollection(Of T).Slice
  fullName.vb: Ubiquity.NET.Llvm.IOperandCollection(Of T).Slice
- uid: Ubiquity.NET.Llvm.IOperandCollection`1
  commentId: T:Ubiquity.NET.Llvm.IOperandCollection`1
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.IOperandCollection-1.html
  name: IOperandCollection<T>
  nameWithType: IOperandCollection<T>
  fullName: Ubiquity.NET.Llvm.IOperandCollection<T>
  nameWithType.vb: IOperandCollection(Of T)
  fullName.vb: Ubiquity.NET.Llvm.IOperandCollection(Of T)
  name.vb: IOperandCollection(Of T)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.IOperandCollection`1
    name: IOperandCollection
    href: Ubiquity.NET.Llvm.IOperandCollection-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Ubiquity.NET.Llvm.IOperandCollection`1
    name: IOperandCollection
    href: Ubiquity.NET.Llvm.IOperandCollection-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
