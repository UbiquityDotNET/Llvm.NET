### YamlMime:ManagedReference
items:
- uid: Ubiquity.NET.Llvm.Values.CallingConvention
  commentId: T:Ubiquity.NET.Llvm.Values.CallingConvention
  id: CallingConvention
  parent: Ubiquity.NET.Llvm.Values
  children:
  - Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuComputeShader
  - Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuEs
  - Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuGeometryShader
  - Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuHullShader
  - Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuKernel
  - Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuLS
  - Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuPixelShader
  - Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuVertexShader
  - Ubiquity.NET.Llvm.Values.CallingConvention.AVRBuiltIn
  - Ubiquity.NET.Llvm.Values.CallingConvention.AVRInterrupt
  - Ubiquity.NET.Llvm.Values.CallingConvention.AVRSignal
  - Ubiquity.NET.Llvm.Values.CallingConvention.AnyReg
  - Ubiquity.NET.Llvm.Values.CallingConvention.ArmAAPCS
  - Ubiquity.NET.Llvm.Values.CallingConvention.ArmAAPCSVfp
  - Ubiquity.NET.Llvm.Values.CallingConvention.ArmAPCS
  - Ubiquity.NET.Llvm.Values.CallingConvention.C
  - Ubiquity.NET.Llvm.Values.CallingConvention.ColdCall
  - Ubiquity.NET.Llvm.Values.CallingConvention.CxxFastTls
  - Ubiquity.NET.Llvm.Values.CallingConvention.FastCall
  - Ubiquity.NET.Llvm.Values.CallingConvention.FirstTargetSpecific
  - Ubiquity.NET.Llvm.Values.CallingConvention.GlasgowHaskellCompiler
  - Ubiquity.NET.Llvm.Values.CallingConvention.HHVM
  - Ubiquity.NET.Llvm.Values.CallingConvention.HHVMCCall
  - Ubiquity.NET.Llvm.Values.CallingConvention.HiPE
  - Ubiquity.NET.Llvm.Values.CallingConvention.IntelOpenCLBuiltIn
  - Ubiquity.NET.Llvm.Values.CallingConvention.MSP430BuiltIn
  - Ubiquity.NET.Llvm.Values.CallingConvention.MSP430Interrupt
  - Ubiquity.NET.Llvm.Values.CallingConvention.MaxCallingConvention
  - Ubiquity.NET.Llvm.Values.CallingConvention.PreserveAll
  - Ubiquity.NET.Llvm.Values.CallingConvention.PreserveMost
  - Ubiquity.NET.Llvm.Values.CallingConvention.PtxDevice
  - Ubiquity.NET.Llvm.Values.CallingConvention.PtxKernel
  - Ubiquity.NET.Llvm.Values.CallingConvention.SpirFunction
  - Ubiquity.NET.Llvm.Values.CallingConvention.SpirKernel
  - Ubiquity.NET.Llvm.Values.CallingConvention.Swift
  - Ubiquity.NET.Llvm.Values.CallingConvention.WebKitJS
  - Ubiquity.NET.Llvm.Values.CallingConvention.X86FastCall
  - Ubiquity.NET.Llvm.Values.CallingConvention.X86Interrupt
  - Ubiquity.NET.Llvm.Values.CallingConvention.X86RegCall
  - Ubiquity.NET.Llvm.Values.CallingConvention.X86StdCall
  - Ubiquity.NET.Llvm.Values.CallingConvention.X86ThisCall
  - Ubiquity.NET.Llvm.Values.CallingConvention.X86VectorCall
  - Ubiquity.NET.Llvm.Values.CallingConvention.X86x64SysV
  - Ubiquity.NET.Llvm.Values.CallingConvention.X86x64Win64
  langs:
  - csharp
  - vb
  name: CallingConvention
  nameWithType: CallingConvention
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention
  type: Enum
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: CallingConvention
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 24
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Calling Convention for functions
  example: []
  syntax:
    content: public enum CallingConvention
    content.vb: Public Enum CallingConvention
  seealso:
  - linkType: HRef
    linkId: xref:llvm_langref#calling-conventions
    altText: LLVM calling conventions
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.C
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.C
  id: C
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: C
  nameWithType: CallingConvention.C
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.C
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: C
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 32
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: The default llvm calling convention, compatible with C
  remarks: >-
    This convention is the only calling convention that supports varargs calls.

    As with typical C calling conventions, the callee/caller have to

    tolerate certain amounts of prototype mismatch
  example: []
  syntax:
    content: C = 0
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.FastCall
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.FastCall
  id: FastCall
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: FastCall
  nameWithType: CallingConvention.FastCall
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.FastCall
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: FastCall
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 37
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Fast calling convention
  example: []
  syntax:
    content: FastCall = 8
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.ColdCall
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.ColdCall
  id: ColdCall
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: ColdCall
  nameWithType: CallingConvention.ColdCall
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.ColdCall
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: ColdCall
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 40
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Cold calling
  example: []
  syntax:
    content: ColdCall = 9
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.GlasgowHaskellCompiler
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.GlasgowHaskellCompiler
  id: GlasgowHaskellCompiler
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: GlasgowHaskellCompiler
  nameWithType: CallingConvention.GlasgowHaskellCompiler
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.GlasgowHaskellCompiler
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: GlasgowHaskellCompiler
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 43
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Glasgow Haskell Compiler
  example: []
  syntax:
    content: GlasgowHaskellCompiler = 10
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.HiPE
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.HiPE
  id: HiPE
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: HiPE
  nameWithType: CallingConvention.HiPE
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.HiPE
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: HiPE
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 46
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: The High=Performance Erlang convention
  example: []
  syntax:
    content: HiPE = 11
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.WebKitJS
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.WebKitJS
  id: WebKitJS
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: WebKitJS
  nameWithType: CallingConvention.WebKitJS
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.WebKitJS
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: WebKitJS
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 49
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Webkit JavaScript calling convention
  example: []
  syntax:
    content: WebKitJS = 12
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.AnyReg
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.AnyReg
  id: AnyReg
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: AnyReg
  nameWithType: CallingConvention.AnyReg
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.AnyReg
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AnyReg
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 52
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Calling convention for dynamic register based calls (e.g.stackmap and patchpoint intrinsics)
  example: []
  syntax:
    content: AnyReg = 13
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.PreserveMost
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.PreserveMost
  id: PreserveMost
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: PreserveMost
  nameWithType: CallingConvention.PreserveMost
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.PreserveMost
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: PreserveMost
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 55
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Preserve most calling convention for runtime calls that preserves most registers.
  example: []
  syntax:
    content: PreserveMost = 14
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.PreserveAll
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.PreserveAll
  id: PreserveAll
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: PreserveAll
  nameWithType: CallingConvention.PreserveAll
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.PreserveAll
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: PreserveAll
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 58
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Preserve all calling convention for runtime calls that preserves (almost) all registers.
  example: []
  syntax:
    content: PreserveAll = 15
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.Swift
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.Swift
  id: Swift
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: Swift
  nameWithType: CallingConvention.Swift
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.Swift
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Swift
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 61
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Swift calling convention
  example: []
  syntax:
    content: Swift = 16
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.CxxFastTls
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.CxxFastTls
  id: CxxFastTls
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: CxxFastTls
  nameWithType: CallingConvention.CxxFastTls
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.CxxFastTls
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: CxxFastTls
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 64
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Calling convention for access functions.
  example: []
  syntax:
    content: CxxFastTls = 17
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.FirstTargetSpecific
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.FirstTargetSpecific
  id: FirstTargetSpecific
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: FirstTargetSpecific
  nameWithType: CallingConvention.FirstTargetSpecific
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.FirstTargetSpecific
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: FirstTargetSpecific
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 69
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Marker enum that identifies the start of the target specific conventions all values greater than or equal to this value are target specific
  example: []
  syntax:
    content: FirstTargetSpecific = 64
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.X86StdCall
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.X86StdCall
  id: X86StdCall
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: X86StdCall
  nameWithType: CallingConvention.X86StdCall
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.X86StdCall
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: X86StdCall
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 77
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: X86 stdcall convention
  remarks: >-
    This calling convention is mostly used by the Win32 API. It is basically the same as the C

    convention with the difference in that the callee is responsible for popping the arguments

    from the stack.
  example: []
  syntax:
    content: X86StdCall = 64
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.X86FastCall
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.X86FastCall
  id: X86FastCall
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: X86FastCall
  nameWithType: CallingConvention.X86FastCall
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.X86FastCall
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: X86FastCall
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 85
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: X86 fast call convention
  remarks: "'fast' analog of <xref href=\"Ubiquity.NET.Llvm.Values.CallingConvention.X86StdCall\" data-throw-if-not-resolved=\"false\"></xref>. Passes first two arguments\r\nin ECX:EDX registers, others - via stack. Callee is responsible for\r\nstack cleaning."
  example: []
  syntax:
    content: X86FastCall = 65
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.ArmAPCS
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.ArmAPCS
  id: ArmAPCS
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: ArmAPCS
  nameWithType: CallingConvention.ArmAPCS
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.ArmAPCS
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: ArmAPCS
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 88
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: ARM APCS (officially obsolete but some old targets use it)
  example: []
  syntax:
    content: ArmAPCS = 66
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.ArmAAPCS
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.ArmAAPCS
  id: ArmAAPCS
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: ArmAAPCS
  nameWithType: CallingConvention.ArmAAPCS
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.ArmAAPCS
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: ArmAAPCS
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 91
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: ARM Architecture Procedure Calling Standard calling convention (aka EABI). Soft float variant
  example: []
  syntax:
    content: ArmAAPCS = 67
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.ArmAAPCSVfp
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.ArmAAPCSVfp
  id: ArmAAPCSVfp
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: ArmAAPCSVfp
  nameWithType: CallingConvention.ArmAAPCSVfp
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.ArmAAPCSVfp
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: ArmAAPCSVfp
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 94
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Same as <xref href="Ubiquity.NET.Llvm.Values.CallingConvention.ArmAAPCS" data-throw-if-not-resolved="false"></xref> but uses hard floating point ABI
  example: []
  syntax:
    content: ArmAAPCSVfp = 68
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.MSP430Interrupt
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.MSP430Interrupt
  id: MSP430Interrupt
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: MSP430Interrupt
  nameWithType: CallingConvention.MSP430Interrupt
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.MSP430Interrupt
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: MSP430Interrupt
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 97
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Calling convention used for MSP430 interrupt routines
  example: []
  syntax:
    content: MSP430Interrupt = 69
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.X86ThisCall
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.X86ThisCall
  id: X86ThisCall
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: X86ThisCall
  nameWithType: CallingConvention.X86ThisCall
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.X86ThisCall
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: X86ThisCall
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 103
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Similar to <xref href="Ubiquity.NET.Llvm.Values.CallingConvention.X86StdCall" data-throw-if-not-resolved="false"></xref>, passes first 'this' argument in ECX all others via stack
  remarks: Callee is responsible for stack cleaning. MSVC uses this by default for C++ instance methods in its ABI
  example: []
  syntax:
    content: X86ThisCall = 70
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.PtxKernel
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.PtxKernel
  id: PtxKernel
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: PtxKernel
  nameWithType: CallingConvention.PtxKernel
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.PtxKernel
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: PtxKernel
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 107
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Call to a PTX kernel
  remarks: Passes all arguments in parameter space
  example: []
  syntax:
    content: PtxKernel = 71
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.PtxDevice
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.PtxDevice
  id: PtxDevice
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: PtxDevice
  nameWithType: CallingConvention.PtxDevice
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.PtxDevice
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: PtxDevice
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 113
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Call to a PTX device function
  remarks: Passes all arguments in register or parameter space.
  example: []
  syntax:
    content: PtxDevice = 72
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.SpirFunction
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.SpirFunction
  id: SpirFunction
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: SpirFunction
  nameWithType: CallingConvention.SpirFunction
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.SpirFunction
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: SpirFunction
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 116
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Calling convention for SPIR non-kernel device functions.
  example: []
  syntax:
    content: SpirFunction = 75
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.SpirKernel
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.SpirKernel
  id: SpirKernel
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: SpirKernel
  nameWithType: CallingConvention.SpirKernel
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.SpirKernel
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: SpirKernel
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 119
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Calling convention for SPIR kernel functions.
  example: []
  syntax:
    content: SpirKernel = 76
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.IntelOpenCLBuiltIn
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.IntelOpenCLBuiltIn
  id: IntelOpenCLBuiltIn
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: IntelOpenCLBuiltIn
  nameWithType: CallingConvention.IntelOpenCLBuiltIn
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.IntelOpenCLBuiltIn
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: IntelOpenCLBuiltIn
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 122
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Calling conventions for Intel OpenCL built-ins
  example: []
  syntax:
    content: IntelOpenCLBuiltIn = 77
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.X86x64SysV
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.X86x64SysV
  id: X86x64SysV
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: X86x64SysV
  nameWithType: CallingConvention.X86x64SysV
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.X86x64SysV
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: X86x64SysV
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 125
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: The C convention as specified in the x86-64 supplement to the System V ABI, used on most non-Windows systems.
  example: []
  syntax:
    content: X86x64SysV = 78
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.X86x64Win64
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.X86x64Win64
  id: X86x64Win64
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: X86x64Win64
  nameWithType: CallingConvention.X86x64Win64
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.X86x64Win64
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: X86x64Win64
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 134
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: The C convention as implemented on Windows/x86-64 and AArch64.
  remarks: >-
    <p>This convention differs from the more common <xref href="Ubiquity.NET.Llvm.Values.CallingConvention.X86x64SysV" data-throw-if-not-resolved="false"></xref> convention in a number of ways, most notably in

    that XMM registers used to pass arguments are shadowed by GPRs, and vice versa.</p>

    <p>On AArch64, this is identical to the normal C (AAPCS) calling convention for normal functions,

    but floats are passed in integer registers to variadic functions</p>
  example: []
  syntax:
    content: X86x64Win64 = 79
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.X86VectorCall
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.X86VectorCall
  id: X86VectorCall
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: X86VectorCall
  nameWithType: CallingConvention.X86VectorCall
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.X86VectorCall
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: X86VectorCall
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 137
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: MSVC calling convention that passes vectors and vector aggregates in SSE registers
  example: []
  syntax:
    content: X86VectorCall = 80
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.HHVM
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.HHVM
  id: HHVM
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: HHVM
  nameWithType: CallingConvention.HHVM
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.HHVM
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: HHVM
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 140
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Calling convention used by HipHop Virtual Machine (HHVM)
  example: []
  syntax:
    content: HHVM = 81
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.HHVMCCall
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.HHVMCCall
  id: HHVMCCall
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: HHVMCCall
  nameWithType: CallingConvention.HHVMCCall
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.HHVMCCall
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: HHVMCCall
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 143
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: HHVM calling convention for invoking C/C++ helpers
  example: []
  syntax:
    content: HHVMCCall = 82
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.X86Interrupt
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.X86Interrupt
  id: X86Interrupt
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: X86Interrupt
  nameWithType: CallingConvention.X86Interrupt
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.X86Interrupt
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: X86Interrupt
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 151
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: x86 hardware interrupt context
  remarks: >-
    Callee may take one or two parameters, where the 1st represents a pointer to hardware context frame

    and the 2nd represents hardware error code, the presence of the later depends on the interrupt vector

    taken. Valid for both 32- and 64-bit subtargets.
  example: []
  syntax:
    content: X86Interrupt = 83
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.AVRInterrupt
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.AVRInterrupt
  id: AVRInterrupt
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: AVRInterrupt
  nameWithType: CallingConvention.AVRInterrupt
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.AVRInterrupt
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AVRInterrupt
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 154
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Used for AVR interrupt routines
  example: []
  syntax:
    content: AVRInterrupt = 84
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.AVRSignal
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.AVRSignal
  id: AVRSignal
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: AVRSignal
  nameWithType: CallingConvention.AVRSignal
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.AVRSignal
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AVRSignal
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 157
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Calling convention used for AVR signal routines
  example: []
  syntax:
    content: AVRSignal = 85
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.AVRBuiltIn
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.AVRBuiltIn
  id: AVRBuiltIn
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: AVRBuiltIn
  nameWithType: CallingConvention.AVRBuiltIn
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.AVRBuiltIn
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AVRBuiltIn
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 160
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Calling convention used for special AVR rtlib functions which have an "optimized" convention to preserve registers.
  example: []
  syntax:
    content: AVRBuiltIn = 86
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuVertexShader
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuVertexShader
  id: AMDGpuVertexShader
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: AMDGpuVertexShader
  nameWithType: CallingConvention.AMDGpuVertexShader
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuVertexShader
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AMDGpuVertexShader
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 163
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Calling convention used for Mesa vertex shaders.
  example: []
  syntax:
    content: AMDGpuVertexShader = 87
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuGeometryShader
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuGeometryShader
  id: AMDGpuGeometryShader
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: AMDGpuGeometryShader
  nameWithType: CallingConvention.AMDGpuGeometryShader
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuGeometryShader
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AMDGpuGeometryShader
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 166
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Calling convention used for Mesa geometry shaders.
  example: []
  syntax:
    content: AMDGpuGeometryShader = 88
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuPixelShader
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuPixelShader
  id: AMDGpuPixelShader
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: AMDGpuPixelShader
  nameWithType: CallingConvention.AMDGpuPixelShader
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuPixelShader
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AMDGpuPixelShader
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 169
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Calling convention used for Mesa pixel shaders.
  example: []
  syntax:
    content: AMDGpuPixelShader = 89
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuComputeShader
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuComputeShader
  id: AMDGpuComputeShader
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: AMDGpuComputeShader
  nameWithType: CallingConvention.AMDGpuComputeShader
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuComputeShader
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AMDGpuComputeShader
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 172
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Calling convention used for Mesa compute shaders.
  example: []
  syntax:
    content: AMDGpuComputeShader = 90
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuKernel
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuKernel
  id: AMDGpuKernel
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: AMDGpuKernel
  nameWithType: CallingConvention.AMDGpuKernel
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuKernel
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AMDGpuKernel
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 175
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Calling convention for AMDGPU code object kernels.
  example: []
  syntax:
    content: AMDGpuKernel = 91
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.X86RegCall
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.X86RegCall
  id: X86RegCall
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: X86RegCall
  nameWithType: CallingConvention.X86RegCall
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.X86RegCall
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: X86RegCall
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 178
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Register calling convention used for parameters transfer optimization
  example: []
  syntax:
    content: X86RegCall = 92
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuHullShader
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuHullShader
  id: AMDGpuHullShader
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: AMDGpuHullShader
  nameWithType: CallingConvention.AMDGpuHullShader
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuHullShader
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AMDGpuHullShader
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 181
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Calling convention used for Mesa hull shaders. (= tessellation control shaders)
  example: []
  syntax:
    content: AMDGpuHullShader = 93
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.MSP430BuiltIn
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.MSP430BuiltIn
  id: MSP430BuiltIn
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: MSP430BuiltIn
  nameWithType: CallingConvention.MSP430BuiltIn
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.MSP430BuiltIn
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: MSP430BuiltIn
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 184
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Calling convention used for special MSP430 rtlib functions which have an "optimized" convention using additional registers.
  example: []
  syntax:
    content: MSP430BuiltIn = 94
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuLS
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuLS
  id: AMDGpuLS
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: AMDGpuLS
  nameWithType: CallingConvention.AMDGpuLS
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuLS
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AMDGpuLS
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 187
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Calling convention used for AMDPAL vertex shader if tessellation is in use.
  example: []
  syntax:
    content: AMDGpuLS = 95
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuEs
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuEs
  id: AMDGpuEs
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: AMDGpuEs
  nameWithType: CallingConvention.AMDGpuEs
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.AMDGpuEs
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AMDGpuEs
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 193
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: Calling convention used for AMDPAL shader stage before geometry shader if geometry is in use.
  remarks: Either the domain (= tessellation evaluation) shader if tessellation is in use, or otherwise the vertex shader.
  example: []
  syntax:
    content: AMDGpuEs = 96
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.MaxCallingConvention
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.MaxCallingConvention
  id: MaxCallingConvention
  parent: Ubiquity.NET.Llvm.Values.CallingConvention
  langs:
  - csharp
  - vb
  name: MaxCallingConvention
  nameWithType: CallingConvention.MaxCallingConvention
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.MaxCallingConvention
  type: Field
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/Values/Function.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: MaxCallingConvention
    path: ../src/Ubiquity.NET.Llvm/Values/Function.cs
    startLine: 196
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm.Values
  summary: The highest possible calling convention ID. Must be some 2^k - 1.
  example: []
  syntax:
    content: MaxCallingConvention = 1023
    return:
      type: Ubiquity.NET.Llvm.Values.CallingConvention
references:
- uid: Ubiquity.NET.Llvm.Values
  commentId: N:Ubiquity.NET.Llvm.Values
  href: Ubiquity.html
  name: Ubiquity.NET.Llvm.Values
  nameWithType: Ubiquity.NET.Llvm.Values
  fullName: Ubiquity.NET.Llvm.Values
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.Values
    name: Values
    href: Ubiquity.NET.Llvm.Values.html
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.Values
    name: Values
    href: Ubiquity.NET.Llvm.Values.html
- uid: Ubiquity.NET.Llvm.Values.CallingConvention
  commentId: T:Ubiquity.NET.Llvm.Values.CallingConvention
  parent: Ubiquity.NET.Llvm.Values
  href: Ubiquity.NET.Llvm.Values.CallingConvention.html
  name: CallingConvention
  nameWithType: CallingConvention
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.X86StdCall
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.X86StdCall
  href: Ubiquity.NET.Llvm.Values.CallingConvention.html#Ubiquity_NET_Llvm_Values_CallingConvention_X86StdCall
  name: X86StdCall
  nameWithType: CallingConvention.X86StdCall
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.X86StdCall
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.ArmAAPCS
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.ArmAAPCS
  href: Ubiquity.NET.Llvm.Values.CallingConvention.html#Ubiquity_NET_Llvm_Values_CallingConvention_ArmAAPCS
  name: ArmAAPCS
  nameWithType: CallingConvention.ArmAAPCS
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.ArmAAPCS
- uid: Ubiquity.NET.Llvm.Values.CallingConvention.X86x64SysV
  commentId: F:Ubiquity.NET.Llvm.Values.CallingConvention.X86x64SysV
  href: Ubiquity.NET.Llvm.Values.CallingConvention.html#Ubiquity_NET_Llvm_Values_CallingConvention_X86x64SysV
  name: X86x64SysV
  nameWithType: CallingConvention.X86x64SysV
  fullName: Ubiquity.NET.Llvm.Values.CallingConvention.X86x64SysV
