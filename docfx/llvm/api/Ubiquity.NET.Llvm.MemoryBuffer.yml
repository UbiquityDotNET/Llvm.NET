### YamlMime:ManagedReference
items:
- uid: Ubiquity.NET.Llvm.MemoryBuffer
  commentId: T:Ubiquity.NET.Llvm.MemoryBuffer
  id: MemoryBuffer
  parent: Ubiquity.NET.Llvm
  children:
  - Ubiquity.NET.Llvm.MemoryBuffer.#ctor(System.Byte*,Ubiquity.NET.InteropHelpers.size_t,Ubiquity.NET.InteropHelpers.LazyEncodedString,System.Boolean)
  - Ubiquity.NET.Llvm.MemoryBuffer.#ctor(System.Byte[],System.String)
  - Ubiquity.NET.Llvm.MemoryBuffer.#ctor(System.String)
  - Ubiquity.NET.Llvm.MemoryBuffer.Dispose
  - Ubiquity.NET.Llvm.MemoryBuffer.IsDisposed
  - Ubiquity.NET.Llvm.MemoryBuffer.Size
  - Ubiquity.NET.Llvm.MemoryBuffer.Slice(System.Int32,System.Int32)
  - Ubiquity.NET.Llvm.MemoryBuffer.ToArray
  - Ubiquity.NET.Llvm.MemoryBuffer.op_Implicit(Ubiquity.NET.Llvm.MemoryBuffer)~System.ReadOnlySpan{System.Byte}
  langs:
  - csharp
  - vb
  name: MemoryBuffer
  nameWithType: MemoryBuffer
  fullName: Ubiquity.NET.Llvm.MemoryBuffer
  type: Class
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/MemoryBuffer.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: MemoryBuffer
    path: ../src/Ubiquity.NET.Llvm/MemoryBuffer.cs
    startLine: 9
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: LLVM MemoryBuffer
  example: []
  syntax:
    content: 'public sealed class MemoryBuffer : IDisposable'
    content.vb: Public NotInheritable Class MemoryBuffer Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Ubiquity.NET.Llvm.MemoryBuffer.IsDisposed
  commentId: P:Ubiquity.NET.Llvm.MemoryBuffer.IsDisposed
  id: IsDisposed
  parent: Ubiquity.NET.Llvm.MemoryBuffer
  langs:
  - csharp
  - vb
  name: IsDisposed
  nameWithType: MemoryBuffer.IsDisposed
  fullName: Ubiquity.NET.Llvm.MemoryBuffer.IsDisposed
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/MemoryBuffer.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: IsDisposed
    path: ../src/Ubiquity.NET.Llvm/MemoryBuffer.cs
    startLine: 13
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets a value indicating whether this instance is disposed
  example: []
  syntax:
    content: public bool IsDisposed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsDisposed As Boolean
  overload: Ubiquity.NET.Llvm.MemoryBuffer.IsDisposed*
- uid: Ubiquity.NET.Llvm.MemoryBuffer.#ctor(System.String)
  commentId: M:Ubiquity.NET.Llvm.MemoryBuffer.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Ubiquity.NET.Llvm.MemoryBuffer
  langs:
  - csharp
  - vb
  name: MemoryBuffer(string)
  nameWithType: MemoryBuffer.MemoryBuffer(string)
  fullName: Ubiquity.NET.Llvm.MemoryBuffer.MemoryBuffer(string)
  type: Constructor
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/MemoryBuffer.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: .ctor
    path: ../src/Ubiquity.NET.Llvm/MemoryBuffer.cs
    startLine: 17
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Initializes a new instance of the <xref href="Ubiquity.NET.Llvm.MemoryBuffer" data-throw-if-not-resolved="false"></xref> class from a file
  example: []
  syntax:
    content: public MemoryBuffer(string path)
    parameters:
    - id: path
      type: System.String
      description: Path of the file to load
    content.vb: Public Sub New(path As String)
  overload: Ubiquity.NET.Llvm.MemoryBuffer.#ctor*
  nameWithType.vb: MemoryBuffer.New(String)
  fullName.vb: Ubiquity.NET.Llvm.MemoryBuffer.New(String)
  name.vb: New(String)
- uid: Ubiquity.NET.Llvm.MemoryBuffer.#ctor(System.Byte[],System.String)
  commentId: M:Ubiquity.NET.Llvm.MemoryBuffer.#ctor(System.Byte[],System.String)
  id: '#ctor(System.Byte[],System.String)'
  parent: Ubiquity.NET.Llvm.MemoryBuffer
  langs:
  - csharp
  - vb
  name: MemoryBuffer(byte[], string?)
  nameWithType: MemoryBuffer.MemoryBuffer(byte[], string?)
  fullName: Ubiquity.NET.Llvm.MemoryBuffer.MemoryBuffer(byte[], string?)
  type: Constructor
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/MemoryBuffer.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: .ctor
    path: ../src/Ubiquity.NET.Llvm/MemoryBuffer.cs
    startLine: 39
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Initializes a new instance of the <xref href="Ubiquity.NET.Llvm.MemoryBuffer" data-throw-if-not-resolved="false"></xref> class from a byte array
  remarks: >-
    This constructor makes a copy of the data array as a <xref href="Ubiquity.NET.Llvm.MemoryBuffer" data-throw-if-not-resolved="false"></xref> the memory in the buffer

    is unmanaged memory usable by the LLVM native code. It is released in the Dispose method
  example: []
  syntax:
    content: public MemoryBuffer(byte[] data, string? name = null)
    parameters:
    - id: data
      type: System.Byte[]
      description: Array of bytes to copy into the memory buffer
    - id: name
      type: System.String
      description: Name of the buffer (for diagnostics)
    content.vb: Public Sub New(data As Byte(), name As String = Nothing)
  overload: Ubiquity.NET.Llvm.MemoryBuffer.#ctor*
  nameWithType.vb: MemoryBuffer.New(Byte(), String)
  fullName.vb: Ubiquity.NET.Llvm.MemoryBuffer.New(Byte(), String)
  name.vb: New(Byte(), String)
- uid: Ubiquity.NET.Llvm.MemoryBuffer.#ctor(System.Byte*,Ubiquity.NET.InteropHelpers.size_t,Ubiquity.NET.InteropHelpers.LazyEncodedString,System.Boolean)
  commentId: M:Ubiquity.NET.Llvm.MemoryBuffer.#ctor(System.Byte*,Ubiquity.NET.InteropHelpers.size_t,Ubiquity.NET.InteropHelpers.LazyEncodedString,System.Boolean)
  id: '#ctor(System.Byte*,Ubiquity.NET.InteropHelpers.size_t,Ubiquity.NET.InteropHelpers.LazyEncodedString,System.Boolean)'
  parent: Ubiquity.NET.Llvm.MemoryBuffer
  langs:
  - csharp
  - vb
  name: MemoryBuffer(byte*, size_t, LazyEncodedString, bool)
  nameWithType: MemoryBuffer.MemoryBuffer(byte*, size_t, LazyEncodedString, bool)
  fullName: Ubiquity.NET.Llvm.MemoryBuffer.MemoryBuffer(byte*, Ubiquity.NET.InteropHelpers.size_t, Ubiquity.NET.InteropHelpers.LazyEncodedString, bool)
  type: Constructor
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/MemoryBuffer.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: .ctor
    path: ../src/Ubiquity.NET.Llvm/MemoryBuffer.cs
    startLine: 52
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Initializes a new instance of the <xref href="Ubiquity.NET.Llvm.MemoryBuffer" data-throw-if-not-resolved="false"></xref> class to wrap an existing memory region
  example: []
  syntax:
    content: public MemoryBuffer(byte* data, size_t len, LazyEncodedString name, bool requiresNullTerminator)
    parameters:
    - id: data
      type: System.Byte*
      description: Data for the region [Must remain valid for the entire lifetime of this instance!]
    - id: len
      type: Ubiquity.NET.InteropHelpers.size_t
      description: Length of the region
    - id: name
      type: Ubiquity.NET.InteropHelpers.LazyEncodedString
      description: Name of the buffer
    - id: requiresNullTerminator
      type: System.Boolean
      description: Indicates if the data requires a null terminator
    content.vb: Public Sub New(data As Byte*, len As size_t, name As LazyEncodedString, requiresNullTerminator As Boolean)
  overload: Ubiquity.NET.Llvm.MemoryBuffer.#ctor*
  nameWithType.vb: MemoryBuffer.New(Byte*, size_t, LazyEncodedString, Boolean)
  fullName.vb: Ubiquity.NET.Llvm.MemoryBuffer.New(Byte*, Ubiquity.NET.InteropHelpers.size_t, Ubiquity.NET.InteropHelpers.LazyEncodedString, Boolean)
  name.vb: New(Byte*, size_t, LazyEncodedString, Boolean)
- uid: Ubiquity.NET.Llvm.MemoryBuffer.Dispose
  commentId: M:Ubiquity.NET.Llvm.MemoryBuffer.Dispose
  id: Dispose
  parent: Ubiquity.NET.Llvm.MemoryBuffer
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: MemoryBuffer.Dispose()
  fullName: Ubiquity.NET.Llvm.MemoryBuffer.Dispose()
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/MemoryBuffer.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Dispose
    path: ../src/Ubiquity.NET.Llvm/MemoryBuffer.cs
    startLine: 64
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose()
  overload: Ubiquity.NET.Llvm.MemoryBuffer.Dispose*
  implements:
  - System.IDisposable.Dispose
- uid: Ubiquity.NET.Llvm.MemoryBuffer.Size
  commentId: P:Ubiquity.NET.Llvm.MemoryBuffer.Size
  id: Size
  parent: Ubiquity.NET.Llvm.MemoryBuffer
  langs:
  - csharp
  - vb
  name: Size
  nameWithType: MemoryBuffer.Size
  fullName: Ubiquity.NET.Llvm.MemoryBuffer.Size
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/MemoryBuffer.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Size
    path: ../src/Ubiquity.NET.Llvm/MemoryBuffer.cs
    startLine: 67
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the size of the buffer
  example: []
  syntax:
    content: public int Size { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Size As Integer
  overload: Ubiquity.NET.Llvm.MemoryBuffer.Size*
- uid: Ubiquity.NET.Llvm.MemoryBuffer.ToArray
  commentId: M:Ubiquity.NET.Llvm.MemoryBuffer.ToArray
  id: ToArray
  parent: Ubiquity.NET.Llvm.MemoryBuffer
  langs:
  - csharp
  - vb
  name: ToArray()
  nameWithType: MemoryBuffer.ToArray()
  fullName: Ubiquity.NET.Llvm.MemoryBuffer.ToArray()
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/MemoryBuffer.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: ToArray
    path: ../src/Ubiquity.NET.Llvm/MemoryBuffer.cs
    startLine: 71
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets an array of bytes from the buffer
  example: []
  syntax:
    content: public byte[] ToArray()
    return:
      type: System.Byte[]
      description: Array of bytes copied from the buffer
    content.vb: Public Function ToArray() As Byte()
  overload: Ubiquity.NET.Llvm.MemoryBuffer.ToArray*
- uid: Ubiquity.NET.Llvm.MemoryBuffer.op_Implicit(Ubiquity.NET.Llvm.MemoryBuffer)~System.ReadOnlySpan{System.Byte}
  commentId: M:Ubiquity.NET.Llvm.MemoryBuffer.op_Implicit(Ubiquity.NET.Llvm.MemoryBuffer)~System.ReadOnlySpan{System.Byte}
  id: op_Implicit(Ubiquity.NET.Llvm.MemoryBuffer)~System.ReadOnlySpan{System.Byte}
  parent: Ubiquity.NET.Llvm.MemoryBuffer
  langs:
  - csharp
  - vb
  name: implicit operator ReadOnlySpan<byte>(MemoryBuffer)
  nameWithType: MemoryBuffer.implicit operator ReadOnlySpan<byte>(MemoryBuffer)
  fullName: Ubiquity.NET.Llvm.MemoryBuffer.implicit operator System.ReadOnlySpan<byte>(Ubiquity.NET.Llvm.MemoryBuffer)
  type: Operator
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/MemoryBuffer.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: op_Implicit
    path: ../src/Ubiquity.NET.Llvm/MemoryBuffer.cs
    startLine: 84
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Implicit convert to a <xref href="System.ReadOnlySpan%601" data-throw-if-not-resolved="false"></xref>
  remarks: This is a simple wrapper around calling <xref href="Ubiquity.NET.Llvm.MemoryBuffer.Slice(System.Int32%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> with default parameters
  example: []
  syntax:
    content: public static implicit operator ReadOnlySpan<byte>(MemoryBuffer buffer)
    parameters:
    - id: buffer
      type: Ubiquity.NET.Llvm.MemoryBuffer
      description: Buffer to convert
    return:
      type: System.ReadOnlySpan{System.Byte}
    content.vb: Public Shared Widening Operator CType(buffer As MemoryBuffer) As ReadOnlySpan(Of Byte)
  overload: Ubiquity.NET.Llvm.MemoryBuffer.op_Implicit*
  nameWithType.vb: MemoryBuffer.CType(MemoryBuffer)
  fullName.vb: Ubiquity.NET.Llvm.MemoryBuffer.CType(Ubiquity.NET.Llvm.MemoryBuffer)
  name.vb: CType(MemoryBuffer)
- uid: Ubiquity.NET.Llvm.MemoryBuffer.Slice(System.Int32,System.Int32)
  commentId: M:Ubiquity.NET.Llvm.MemoryBuffer.Slice(System.Int32,System.Int32)
  id: Slice(System.Int32,System.Int32)
  parent: Ubiquity.NET.Llvm.MemoryBuffer
  langs:
  - csharp
  - vb
  name: Slice(int, int)
  nameWithType: MemoryBuffer.Slice(int, int)
  fullName: Ubiquity.NET.Llvm.MemoryBuffer.Slice(int, int)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/MemoryBuffer.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Slice
    path: ../src/Ubiquity.NET.Llvm/MemoryBuffer.cs
    startLine: 92
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Create a <xref href="System.ReadOnlySpan%601" data-throw-if-not-resolved="false"></xref> for a slice of the buffer
  remarks: Creates an efficient means of accessing the raw data of a buffer
  example: []
  syntax:
    content: public ReadOnlySpan<byte> Slice(int start = 0, int length = -1)
    parameters:
    - id: start
      type: System.Int32
      description: Starting index for the slice [default = 0]
    - id: length
      type: System.Int32
      description: Length of the slice or -1 to include up to the end of the buffer [default = -1]
    return:
      type: System.ReadOnlySpan{System.Byte}
      description: New Span
    content.vb: Public Function Slice(start As Integer = 0, length As Integer = -1) As ReadOnlySpan(Of Byte)
  overload: Ubiquity.NET.Llvm.MemoryBuffer.Slice*
  nameWithType.vb: MemoryBuffer.Slice(Integer, Integer)
  fullName.vb: Ubiquity.NET.Llvm.MemoryBuffer.Slice(Integer, Integer)
  name.vb: Slice(Integer, Integer)
references:
- uid: Ubiquity.NET.Llvm
  commentId: N:Ubiquity.NET.Llvm
  href: Ubiquity.html
  name: Ubiquity.NET.Llvm
  nameWithType: Ubiquity.NET.Llvm
  fullName: Ubiquity.NET.Llvm
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Ubiquity.NET.Llvm.MemoryBuffer.IsDisposed*
  commentId: Overload:Ubiquity.NET.Llvm.MemoryBuffer.IsDisposed
  href: Ubiquity.NET.Llvm.MemoryBuffer.html#Ubiquity_NET_Llvm_MemoryBuffer_IsDisposed
  name: IsDisposed
  nameWithType: MemoryBuffer.IsDisposed
  fullName: Ubiquity.NET.Llvm.MemoryBuffer.IsDisposed
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Ubiquity.NET.Llvm.MemoryBuffer
  commentId: T:Ubiquity.NET.Llvm.MemoryBuffer
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.MemoryBuffer.html
  name: MemoryBuffer
  nameWithType: MemoryBuffer
  fullName: Ubiquity.NET.Llvm.MemoryBuffer
- uid: Ubiquity.NET.Llvm.MemoryBuffer.#ctor*
  commentId: Overload:Ubiquity.NET.Llvm.MemoryBuffer.#ctor
  href: Ubiquity.NET.Llvm.MemoryBuffer.html#Ubiquity_NET_Llvm_MemoryBuffer__ctor_System_String_
  name: MemoryBuffer
  nameWithType: MemoryBuffer.MemoryBuffer
  fullName: Ubiquity.NET.Llvm.MemoryBuffer.MemoryBuffer
  nameWithType.vb: MemoryBuffer.New
  fullName.vb: Ubiquity.NET.Llvm.MemoryBuffer.New
  name.vb: New
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Byte[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
- uid: System.Byte*
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte*
  nameWithType: byte*
  fullName: byte*
  nameWithType.vb: Byte*
  fullName.vb: Byte*
  name.vb: Byte*
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '*'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '*'
- uid: Ubiquity.NET.InteropHelpers.size_t
  commentId: T:Ubiquity.NET.InteropHelpers.size_t
  parent: Ubiquity.NET.InteropHelpers
  name: size_t
  nameWithType: size_t
  fullName: Ubiquity.NET.InteropHelpers.size_t
- uid: Ubiquity.NET.InteropHelpers.LazyEncodedString
  commentId: T:Ubiquity.NET.InteropHelpers.LazyEncodedString
  parent: Ubiquity.NET.InteropHelpers
  name: LazyEncodedString
  nameWithType: LazyEncodedString
  fullName: Ubiquity.NET.InteropHelpers.LazyEncodedString
- uid: Ubiquity.NET.InteropHelpers
  commentId: N:Ubiquity.NET.InteropHelpers
  name: Ubiquity.NET.InteropHelpers
  nameWithType: Ubiquity.NET.InteropHelpers
  fullName: Ubiquity.NET.InteropHelpers
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
  - name: .
  - uid: Ubiquity.NET
    name: NET
  - name: .
  - uid: Ubiquity.NET.InteropHelpers
    name: InteropHelpers
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
  - name: .
  - uid: Ubiquity.NET
    name: NET
  - name: .
  - uid: Ubiquity.NET.InteropHelpers
    name: InteropHelpers
- uid: Ubiquity.NET.Llvm.MemoryBuffer.Dispose*
  commentId: Overload:Ubiquity.NET.Llvm.MemoryBuffer.Dispose
  href: Ubiquity.NET.Llvm.MemoryBuffer.html#Ubiquity_NET_Llvm_MemoryBuffer_Dispose
  name: Dispose
  nameWithType: MemoryBuffer.Dispose
  fullName: Ubiquity.NET.Llvm.MemoryBuffer.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
- uid: Ubiquity.NET.Llvm.MemoryBuffer.Size*
  commentId: Overload:Ubiquity.NET.Llvm.MemoryBuffer.Size
  href: Ubiquity.NET.Llvm.MemoryBuffer.html#Ubiquity_NET_Llvm_MemoryBuffer_Size
  name: Size
  nameWithType: MemoryBuffer.Size
  fullName: Ubiquity.NET.Llvm.MemoryBuffer.Size
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Ubiquity.NET.Llvm.MemoryBuffer.ToArray*
  commentId: Overload:Ubiquity.NET.Llvm.MemoryBuffer.ToArray
  href: Ubiquity.NET.Llvm.MemoryBuffer.html#Ubiquity_NET_Llvm_MemoryBuffer_ToArray
  name: ToArray
  nameWithType: MemoryBuffer.ToArray
  fullName: Ubiquity.NET.Llvm.MemoryBuffer.ToArray
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Ubiquity.NET.Llvm.MemoryBuffer.Slice(System.Int32,System.Int32)
  commentId: M:Ubiquity.NET.Llvm.MemoryBuffer.Slice(System.Int32,System.Int32)
  isExternal: true
  href: Ubiquity.NET.Llvm.MemoryBuffer.html#Ubiquity_NET_Llvm_MemoryBuffer_Slice_System_Int32_System_Int32_
  name: Slice(int, int)
  nameWithType: MemoryBuffer.Slice(int, int)
  fullName: Ubiquity.NET.Llvm.MemoryBuffer.Slice(int, int)
  nameWithType.vb: MemoryBuffer.Slice(Integer, Integer)
  fullName.vb: Ubiquity.NET.Llvm.MemoryBuffer.Slice(Integer, Integer)
  name.vb: Slice(Integer, Integer)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.MemoryBuffer.Slice(System.Int32,System.Int32)
    name: Slice
    href: Ubiquity.NET.Llvm.MemoryBuffer.html#Ubiquity_NET_Llvm_MemoryBuffer_Slice_System_Int32_System_Int32_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: Ubiquity.NET.Llvm.MemoryBuffer.Slice(System.Int32,System.Int32)
    name: Slice
    href: Ubiquity.NET.Llvm.MemoryBuffer.html#Ubiquity_NET_Llvm_MemoryBuffer_Slice_System_Int32_System_Int32_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: Ubiquity.NET.Llvm.MemoryBuffer.op_Implicit*
  commentId: Overload:Ubiquity.NET.Llvm.MemoryBuffer.op_Implicit
  name: implicit operator
  nameWithType: MemoryBuffer.implicit operator
  fullName: Ubiquity.NET.Llvm.MemoryBuffer.implicit operator
  nameWithType.vb: MemoryBuffer.CType
  fullName.vb: Ubiquity.NET.Llvm.MemoryBuffer.CType
  name.vb: CType
  spec.csharp:
  - name: implicit
  - name: " "
  - name: operator
- uid: System.ReadOnlySpan{System.Byte}
  commentId: T:System.ReadOnlySpan{System.Byte}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<byte>
  nameWithType: ReadOnlySpan<byte>
  fullName: System.ReadOnlySpan<byte>
  nameWithType.vb: ReadOnlySpan(Of Byte)
  fullName.vb: System.ReadOnlySpan(Of Byte)
  name.vb: ReadOnlySpan(Of Byte)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: Ubiquity.NET.Llvm.MemoryBuffer.Slice*
  commentId: Overload:Ubiquity.NET.Llvm.MemoryBuffer.Slice
  href: Ubiquity.NET.Llvm.MemoryBuffer.html#Ubiquity_NET_Llvm_MemoryBuffer_Slice_System_Int32_System_Int32_
  name: Slice
  nameWithType: MemoryBuffer.Slice
  fullName: Ubiquity.NET.Llvm.MemoryBuffer.Slice
