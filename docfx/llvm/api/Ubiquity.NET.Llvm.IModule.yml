### YamlMime:ManagedReference
items:
- uid: Ubiquity.NET.Llvm.IModule
  commentId: T:Ubiquity.NET.Llvm.IModule
  id: IModule
  parent: Ubiquity.NET.Llvm
  children:
  - Ubiquity.NET.Llvm.IModule.AddAlias(Ubiquity.NET.Llvm.Values.Value,System.String,System.UInt32)
  - Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
  - Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
  - Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
  - Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
  - Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
  - Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
  - Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,System.UInt32)
  - Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
  - Ubiquity.NET.Llvm.IModule.AddNamedMetadataOperand(System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
  - Ubiquity.NET.Llvm.IModule.AddVersionIdentMetadata(System.String)
  - Ubiquity.NET.Llvm.IModule.Aliases
  - Ubiquity.NET.Llvm.IModule.AppendInlineAsm(System.String)
  - Ubiquity.NET.Llvm.IModule.Clone
  - Ubiquity.NET.Llvm.IModule.Clone(Ubiquity.NET.Llvm.IContext)
  - Ubiquity.NET.Llvm.IModule.Comdats
  - Ubiquity.NET.Llvm.IModule.CompileUnits
  - Ubiquity.NET.Llvm.IModule.Context
  - Ubiquity.NET.Llvm.IModule.CreateAndAddGlobalIFunc(System.String,Ubiquity.NET.Llvm.Types.ITypeRef,System.UInt32,Ubiquity.NET.Llvm.Values.Function)
  - Ubiquity.NET.Llvm.IModule.CreateFunction(System.String,Ubiquity.NET.Llvm.Types.IFunctionType)
  - Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}})
  - Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}[])
  - Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,Ubiquity.NET.Llvm.DebugInfo.DIScope,System.String,System.String,Ubiquity.NET.Llvm.DebugInfo.DIFile,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType,System.Boolean,System.Boolean,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags,System.Boolean)
  - Ubiquity.NET.Llvm.IModule.DataLayoutString
  - Ubiquity.NET.Llvm.IModule.Functions
  - Ubiquity.NET.Llvm.IModule.GetAlias(System.String)
  - Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(System.String,Ubiquity.NET.Llvm.Types.ITypeRef[])
  - Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef[])
  - Ubiquity.NET.Llvm.IModule.GetNamedGlobal(System.String)
  - Ubiquity.NET.Llvm.IModule.GetTypeByName(System.String)
  - Ubiquity.NET.Llvm.IModule.Globals
  - Ubiquity.NET.Llvm.IModule.IndirectFunctions
  - Ubiquity.NET.Llvm.IModule.Layout
  - Ubiquity.NET.Llvm.IModule.Link(Ubiquity.NET.Llvm.Module)
  - Ubiquity.NET.Llvm.IModule.ModuleFlags
  - Ubiquity.NET.Llvm.IModule.ModuleInlineAsm
  - Ubiquity.NET.Llvm.IModule.Name
  - Ubiquity.NET.Llvm.IModule.NamedMetadata
  - Ubiquity.NET.Llvm.IModule.SourceFileName
  - Ubiquity.NET.Llvm.IModule.TargetTriple
  - Ubiquity.NET.Llvm.IModule.TryGetFunction(System.String,Ubiquity.NET.Llvm.Values.Function@)
  - Ubiquity.NET.Llvm.IModule.TryGetNamedGlobalIFunc(System.String,Ubiquity.NET.Llvm.Values.GlobalIFunc@)
  - Ubiquity.NET.Llvm.IModule.TryRunPasses(System.String[])
  - Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
  - Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.TargetMachine,Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
  - Ubiquity.NET.Llvm.IModule.Verify(System.String@)
  - Ubiquity.NET.Llvm.IModule.WriteToBuffer
  - Ubiquity.NET.Llvm.IModule.WriteToFile(System.String)
  - Ubiquity.NET.Llvm.IModule.WriteToString
  - Ubiquity.NET.Llvm.IModule.WriteToTextFile(System.String,System.String@)
  langs:
  - csharp
  - vb
  name: IModule
  nameWithType: IModule
  fullName: Ubiquity.NET.Llvm.IModule
  type: Interface
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: IModule
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 26
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Interface for an LLVM bitcode module
  remarks: >-
    This interface is used for ALL modules owned/unowned when a module is owned

    and the app must dispose it a <xref href="Ubiquity.NET.Llvm.Module" data-throw-if-not-resolved="false"></xref> instance is provided. That

    type implements this interface AND the standard <xref href="System.IDisposable" data-throw-if-not-resolved="false"></xref>

    interface as the caller is responsible for disposal of the instance. When

    this interface is returned the caller does not own the implementation and

    cannot dispose of it. (Generally only methods that act as a factory for a

    module will provide a concreate <xref href="Ubiquity.NET.Llvm.Module" data-throw-if-not-resolved="false"></xref> instance that the

    caller owns. Others are references to a module owned by the container)
  example: []
  syntax:
    content: public interface IModule
    content.vb: Public Interface IModule
- uid: Ubiquity.NET.Llvm.IModule.SourceFileName
  commentId: P:Ubiquity.NET.Llvm.IModule.SourceFileName
  id: SourceFileName
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: SourceFileName
  nameWithType: IModule.SourceFileName
  fullName: Ubiquity.NET.Llvm.IModule.SourceFileName
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: SourceFileName
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 29
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets or sets the name of the source file generating this module
  example: []
  syntax:
    content: string SourceFileName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property SourceFileName As String
  overload: Ubiquity.NET.Llvm.IModule.SourceFileName*
- uid: Ubiquity.NET.Llvm.IModule.Comdats
  commentId: P:Ubiquity.NET.Llvm.IModule.Comdats
  id: Comdats
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: Comdats
  nameWithType: IModule.Comdats
  fullName: Ubiquity.NET.Llvm.IModule.Comdats
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Comdats
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 32
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the Comdats for this module
  example: []
  syntax:
    content: ComdatCollection Comdats { get; }
    parameters: []
    return:
      type: Ubiquity.NET.Llvm.ComdatCollection
    content.vb: ReadOnly Property Comdats As ComdatCollection
  overload: Ubiquity.NET.Llvm.IModule.Comdats*
- uid: Ubiquity.NET.Llvm.IModule.Context
  commentId: P:Ubiquity.NET.Llvm.IModule.Context
  id: Context
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: IModule.Context
  fullName: Ubiquity.NET.Llvm.IModule.Context
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Context
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 35
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the <xref href="Ubiquity.NET.Llvm.IModule.Context" data-throw-if-not-resolved="false"></xref> this module belongs to
  example: []
  syntax:
    content: IContext Context { get; }
    parameters: []
    return:
      type: Ubiquity.NET.Llvm.IContext
    content.vb: ReadOnly Property Context As IContext
  overload: Ubiquity.NET.Llvm.IModule.Context*
- uid: Ubiquity.NET.Llvm.IModule.ModuleFlags
  commentId: P:Ubiquity.NET.Llvm.IModule.ModuleFlags
  id: ModuleFlags
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: ModuleFlags
  nameWithType: IModule.ModuleFlags
  fullName: Ubiquity.NET.Llvm.IModule.ModuleFlags
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: ModuleFlags
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 38
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the IrMetadata for module level flags
  example: []
  syntax:
    content: IReadOnlyDictionary<string, ModuleFlag> ModuleFlags { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{System.String,Ubiquity.NET.Llvm.Metadata.ModuleFlag}
    content.vb: ReadOnly Property ModuleFlags As IReadOnlyDictionary(Of String, ModuleFlag)
  overload: Ubiquity.NET.Llvm.IModule.ModuleFlags*
- uid: Ubiquity.NET.Llvm.IModule.CompileUnits
  commentId: P:Ubiquity.NET.Llvm.IModule.CompileUnits
  id: CompileUnits
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: CompileUnits
  nameWithType: IModule.CompileUnits
  fullName: Ubiquity.NET.Llvm.IModule.CompileUnits
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: CompileUnits
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 41
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the Debug Compile units for this module
  example: []
  syntax:
    content: IEnumerable<DICompileUnit> CompileUnits { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.DICompileUnit}
    content.vb: ReadOnly Property CompileUnits As IEnumerable(Of DICompileUnit)
  overload: Ubiquity.NET.Llvm.IModule.CompileUnits*
- uid: Ubiquity.NET.Llvm.IModule.DataLayoutString
  commentId: P:Ubiquity.NET.Llvm.IModule.DataLayoutString
  id: DataLayoutString
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: DataLayoutString
  nameWithType: IModule.DataLayoutString
  fullName: Ubiquity.NET.Llvm.IModule.DataLayoutString
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: DataLayoutString
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 52
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets or Sets the Data layout string for this module
  remarks: >-
    <div class="NOTE"><h5>note</h5><p>The data layout string doesn't do what seems obvious.

    That is, it doesn't force the target back-end to generate code

    or types with a particular layout. Rather, the layout string has

    to match the implicit layout of the target. Thus it should only

    come from the actual <xref href="Ubiquity.NET.Llvm.TargetMachine" data-throw-if-not-resolved="false"></xref> the code is

    targeting.</p></div>
  example: []
  syntax:
    content: LazyEncodedString DataLayoutString { get; set; }
    parameters: []
    return:
      type: Ubiquity.NET.InteropHelpers.LazyEncodedString
    content.vb: Property DataLayoutString As LazyEncodedString
  overload: Ubiquity.NET.Llvm.IModule.DataLayoutString*
- uid: Ubiquity.NET.Llvm.IModule.Layout
  commentId: P:Ubiquity.NET.Llvm.IModule.Layout
  id: Layout
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: Layout
  nameWithType: IModule.Layout
  fullName: Ubiquity.NET.Llvm.IModule.Layout
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Layout
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 62
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets or sets the target data layout for this module
  remarks: >-
    The setter uses a by value copy where the input value is serialized to

    a string and then set via <xref href="Ubiquity.NET.Llvm.IModule.DataLayoutString" data-throw-if-not-resolved="false"></xref>. That is, even

    if the implementation of <xref href="Ubiquity.NET.Llvm.IDataLayout" data-throw-if-not-resolved="false"></xref> is for an <xref href="System.IDisposable" data-throw-if-not-resolved="false"></xref>

    type no ownership transfer occurs.
  example: []
  syntax:
    content: IDataLayout Layout { get; set; }
    parameters: []
    return:
      type: Ubiquity.NET.Llvm.IDataLayout
    content.vb: Property Layout As IDataLayout
  overload: Ubiquity.NET.Llvm.IModule.Layout*
- uid: Ubiquity.NET.Llvm.IModule.TargetTriple
  commentId: P:Ubiquity.NET.Llvm.IModule.TargetTriple
  id: TargetTriple
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: TargetTriple
  nameWithType: IModule.TargetTriple
  fullName: Ubiquity.NET.Llvm.IModule.TargetTriple
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: TargetTriple
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 65
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets or sets the Target Triple describing the target, ABI and OS
  example: []
  syntax:
    content: string TargetTriple { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property TargetTriple As String
  overload: Ubiquity.NET.Llvm.IModule.TargetTriple*
- uid: Ubiquity.NET.Llvm.IModule.Globals
  commentId: P:Ubiquity.NET.Llvm.IModule.Globals
  id: Globals
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: Globals
  nameWithType: IModule.Globals
  fullName: Ubiquity.NET.Llvm.IModule.Globals
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Globals
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 68
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the <xref href="Ubiquity.NET.Llvm.Values.GlobalVariable" data-throw-if-not-resolved="false"></xref>s contained by this module
  example: []
  syntax:
    content: IEnumerable<GlobalVariable> Globals { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.GlobalVariable}
    content.vb: ReadOnly Property Globals As IEnumerable(Of GlobalVariable)
  overload: Ubiquity.NET.Llvm.IModule.Globals*
- uid: Ubiquity.NET.Llvm.IModule.Functions
  commentId: P:Ubiquity.NET.Llvm.IModule.Functions
  id: Functions
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: Functions
  nameWithType: IModule.Functions
  fullName: Ubiquity.NET.Llvm.IModule.Functions
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Functions
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 71
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the functions contained in this module
  example: []
  syntax:
    content: IEnumerable<Function> Functions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.Function}
    content.vb: ReadOnly Property Functions As IEnumerable(Of [Function])
  overload: Ubiquity.NET.Llvm.IModule.Functions*
- uid: Ubiquity.NET.Llvm.IModule.Aliases
  commentId: P:Ubiquity.NET.Llvm.IModule.Aliases
  id: Aliases
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: Aliases
  nameWithType: IModule.Aliases
  fullName: Ubiquity.NET.Llvm.IModule.Aliases
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Aliases
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 74
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the global aliases in this module
  example: []
  syntax:
    content: IEnumerable<GlobalAlias> Aliases { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.GlobalAlias}
    content.vb: ReadOnly Property Aliases As IEnumerable(Of GlobalAlias)
  overload: Ubiquity.NET.Llvm.IModule.Aliases*
- uid: Ubiquity.NET.Llvm.IModule.NamedMetadata
  commentId: P:Ubiquity.NET.Llvm.IModule.NamedMetadata
  id: NamedMetadata
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: NamedMetadata
  nameWithType: IModule.NamedMetadata
  fullName: Ubiquity.NET.Llvm.IModule.NamedMetadata
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: NamedMetadata
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 77
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the <xref href="Ubiquity.NET.Llvm.Metadata.NamedMDNode" data-throw-if-not-resolved="false"></xref>s for this module
  example: []
  syntax:
    content: IEnumerable<NamedMDNode> NamedMetadata { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Metadata.NamedMDNode}
    content.vb: ReadOnly Property NamedMetadata As IEnumerable(Of NamedMDNode)
  overload: Ubiquity.NET.Llvm.IModule.NamedMetadata*
- uid: Ubiquity.NET.Llvm.IModule.IndirectFunctions
  commentId: P:Ubiquity.NET.Llvm.IModule.IndirectFunctions
  id: IndirectFunctions
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: IndirectFunctions
  nameWithType: IModule.IndirectFunctions
  fullName: Ubiquity.NET.Llvm.IModule.IndirectFunctions
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: IndirectFunctions
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 80
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the <xref href="Ubiquity.NET.Llvm.Values.GlobalIFunc" data-throw-if-not-resolved="false"></xref>s in this module
  example: []
  syntax:
    content: IEnumerable<GlobalIFunc> IndirectFunctions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.GlobalIFunc}
    content.vb: ReadOnly Property IndirectFunctions As IEnumerable(Of GlobalIFunc)
  overload: Ubiquity.NET.Llvm.IModule.IndirectFunctions*
- uid: Ubiquity.NET.Llvm.IModule.Name
  commentId: P:Ubiquity.NET.Llvm.IModule.Name
  id: Name
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: IModule.Name
  fullName: Ubiquity.NET.Llvm.IModule.Name
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Name
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 83
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets the name of the module
  example: []
  syntax:
    content: string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Name As String
  overload: Ubiquity.NET.Llvm.IModule.Name*
- uid: Ubiquity.NET.Llvm.IModule.ModuleInlineAsm
  commentId: P:Ubiquity.NET.Llvm.IModule.ModuleInlineAsm
  id: ModuleInlineAsm
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: ModuleInlineAsm
  nameWithType: IModule.ModuleInlineAsm
  fullName: Ubiquity.NET.Llvm.IModule.ModuleInlineAsm
  type: Property
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: ModuleInlineAsm
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 86
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets or sets the module level inline assembly
  example: []
  syntax:
    content: string ModuleInlineAsm { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property ModuleInlineAsm As String
  overload: Ubiquity.NET.Llvm.IModule.ModuleInlineAsm*
- uid: Ubiquity.NET.Llvm.IModule.AppendInlineAsm(System.String)
  commentId: M:Ubiquity.NET.Llvm.IModule.AppendInlineAsm(System.String)
  id: AppendInlineAsm(System.String)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: AppendInlineAsm(string)
  nameWithType: IModule.AppendInlineAsm(string)
  fullName: Ubiquity.NET.Llvm.IModule.AppendInlineAsm(string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AppendInlineAsm
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 90
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Appends inline assembly to the module's inline assembly
  example: []
  syntax:
    content: void AppendInlineAsm(string asm)
    parameters:
    - id: asm
      type: System.String
      description: assembly text
    content.vb: Sub AppendInlineAsm(asm As String)
  overload: Ubiquity.NET.Llvm.IModule.AppendInlineAsm*
  nameWithType.vb: IModule.AppendInlineAsm(String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AppendInlineAsm(String)
  name.vb: AppendInlineAsm(String)
- uid: Ubiquity.NET.Llvm.IModule.TryRunPasses(System.String[])
  commentId: M:Ubiquity.NET.Llvm.IModule.TryRunPasses(System.String[])
  id: TryRunPasses(System.String[])
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: TryRunPasses(params string[])
  nameWithType: IModule.TryRunPasses(params string[])
  fullName: Ubiquity.NET.Llvm.IModule.TryRunPasses(params string[])
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: TryRunPasses
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 105
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Tries running the specified passes on this function
  remarks: >-
    This will try to run all the passes specified against this module. The return value contains

    the results and, if an error occurred, any error message text for the error.

    <div class="NOTE"><h5>information</h5><p>

    The `try` semantics apply to the actual LLVM call only, normal parameter checks are performed

    and may produce an exception.

    </p></div>
  example: []
  syntax:
    content: ErrorInfo TryRunPasses(params string[] passes)
    parameters:
    - id: passes
      type: System.String[]
      description: Set of passes to run [Must contain at least one pass]
    return:
      type: Ubiquity.NET.Llvm.ErrorInfo
      description: Error containing result
    content.vb: Function TryRunPasses(ParamArray passes As String()) As ErrorInfo
  overload: Ubiquity.NET.Llvm.IModule.TryRunPasses*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: One of the arguments provided was null (see exception details for name of the parameter)
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: If <code class="paramref">passes</code> has less than one pass. At least one is required
  nameWithType.vb: IModule.TryRunPasses(ParamArray String())
  fullName.vb: Ubiquity.NET.Llvm.IModule.TryRunPasses(ParamArray String())
  name.vb: TryRunPasses(ParamArray String())
- uid: Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
  commentId: M:Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
  id: TryRunPasses(Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: TryRunPasses(PassBuilderOptions, params string[])
  nameWithType: IModule.TryRunPasses(PassBuilderOptions, params string[])
  fullName: Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.PassBuilderOptions, params string[])
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: TryRunPasses
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 109
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Tries running the specified passes on this function
  remarks: >-
    This will try to run all the passes specified against this module. The return value contains

    the results and, if an error occurred, any error message text for the error.

    <div class="NOTE"><h5>information</h5><p>

    The `try` semantics apply to the actual LLVM call only, normal parameter checks are performed

    and may produce an exception.

    </p></div>
  example: []
  syntax:
    content: ErrorInfo TryRunPasses(PassBuilderOptions options, params string[] passes)
    parameters:
    - id: options
      type: Ubiquity.NET.Llvm.PassBuilderOptions
      description: Options for the passes
    - id: passes
      type: System.String[]
      description: Set of passes to run [Must contain at least one pass]
    return:
      type: Ubiquity.NET.Llvm.ErrorInfo
      description: Error containing result
    content.vb: Function TryRunPasses(options As PassBuilderOptions, ParamArray passes As String()) As ErrorInfo
  overload: Ubiquity.NET.Llvm.IModule.TryRunPasses*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: One of the arguments provided was null (see exception details for name of the parameter)
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: If <code class="paramref">passes</code> has less than one pass. At least one is required
  nameWithType.vb: IModule.TryRunPasses(PassBuilderOptions, ParamArray String())
  fullName.vb: Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.PassBuilderOptions, ParamArray String())
  name.vb: TryRunPasses(PassBuilderOptions, ParamArray String())
- uid: Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.TargetMachine,Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
  commentId: M:Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.TargetMachine,Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
  id: TryRunPasses(Ubiquity.NET.Llvm.TargetMachine,Ubiquity.NET.Llvm.PassBuilderOptions,System.String[])
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: TryRunPasses(TargetMachine, PassBuilderOptions, params string[])
  nameWithType: IModule.TryRunPasses(TargetMachine, PassBuilderOptions, params string[])
  fullName: Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.TargetMachine, Ubiquity.NET.Llvm.PassBuilderOptions, params string[])
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: TryRunPasses
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 114
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Tries running the specified passes on this function
  remarks: >-
    This will try to run all the passes specified against this module. The return value contains

    the results and, if an error occurred, any error message text for the error.

    <div class="NOTE"><h5>information</h5><p>

    The `try` semantics apply to the actual LLVM call only, normal parameter checks are performed

    and may produce an exception.

    </p></div>
  example: []
  syntax:
    content: ErrorInfo TryRunPasses(TargetMachine targetMachine, PassBuilderOptions options, params string[] passes)
    parameters:
    - id: targetMachine
      type: Ubiquity.NET.Llvm.TargetMachine
      description: Target machine for the passes
    - id: options
      type: Ubiquity.NET.Llvm.PassBuilderOptions
      description: Options for the passes
    - id: passes
      type: System.String[]
      description: Set of passes to run [Must contain at least one pass]
    return:
      type: Ubiquity.NET.Llvm.ErrorInfo
      description: Error containing result
    content.vb: Function TryRunPasses(targetMachine As TargetMachine, options As PassBuilderOptions, ParamArray passes As String()) As ErrorInfo
  overload: Ubiquity.NET.Llvm.IModule.TryRunPasses*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: One of the arguments provided was null (see exception details for name of the parameter)
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: If <code class="paramref">passes</code> has less than one pass. At least one is required
  nameWithType.vb: IModule.TryRunPasses(TargetMachine, PassBuilderOptions, ParamArray String())
  fullName.vb: Ubiquity.NET.Llvm.IModule.TryRunPasses(Ubiquity.NET.Llvm.TargetMachine, Ubiquity.NET.Llvm.PassBuilderOptions, ParamArray String())
  name.vb: TryRunPasses(TargetMachine, PassBuilderOptions, ParamArray String())
- uid: Ubiquity.NET.Llvm.IModule.Link(Ubiquity.NET.Llvm.Module)
  commentId: M:Ubiquity.NET.Llvm.IModule.Link(Ubiquity.NET.Llvm.Module)
  id: Link(Ubiquity.NET.Llvm.Module)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: Link(Module)
  nameWithType: IModule.Link(Module)
  fullName: Ubiquity.NET.Llvm.IModule.Link(Ubiquity.NET.Llvm.Module)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Link
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 124
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Link another module into this one
  remarks: >-
    <div class="WARNING"><h5>warning</h5><p>

    <code class="paramref">srcModule</code> is destroyed by this process and no longer usable

    when this method returns.

    </p></div>
  example: []
  syntax:
    content: void Link(Module srcModule)
    parameters:
    - id: srcModule
      type: Ubiquity.NET.Llvm.Module
      description: module to link into this one
    content.vb: Sub Link(srcModule As [Module])
  overload: Ubiquity.NET.Llvm.IModule.Link*
- uid: Ubiquity.NET.Llvm.IModule.Verify(System.String@)
  commentId: M:Ubiquity.NET.Llvm.IModule.Verify(System.String@)
  id: Verify(System.String@)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: Verify(out string)
  nameWithType: IModule.Verify(out string)
  fullName: Ubiquity.NET.Llvm.IModule.Verify(out string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Verify
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 129
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Verifies a bit-code module
  example: []
  syntax:
    content: bool Verify(out string errorMessage)
    parameters:
    - id: errorMessage
      type: System.String
      description: Error messages describing any issues found in the bit-code. Empty string if no error
    return:
      type: System.Boolean
      description: true if the verification succeeded and false if not.
    content.vb: Function Verify(errorMessage As String) As Boolean
  overload: Ubiquity.NET.Llvm.IModule.Verify*
  nameWithType.vb: IModule.Verify(String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.Verify(String)
  name.vb: Verify(String)
- uid: Ubiquity.NET.Llvm.IModule.TryGetFunction(System.String,Ubiquity.NET.Llvm.Values.Function@)
  commentId: M:Ubiquity.NET.Llvm.IModule.TryGetFunction(System.String,Ubiquity.NET.Llvm.Values.Function@)
  id: TryGetFunction(System.String,Ubiquity.NET.Llvm.Values.Function@)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: TryGetFunction(string, out Function)
  nameWithType: IModule.TryGetFunction(string, out Function)
  fullName: Ubiquity.NET.Llvm.IModule.TryGetFunction(string, out Ubiquity.NET.Llvm.Values.Function)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: TryGetFunction
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 135
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Looks up a function in the module by name
  example: []
  syntax:
    content: bool TryGetFunction(string name, out Function function)
    parameters:
    - id: name
      type: System.String
      description: Name of the function
    - id: function
      type: Ubiquity.NET.Llvm.Values.Function
      description: The function or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if not found
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the function was found or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> if not
    content.vb: Function TryGetFunction(name As String, [function] As [Function]) As Boolean
  overload: Ubiquity.NET.Llvm.IModule.TryGetFunction*
  nameWithType.vb: IModule.TryGetFunction(String, Function)
  fullName.vb: Ubiquity.NET.Llvm.IModule.TryGetFunction(String, Ubiquity.NET.Llvm.Values.Function)
  name.vb: TryGetFunction(String, Function)
- uid: Ubiquity.NET.Llvm.IModule.CreateAndAddGlobalIFunc(System.String,Ubiquity.NET.Llvm.Types.ITypeRef,System.UInt32,Ubiquity.NET.Llvm.Values.Function)
  commentId: M:Ubiquity.NET.Llvm.IModule.CreateAndAddGlobalIFunc(System.String,Ubiquity.NET.Llvm.Types.ITypeRef,System.UInt32,Ubiquity.NET.Llvm.Values.Function)
  id: CreateAndAddGlobalIFunc(System.String,Ubiquity.NET.Llvm.Types.ITypeRef,System.UInt32,Ubiquity.NET.Llvm.Values.Function)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: CreateAndAddGlobalIFunc(string, ITypeRef, uint, Function)
  nameWithType: IModule.CreateAndAddGlobalIFunc(string, ITypeRef, uint, Function)
  fullName: Ubiquity.NET.Llvm.IModule.CreateAndAddGlobalIFunc(string, Ubiquity.NET.Llvm.Types.ITypeRef, uint, Ubiquity.NET.Llvm.Values.Function)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: CreateAndAddGlobalIFunc
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 143
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Create and add a global indirect function
  example: []
  syntax:
    content: GlobalIFunc CreateAndAddGlobalIFunc(string name, ITypeRef type, uint addressSpace, Function resolver)
    parameters:
    - id: name
      type: System.String
      description: Name of the function
    - id: type
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Signature of the function
    - id: addressSpace
      type: System.UInt32
      description: Address space for the indirect function
    - id: resolver
      type: Ubiquity.NET.Llvm.Values.Function
      description: Resolver for the indirect function
    return:
      type: Ubiquity.NET.Llvm.Values.GlobalIFunc
      description: New <xref href="Ubiquity.NET.Llvm.Values.GlobalIFunc" data-throw-if-not-resolved="false"></xref>
    content.vb: Function CreateAndAddGlobalIFunc(name As String, type As ITypeRef, addressSpace As UInteger, resolver As [Function]) As GlobalIFunc
  overload: Ubiquity.NET.Llvm.IModule.CreateAndAddGlobalIFunc*
  nameWithType.vb: IModule.CreateAndAddGlobalIFunc(String, ITypeRef, UInteger, Function)
  fullName.vb: Ubiquity.NET.Llvm.IModule.CreateAndAddGlobalIFunc(String, Ubiquity.NET.Llvm.Types.ITypeRef, UInteger, Ubiquity.NET.Llvm.Values.Function)
  name.vb: CreateAndAddGlobalIFunc(String, ITypeRef, UInteger, Function)
- uid: Ubiquity.NET.Llvm.IModule.TryGetNamedGlobalIFunc(System.String,Ubiquity.NET.Llvm.Values.GlobalIFunc@)
  commentId: M:Ubiquity.NET.Llvm.IModule.TryGetNamedGlobalIFunc(System.String,Ubiquity.NET.Llvm.Values.GlobalIFunc@)
  id: TryGetNamedGlobalIFunc(System.String,Ubiquity.NET.Llvm.Values.GlobalIFunc@)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: TryGetNamedGlobalIFunc(string, out GlobalIFunc)
  nameWithType: IModule.TryGetNamedGlobalIFunc(string, out GlobalIFunc)
  fullName: Ubiquity.NET.Llvm.IModule.TryGetNamedGlobalIFunc(string, out Ubiquity.NET.Llvm.Values.GlobalIFunc)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: TryGetNamedGlobalIFunc
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 149
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Get a named Global Indirect function in the module
  example: []
  syntax:
    content: bool TryGetNamedGlobalIFunc(string name, out GlobalIFunc function)
    parameters:
    - id: name
      type: System.String
      description: Name of the ifunc to find
    - id: function
      type: Ubiquity.NET.Llvm.Values.GlobalIFunc
      description: Function or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if not found
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the function was found or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> if not
    content.vb: Function TryGetNamedGlobalIFunc(name As String, [function] As GlobalIFunc) As Boolean
  overload: Ubiquity.NET.Llvm.IModule.TryGetNamedGlobalIFunc*
  nameWithType.vb: IModule.TryGetNamedGlobalIFunc(String, GlobalIFunc)
  fullName.vb: Ubiquity.NET.Llvm.IModule.TryGetNamedGlobalIFunc(String, Ubiquity.NET.Llvm.Values.GlobalIFunc)
  name.vb: TryGetNamedGlobalIFunc(String, GlobalIFunc)
- uid: Ubiquity.NET.Llvm.IModule.CreateFunction(System.String,Ubiquity.NET.Llvm.Types.IFunctionType)
  commentId: M:Ubiquity.NET.Llvm.IModule.CreateFunction(System.String,Ubiquity.NET.Llvm.Types.IFunctionType)
  id: CreateFunction(System.String,Ubiquity.NET.Llvm.Types.IFunctionType)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: CreateFunction(string, IFunctionType)
  nameWithType: IModule.CreateFunction(string, IFunctionType)
  fullName: Ubiquity.NET.Llvm.IModule.CreateFunction(string, Ubiquity.NET.Llvm.Types.IFunctionType)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: CreateFunction
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 161
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets an existing function with the specified signature to the module or creates a new one if it doesn't exist
  remarks: >-
    If a matching function already exists it is returned, and therefore the returned

    <xref href="Ubiquity.NET.Llvm.Values.Function" data-throw-if-not-resolved="false"></xref> may have a body and additional attributes. If a function of

    the same name exists with a different signature an exception is thrown as LLVM does

    not perform any function overloading.
  example: []
  syntax:
    content: Function CreateFunction(string name, IFunctionType signature)
    parameters:
    - id: name
      type: System.String
      description: Name of the function to add
    - id: signature
      type: Ubiquity.NET.Llvm.Types.IFunctionType
      description: Signature of the function
    return:
      type: Ubiquity.NET.Llvm.Values.Function
      description: <xref href="Ubiquity.NET.Llvm.Values.Function" data-throw-if-not-resolved="false"></xref>matching the specified signature and name
    content.vb: Function CreateFunction(name As String, signature As IFunctionType) As [Function]
  overload: Ubiquity.NET.Llvm.IModule.CreateFunction*
  nameWithType.vb: IModule.CreateFunction(String, IFunctionType)
  fullName.vb: Ubiquity.NET.Llvm.IModule.CreateFunction(String, Ubiquity.NET.Llvm.Types.IFunctionType)
  name.vb: CreateFunction(String, IFunctionType)
- uid: Ubiquity.NET.Llvm.IModule.WriteToFile(System.String)
  commentId: M:Ubiquity.NET.Llvm.IModule.WriteToFile(System.String)
  id: WriteToFile(System.String)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: WriteToFile(string)
  nameWithType: IModule.WriteToFile(string)
  fullName: Ubiquity.NET.Llvm.IModule.WriteToFile(string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: WriteToFile
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 170
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Writes a bit-code module to a file
  remarks: >-
    This is a blind write. (e.g. no verification is performed)

    So if an invalid module is saved it might not work with any

    later stage processing tools.
  example: []
  syntax:
    content: void WriteToFile(string path)
    parameters:
    - id: path
      type: System.String
      description: Path to write the bit-code into
    content.vb: Sub WriteToFile(path As String)
  overload: Ubiquity.NET.Llvm.IModule.WriteToFile*
  nameWithType.vb: IModule.WriteToFile(String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.WriteToFile(String)
  name.vb: WriteToFile(String)
- uid: Ubiquity.NET.Llvm.IModule.WriteToTextFile(System.String,System.String@)
  commentId: M:Ubiquity.NET.Llvm.IModule.WriteToTextFile(System.String,System.String@)
  id: WriteToTextFile(System.String,System.String@)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: WriteToTextFile(string, out string)
  nameWithType: IModule.WriteToTextFile(string, out string)
  fullName: Ubiquity.NET.Llvm.IModule.WriteToTextFile(string, out string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: WriteToTextFile
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 176
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Writes this module as LLVM IR source to a file
  example: []
  syntax:
    content: bool WriteToTextFile(string path, out string errMsg)
    parameters:
    - id: path
      type: System.String
      description: File to write the LLVM IR source to
    - id: errMsg
      type: System.String
      description: Error messages encountered, if any
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if successful or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> if not
    content.vb: Function WriteToTextFile(path As String, errMsg As String) As Boolean
  overload: Ubiquity.NET.Llvm.IModule.WriteToTextFile*
  nameWithType.vb: IModule.WriteToTextFile(String, String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.WriteToTextFile(String, String)
  name.vb: WriteToTextFile(String, String)
- uid: Ubiquity.NET.Llvm.IModule.WriteToString
  commentId: M:Ubiquity.NET.Llvm.IModule.WriteToString
  id: WriteToString
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: WriteToString()
  nameWithType: IModule.WriteToString()
  fullName: Ubiquity.NET.Llvm.IModule.WriteToString()
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: WriteToString
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 188
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Creates a string representation of the module
  remarks: >-
    This is intentionally NOT an override of ToString() as that is

    used by debuggers to show the value of a type and this can take

    an extremely long time (up to many seconds depending on complexity

    of the module) which is usually bad for the debugger. If you need

    to see the contents of the IR for a module you can use this method

    in the immediate or watch windows.
  example: []
  syntax:
    content: string? WriteToString()
    return:
      type: System.String
      description: LLVM textual representation of the module
    content.vb: Function WriteToString() As String
  overload: Ubiquity.NET.Llvm.IModule.WriteToString*
- uid: Ubiquity.NET.Llvm.IModule.WriteToBuffer
  commentId: M:Ubiquity.NET.Llvm.IModule.WriteToBuffer
  id: WriteToBuffer
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: WriteToBuffer()
  nameWithType: IModule.WriteToBuffer()
  fullName: Ubiquity.NET.Llvm.IModule.WriteToBuffer()
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: WriteToBuffer
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 192
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Writes the LLVM IR bit code into a memory buffer
  example: []
  syntax:
    content: MemoryBuffer WriteToBuffer()
    return:
      type: Ubiquity.NET.Llvm.MemoryBuffer
      description: <xref href="Ubiquity.NET.Llvm.MemoryBuffer" data-throw-if-not-resolved="false"></xref> containing the bit code module
    content.vb: Function WriteToBuffer() As MemoryBuffer
  overload: Ubiquity.NET.Llvm.IModule.WriteToBuffer*
- uid: Ubiquity.NET.Llvm.IModule.AddAlias(Ubiquity.NET.Llvm.Values.Value,System.String,System.UInt32)
  commentId: M:Ubiquity.NET.Llvm.IModule.AddAlias(Ubiquity.NET.Llvm.Values.Value,System.String,System.UInt32)
  id: AddAlias(Ubiquity.NET.Llvm.Values.Value,System.String,System.UInt32)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: AddAlias(Value, string, uint)
  nameWithType: IModule.AddAlias(Value, string, uint)
  fullName: Ubiquity.NET.Llvm.IModule.AddAlias(Ubiquity.NET.Llvm.Values.Value, string, uint)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AddAlias
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 199
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Add an alias to the module
  example: []
  syntax:
    content: GlobalAlias AddAlias(Value aliasee, string aliasName, uint addressSpace = 0)
    parameters:
    - id: aliasee
      type: Ubiquity.NET.Llvm.Values.Value
      description: Value being aliased
    - id: aliasName
      type: System.String
      description: Name of the alias
    - id: addressSpace
      type: System.UInt32
      description: 'Address space for the alias [Default: 0]'
    return:
      type: Ubiquity.NET.Llvm.Values.GlobalAlias
      description: <xref href="Ubiquity.NET.Llvm.Values.GlobalAlias" data-throw-if-not-resolved="false"></xref> for the alias
    content.vb: Function AddAlias(aliasee As Value, aliasName As String, addressSpace As UInteger = 0) As GlobalAlias
  overload: Ubiquity.NET.Llvm.IModule.AddAlias*
  nameWithType.vb: IModule.AddAlias(Value, String, UInteger)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AddAlias(Ubiquity.NET.Llvm.Values.Value, String, UInteger)
  name.vb: AddAlias(Value, String, UInteger)
- uid: Ubiquity.NET.Llvm.IModule.GetAlias(System.String)
  commentId: M:Ubiquity.NET.Llvm.IModule.GetAlias(System.String)
  id: GetAlias(System.String)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: GetAlias(string)
  nameWithType: IModule.GetAlias(string)
  fullName: Ubiquity.NET.Llvm.IModule.GetAlias(string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: GetAlias
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 204
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Get an alias by name
  example: []
  syntax:
    content: GlobalAlias? GetAlias(string name)
    parameters:
    - id: name
      type: System.String
      description: name of the alias to get
    return:
      type: Ubiquity.NET.Llvm.Values.GlobalAlias
      description: Alias matching <code class="paramref">name</code> or null if no such alias exists
    content.vb: Function GetAlias(name As String) As GlobalAlias
  overload: Ubiquity.NET.Llvm.IModule.GetAlias*
  nameWithType.vb: IModule.GetAlias(String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.GetAlias(String)
  name.vb: GetAlias(String)
- uid: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
  commentId: M:Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
  id: AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: AddGlobalInAddressSpace(uint, ITypeRef, string)
  nameWithType: IModule.AddGlobalInAddressSpace(uint, ITypeRef, string)
  fullName: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(uint, Ubiquity.NET.Llvm.Types.ITypeRef, string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AddGlobalInAddressSpace
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 214
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Adds a global to this module with a specific address space
  example: []
  syntax:
    content: GlobalVariable AddGlobalInAddressSpace(uint addressSpace, ITypeRef typeRef, string name)
    parameters:
    - id: addressSpace
      type: System.UInt32
      description: Address space to add the global to
    - id: typeRef
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Type of the value
    - id: name
      type: System.String
      description: Name of the global
    return:
      type: Ubiquity.NET.Llvm.Values.GlobalVariable
      description: The new <xref href="Ubiquity.NET.Llvm.Values.GlobalVariable" data-throw-if-not-resolved="false"></xref>
    content.vb: Function AddGlobalInAddressSpace(addressSpace As UInteger, typeRef As ITypeRef, name As String) As GlobalVariable
  overload: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace*
  nameWithType.vb: IModule.AddGlobalInAddressSpace(UInteger, ITypeRef, String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(UInteger, Ubiquity.NET.Llvm.Types.ITypeRef, String)
  name.vb: AddGlobalInAddressSpace(UInteger, ITypeRef, String)
- uid: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
  commentId: M:Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
  id: AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: AddGlobalInAddressSpace(uint, ITypeRef, bool, Linkage, Constant)
  nameWithType: IModule.AddGlobalInAddressSpace(uint, ITypeRef, bool, Linkage, Constant)
  fullName: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(uint, Ubiquity.NET.Llvm.Types.ITypeRef, bool, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AddGlobalInAddressSpace
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 223
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Adds a global to this module
  example: []
  syntax:
    content: GlobalVariable AddGlobalInAddressSpace(uint addressSpace, ITypeRef typeRef, bool isConst, Linkage linkage, Constant constVal)
    parameters:
    - id: addressSpace
      type: System.UInt32
      description: Address space to add the global to
    - id: typeRef
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Type of the value
    - id: isConst
      type: System.Boolean
      description: Flag to indicate if this global is a constant
    - id: linkage
      type: Ubiquity.NET.Llvm.Values.Linkage
      description: Linkage type for this global
    - id: constVal
      type: Ubiquity.NET.Llvm.Values.Constant
      description: Initial value for the global
    return:
      type: Ubiquity.NET.Llvm.Values.GlobalVariable
      description: New global variable
    content.vb: Function AddGlobalInAddressSpace(addressSpace As UInteger, typeRef As ITypeRef, isConst As Boolean, linkage As Linkage, constVal As Constant) As GlobalVariable
  overload: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace*
  nameWithType.vb: IModule.AddGlobalInAddressSpace(UInteger, ITypeRef, Boolean, Linkage, Constant)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(UInteger, Ubiquity.NET.Llvm.Types.ITypeRef, Boolean, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant)
  name.vb: AddGlobalInAddressSpace(UInteger, ITypeRef, Boolean, Linkage, Constant)
- uid: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
  commentId: M:Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
  id: AddGlobalInAddressSpace(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: AddGlobalInAddressSpace(uint, ITypeRef, bool, Linkage, Constant, string)
  nameWithType: IModule.AddGlobalInAddressSpace(uint, ITypeRef, bool, Linkage, Constant, string)
  fullName: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(uint, Ubiquity.NET.Llvm.Types.ITypeRef, bool, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant, string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AddGlobalInAddressSpace
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 233
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Adds a global to this module
  example: []
  syntax:
    content: GlobalVariable AddGlobalInAddressSpace(uint addressSpace, ITypeRef typeRef, bool isConst, Linkage linkage, Constant constVal, string name)
    parameters:
    - id: addressSpace
      type: System.UInt32
      description: Address space to add the global to
    - id: typeRef
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Type of the value
    - id: isConst
      type: System.Boolean
      description: Flag to indicate if this global is a constant
    - id: linkage
      type: Ubiquity.NET.Llvm.Values.Linkage
      description: Linkage type for this global
    - id: constVal
      type: Ubiquity.NET.Llvm.Values.Constant
      description: Initial value for the global
    - id: name
      type: System.String
      description: Name of the variable
    return:
      type: Ubiquity.NET.Llvm.Values.GlobalVariable
      description: New global variable
    content.vb: Function AddGlobalInAddressSpace(addressSpace As UInteger, typeRef As ITypeRef, isConst As Boolean, linkage As Linkage, constVal As Constant, name As String) As GlobalVariable
  overload: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace*
  nameWithType.vb: IModule.AddGlobalInAddressSpace(UInteger, ITypeRef, Boolean, Linkage, Constant, String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace(UInteger, Ubiquity.NET.Llvm.Types.ITypeRef, Boolean, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant, String)
  name.vb: AddGlobalInAddressSpace(UInteger, ITypeRef, Boolean, Linkage, Constant, String)
- uid: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
  commentId: M:Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
  id: AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.String)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: AddGlobal(ITypeRef, string)
  nameWithType: IModule.AddGlobal(ITypeRef, string)
  fullName: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef, string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AddGlobal
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 242
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Adds a global to this module
  example: []
  syntax:
    content: GlobalVariable AddGlobal(ITypeRef typeRef, string name)
    parameters:
    - id: typeRef
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Type of the value
    - id: name
      type: System.String
      description: Name of the global
    return:
      type: Ubiquity.NET.Llvm.Values.GlobalVariable
      description: The new <xref href="Ubiquity.NET.Llvm.Values.GlobalVariable" data-throw-if-not-resolved="false"></xref>
    content.vb: Function AddGlobal(typeRef As ITypeRef, name As String) As GlobalVariable
  overload: Ubiquity.NET.Llvm.IModule.AddGlobal*
  nameWithType.vb: IModule.AddGlobal(ITypeRef, String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef, String)
  name.vb: AddGlobal(ITypeRef, String)
- uid: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
  commentId: M:Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
  id: AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: AddGlobal(ITypeRef, bool, Linkage, Constant)
  nameWithType: IModule.AddGlobal(ITypeRef, bool, Linkage, Constant)
  fullName: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef, bool, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AddGlobal
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 250
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Adds a global to this module
  example: []
  syntax:
    content: GlobalVariable AddGlobal(ITypeRef typeRef, bool isConst, Linkage linkage, Constant constVal)
    parameters:
    - id: typeRef
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Type of the value
    - id: isConst
      type: System.Boolean
      description: Flag to indicate if this global is a constant
    - id: linkage
      type: Ubiquity.NET.Llvm.Values.Linkage
      description: Linkage type for this global
    - id: constVal
      type: Ubiquity.NET.Llvm.Values.Constant
      description: Initial value for the global
    return:
      type: Ubiquity.NET.Llvm.Values.GlobalVariable
      description: New global variable
    content.vb: Function AddGlobal(typeRef As ITypeRef, isConst As Boolean, linkage As Linkage, constVal As Constant) As GlobalVariable
  overload: Ubiquity.NET.Llvm.IModule.AddGlobal*
  nameWithType.vb: IModule.AddGlobal(ITypeRef, Boolean, Linkage, Constant)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef, Boolean, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant)
  name.vb: AddGlobal(ITypeRef, Boolean, Linkage, Constant)
- uid: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
  commentId: M:Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
  id: AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef,System.Boolean,Ubiquity.NET.Llvm.Values.Linkage,Ubiquity.NET.Llvm.Values.Constant,System.String)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: AddGlobal(ITypeRef, bool, Linkage, Constant, string)
  nameWithType: IModule.AddGlobal(ITypeRef, bool, Linkage, Constant, string)
  fullName: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef, bool, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant, string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AddGlobal
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 259
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Adds a global to this module
  example: []
  syntax:
    content: GlobalVariable AddGlobal(ITypeRef typeRef, bool isConst, Linkage linkage, Constant constVal, string name)
    parameters:
    - id: typeRef
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: Type of the value
    - id: isConst
      type: System.Boolean
      description: Flag to indicate if this global is a constant
    - id: linkage
      type: Ubiquity.NET.Llvm.Values.Linkage
      description: Linkage type for this global
    - id: constVal
      type: Ubiquity.NET.Llvm.Values.Constant
      description: Initial value for the global
    - id: name
      type: System.String
      description: Name of the variable
    return:
      type: Ubiquity.NET.Llvm.Values.GlobalVariable
      description: New global variable
    content.vb: Function AddGlobal(typeRef As ITypeRef, isConst As Boolean, linkage As Linkage, constVal As Constant, name As String) As GlobalVariable
  overload: Ubiquity.NET.Llvm.IModule.AddGlobal*
  nameWithType.vb: IModule.AddGlobal(ITypeRef, Boolean, Linkage, Constant, String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AddGlobal(Ubiquity.NET.Llvm.Types.ITypeRef, Boolean, Ubiquity.NET.Llvm.Values.Linkage, Ubiquity.NET.Llvm.Values.Constant, String)
  name.vb: AddGlobal(ITypeRef, Boolean, Linkage, Constant, String)
- uid: Ubiquity.NET.Llvm.IModule.GetTypeByName(System.String)
  commentId: M:Ubiquity.NET.Llvm.IModule.GetTypeByName(System.String)
  id: GetTypeByName(System.String)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: GetTypeByName(string)
  nameWithType: IModule.GetTypeByName(string)
  fullName: Ubiquity.NET.Llvm.IModule.GetTypeByName(string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: GetTypeByName
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 264
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Retrieves a <xref href="Ubiquity.NET.Llvm.Types.ITypeRef" data-throw-if-not-resolved="false"></xref> by name from the module
  example: []
  syntax:
    content: ITypeRef? GetTypeByName(string name)
    parameters:
    - id: name
      type: System.String
      description: Name of the type
    return:
      type: Ubiquity.NET.Llvm.Types.ITypeRef
      description: The type or null if no type with the specified name exists in the module
    content.vb: Function GetTypeByName(name As String) As ITypeRef
  overload: Ubiquity.NET.Llvm.IModule.GetTypeByName*
  nameWithType.vb: IModule.GetTypeByName(String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.GetTypeByName(String)
  name.vb: GetTypeByName(String)
- uid: Ubiquity.NET.Llvm.IModule.GetNamedGlobal(System.String)
  commentId: M:Ubiquity.NET.Llvm.IModule.GetNamedGlobal(System.String)
  id: GetNamedGlobal(System.String)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: GetNamedGlobal(string)
  nameWithType: IModule.GetNamedGlobal(string)
  fullName: Ubiquity.NET.Llvm.IModule.GetNamedGlobal(string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: GetNamedGlobal
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 269
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Retrieves a named global from the module
  example: []
  syntax:
    content: GlobalVariable? GetNamedGlobal(string name)
    parameters:
    - id: name
      type: System.String
      description: Name of the global
    return:
      type: Ubiquity.NET.Llvm.Values.GlobalVariable
      description: <xref href="Ubiquity.NET.Llvm.Values.GlobalVariable" data-throw-if-not-resolved="false"></xref> or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if not found
    content.vb: Function GetNamedGlobal(name As String) As GlobalVariable
  overload: Ubiquity.NET.Llvm.IModule.GetNamedGlobal*
  nameWithType.vb: IModule.GetNamedGlobal(String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.GetNamedGlobal(String)
  name.vb: GetNamedGlobal(String)
- uid: Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,System.UInt32)
  commentId: M:Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,System.UInt32)
  id: AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,System.UInt32)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: AddModuleFlag(ModuleFlagBehavior, string, uint)
  nameWithType: IModule.AddModuleFlag(ModuleFlagBehavior, string, uint)
  fullName: Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior, string, uint)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AddModuleFlag
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 275
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Adds a module flag to the module
  example: []
  syntax:
    content: void AddModuleFlag(ModuleFlagBehavior behavior, string name, uint value)
    parameters:
    - id: behavior
      type: Ubiquity.NET.Llvm.ModuleFlagBehavior
      description: ModuleHandle flag behavior for this flag
    - id: name
      type: System.String
      description: Name of the flag
    - id: value
      type: System.UInt32
      description: Value of the flag
    content.vb: Sub AddModuleFlag(behavior As ModuleFlagBehavior, name As String, value As UInteger)
  overload: Ubiquity.NET.Llvm.IModule.AddModuleFlag*
  nameWithType.vb: IModule.AddModuleFlag(ModuleFlagBehavior, String, UInteger)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior, String, UInteger)
  name.vb: AddModuleFlag(ModuleFlagBehavior, String, UInteger)
- uid: Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
  commentId: M:Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
  id: AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior,System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: AddModuleFlag(ModuleFlagBehavior, string, IrMetadata)
  nameWithType: IModule.AddModuleFlag(ModuleFlagBehavior, string, IrMetadata)
  fullName: Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior, string, Ubiquity.NET.Llvm.Metadata.IrMetadata)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AddModuleFlag
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 281
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Adds a module flag to the module
  example: []
  syntax:
    content: void AddModuleFlag(ModuleFlagBehavior behavior, string name, IrMetadata value)
    parameters:
    - id: behavior
      type: Ubiquity.NET.Llvm.ModuleFlagBehavior
      description: ModuleHandle flag behavior for this flag
    - id: name
      type: System.String
      description: Name of the flag
    - id: value
      type: Ubiquity.NET.Llvm.Metadata.IrMetadata
      description: Value of the flag
    content.vb: Sub AddModuleFlag(behavior As ModuleFlagBehavior, name As String, value As IrMetadata)
  overload: Ubiquity.NET.Llvm.IModule.AddModuleFlag*
  nameWithType.vb: IModule.AddModuleFlag(ModuleFlagBehavior, String, IrMetadata)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AddModuleFlag(Ubiquity.NET.Llvm.ModuleFlagBehavior, String, Ubiquity.NET.Llvm.Metadata.IrMetadata)
  name.vb: AddModuleFlag(ModuleFlagBehavior, String, IrMetadata)
- uid: Ubiquity.NET.Llvm.IModule.AddNamedMetadataOperand(System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
  commentId: M:Ubiquity.NET.Llvm.IModule.AddNamedMetadataOperand(System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
  id: AddNamedMetadataOperand(System.String,Ubiquity.NET.Llvm.Metadata.IrMetadata)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: AddNamedMetadataOperand(string, IrMetadata)
  nameWithType: IModule.AddNamedMetadataOperand(string, IrMetadata)
  fullName: Ubiquity.NET.Llvm.IModule.AddNamedMetadataOperand(string, Ubiquity.NET.Llvm.Metadata.IrMetadata)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AddNamedMetadataOperand
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 286
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Adds operand value to named metadata
  example: []
  syntax:
    content: void AddNamedMetadataOperand(string name, IrMetadata value)
    parameters:
    - id: name
      type: System.String
      description: Name of the metadata
    - id: value
      type: Ubiquity.NET.Llvm.Metadata.IrMetadata
      description: operand value
    content.vb: Sub AddNamedMetadataOperand(name As String, value As IrMetadata)
  overload: Ubiquity.NET.Llvm.IModule.AddNamedMetadataOperand*
  nameWithType.vb: IModule.AddNamedMetadataOperand(String, IrMetadata)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AddNamedMetadataOperand(String, Ubiquity.NET.Llvm.Metadata.IrMetadata)
  name.vb: AddNamedMetadataOperand(String, IrMetadata)
- uid: Ubiquity.NET.Llvm.IModule.AddVersionIdentMetadata(System.String)
  commentId: M:Ubiquity.NET.Llvm.IModule.AddVersionIdentMetadata(System.String)
  id: AddVersionIdentMetadata(System.String)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: AddVersionIdentMetadata(string)
  nameWithType: IModule.AddVersionIdentMetadata(string)
  fullName: Ubiquity.NET.Llvm.IModule.AddVersionIdentMetadata(string)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: AddVersionIdentMetadata
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 290
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Adds an llvm.ident metadata string to the module
  example: []
  syntax:
    content: void AddVersionIdentMetadata(string version)
    parameters:
    - id: version
      type: System.String
      description: version information to place in the llvm.ident metadata
    content.vb: Sub AddVersionIdentMetadata(version As String)
  overload: Ubiquity.NET.Llvm.IModule.AddVersionIdentMetadata*
  nameWithType.vb: IModule.AddVersionIdentMetadata(String)
  fullName.vb: Ubiquity.NET.Llvm.IModule.AddVersionIdentMetadata(String)
  name.vb: AddVersionIdentMetadata(String)
- uid: Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,Ubiquity.NET.Llvm.DebugInfo.DIScope,System.String,System.String,Ubiquity.NET.Llvm.DebugInfo.DIFile,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType,System.Boolean,System.Boolean,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags,System.Boolean)
  commentId: M:Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,Ubiquity.NET.Llvm.DebugInfo.DIScope,System.String,System.String,Ubiquity.NET.Llvm.DebugInfo.DIFile,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType,System.Boolean,System.Boolean,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags,System.Boolean)
  id: CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,Ubiquity.NET.Llvm.DebugInfo.DIScope,System.String,System.String,Ubiquity.NET.Llvm.DebugInfo.DIFile,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType,System.Boolean,System.Boolean,System.UInt32,Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags,System.Boolean)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: CreateFunction(ref readonly DIBuilder, DIScope?, string, string?, DIFile?, uint, DebugFunctionType, bool, bool, uint, DebugInfoFlags, bool)
  nameWithType: IModule.CreateFunction(ref readonly DIBuilder, DIScope?, string, string?, DIFile?, uint, DebugFunctionType, bool, bool, uint, DebugInfoFlags, bool)
  fullName: Ubiquity.NET.Llvm.IModule.CreateFunction(ref readonly Ubiquity.NET.Llvm.DebugInfo.DIBuilder, Ubiquity.NET.Llvm.DebugInfo.DIScope?, string, string?, Ubiquity.NET.Llvm.DebugInfo.DIFile?, uint, Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType, bool, bool, uint, Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags, bool)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: CreateFunction
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 306
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Creates a Function definition with Debug information
  example: []
  syntax:
    content: Function CreateFunction(ref readonly DIBuilder diBuilder, DIScope? scope, string name, string? linkageName, DIFile? file, uint line, DebugFunctionType signature, bool isLocalToUnit, bool isDefinition, uint scopeLine, DebugInfoFlags debugFlags, bool isOptimized)
    parameters:
    - id: diBuilder
      type: Ubiquity.NET.Llvm.DebugInfo.DIBuilder
      description: The debug info builder to use to create the function (must be associated with this module)
    - id: scope
      type: Ubiquity.NET.Llvm.DebugInfo.DIScope
      description: Containing scope for the function
    - id: name
      type: System.String
      description: Name of the function in source language form
    - id: linkageName
      type: System.String
      description: Mangled linker visible name of the function (may be same as <code class="paramref">name</code> if mangling not required by source language
    - id: file
      type: Ubiquity.NET.Llvm.DebugInfo.DIFile
      description: File containing the function definition
    - id: line
      type: System.UInt32
      description: Line number of the function definition
    - id: signature
      type: Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType
      description: LLVM Function type for the signature of the function
    - id: isLocalToUnit
      type: System.Boolean
      description: Flag to indicate if this function is local to the compilation unit
    - id: isDefinition
      type: System.Boolean
      description: Flag to indicate if this is a definition
    - id: scopeLine
      type: System.UInt32
      description: First line of the function's outermost scope, this may not be the same as the first line of the function definition due to source formatting
    - id: debugFlags
      type: Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags
      description: Additional flags describing this function
    - id: isOptimized
      type: System.Boolean
      description: Flag to indicate if this function is optimized
    return:
      type: Ubiquity.NET.Llvm.Values.Function
      description: Function described by the arguments
    content.vb: Function CreateFunction(diBuilder As DIBuilder, scope As DIScope, name As String, linkageName As String, file As DIFile, line As UInteger, signature As DebugFunctionType, isLocalToUnit As Boolean, isDefinition As Boolean, scopeLine As UInteger, debugFlags As DebugInfoFlags, isOptimized As Boolean) As [Function]
  overload: Ubiquity.NET.Llvm.IModule.CreateFunction*
  nameWithType.vb: IModule.CreateFunction(DIBuilder, DIScope, String, String, DIFile, UInteger, DebugFunctionType, Boolean, Boolean, UInteger, DebugInfoFlags, Boolean)
  fullName.vb: Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder, Ubiquity.NET.Llvm.DebugInfo.DIScope, String, String, Ubiquity.NET.Llvm.DebugInfo.DIFile, UInteger, Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType, Boolean, Boolean, UInteger, Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags, Boolean)
  name.vb: CreateFunction(DIBuilder, DIScope, String, String, DIFile, UInteger, DebugFunctionType, Boolean, Boolean, UInteger, DebugInfoFlags, Boolean)
- uid: Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}})
  commentId: M:Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}})
  id: CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}})
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: CreateFunction(ref readonly DIBuilder, string, bool, IDebugType<ITypeRef, DIType>, IEnumerable<IDebugType<ITypeRef, DIType>>)
  nameWithType: IModule.CreateFunction(ref readonly DIBuilder, string, bool, IDebugType<ITypeRef, DIType>, IEnumerable<IDebugType<ITypeRef, DIType>>)
  fullName: Ubiquity.NET.Llvm.IModule.CreateFunction(ref readonly Ubiquity.NET.Llvm.DebugInfo.DIBuilder, string, bool, Ubiquity.NET.Llvm.DebugInfo.IDebugType<Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType>, System.Collections.Generic.IEnumerable<Ubiquity.NET.Llvm.DebugInfo.IDebugType<Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType>>)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: CreateFunction
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 330
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Creates a function
  example: []
  syntax:
    content: Function CreateFunction(ref readonly DIBuilder diBuilder, string name, bool isVarArg, IDebugType<ITypeRef, DIType> returnType, IEnumerable<IDebugType<ITypeRef, DIType>> argumentTypes)
    parameters:
    - id: diBuilder
      type: Ubiquity.NET.Llvm.DebugInfo.DIBuilder
      description: <xref href="Ubiquity.NET.Llvm.DebugInfo.DIBuilder" data-throw-if-not-resolved="false"></xref> for creation of debug information
    - id: name
      type: System.String
      description: Name of the function
    - id: isVarArg
      type: System.Boolean
      description: Flag indicating if the function supports a variadic argument list
    - id: returnType
      type: Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}
      description: Return type of the function
    - id: argumentTypes
      type: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}}
      description: Arguments for the function
    return:
      type: Ubiquity.NET.Llvm.Values.Function
      description: >-
        Function, matching the signature specified. This may be a previously declared or defined

        function or a new function if none matching the name and signature is already present.
    content.vb: Function CreateFunction(diBuilder As DIBuilder, name As String, isVarArg As Boolean, returnType As IDebugType(Of ITypeRef, DIType), argumentTypes As IEnumerable(Of IDebugType(Of ITypeRef, DIType))) As [Function]
  overload: Ubiquity.NET.Llvm.IModule.CreateFunction*
  nameWithType.vb: IModule.CreateFunction(DIBuilder, String, Boolean, IDebugType(Of ITypeRef, DIType), IEnumerable(Of IDebugType(Of ITypeRef, DIType)))
  fullName.vb: Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder, String, Boolean, Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType), System.Collections.Generic.IEnumerable(Of Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType)))
  name.vb: CreateFunction(DIBuilder, String, Boolean, IDebugType(Of ITypeRef, DIType), IEnumerable(Of IDebugType(Of ITypeRef, DIType)))
- uid: Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}[])
  commentId: M:Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}[])
  id: CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder@,System.String,System.Boolean,Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType},Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}[])
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: CreateFunction(ref readonly DIBuilder, string, bool, IDebugType<ITypeRef, DIType>, params IDebugType<ITypeRef, DIType>[])
  nameWithType: IModule.CreateFunction(ref readonly DIBuilder, string, bool, IDebugType<ITypeRef, DIType>, params IDebugType<ITypeRef, DIType>[])
  fullName: Ubiquity.NET.Llvm.IModule.CreateFunction(ref readonly Ubiquity.NET.Llvm.DebugInfo.DIBuilder, string, bool, Ubiquity.NET.Llvm.DebugInfo.IDebugType<Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType>, params Ubiquity.NET.Llvm.DebugInfo.IDebugType<Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType>[])
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: CreateFunction
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 347
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Creates a function
  example: []
  syntax:
    content: Function CreateFunction(ref readonly DIBuilder diBuilder, string name, bool isVarArg, IDebugType<ITypeRef, DIType> returnType, params IDebugType<ITypeRef, DIType>[] argumentTypes)
    parameters:
    - id: diBuilder
      type: Ubiquity.NET.Llvm.DebugInfo.DIBuilder
      description: <xref href="Ubiquity.NET.Llvm.DebugInfo.DIBuilder" data-throw-if-not-resolved="false"></xref> for creation of debug information
    - id: name
      type: System.String
      description: Name of the function
    - id: isVarArg
      type: System.Boolean
      description: Flag indicating if the function supports a variadic argument list
    - id: returnType
      type: Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}
      description: Return type of the function
    - id: argumentTypes
      type: Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}[]
      description: Arguments for the function
    return:
      type: Ubiquity.NET.Llvm.Values.Function
      description: >-
        Function, matching the signature specified. This may be a previously declared or defined

        function or a new function if none matching the name and signature is already present.
    content.vb: Function CreateFunction(diBuilder As DIBuilder, name As String, isVarArg As Boolean, returnType As IDebugType(Of ITypeRef, DIType), ParamArray argumentTypes As IDebugType(Of ITypeRef, DIType)()) As [Function]
  overload: Ubiquity.NET.Llvm.IModule.CreateFunction*
  nameWithType.vb: IModule.CreateFunction(DIBuilder, String, Boolean, IDebugType(Of ITypeRef, DIType), ParamArray IDebugType(Of ITypeRef, DIType)())
  fullName.vb: Ubiquity.NET.Llvm.IModule.CreateFunction(Ubiquity.NET.Llvm.DebugInfo.DIBuilder, String, Boolean, Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType), ParamArray Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType)())
  name.vb: CreateFunction(DIBuilder, String, Boolean, IDebugType(Of ITypeRef, DIType), ParamArray IDebugType(Of ITypeRef, DIType)())
- uid: Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(System.String,Ubiquity.NET.Llvm.Types.ITypeRef[])
  commentId: M:Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(System.String,Ubiquity.NET.Llvm.Types.ITypeRef[])
  id: GetIntrinsicDeclaration(System.String,Ubiquity.NET.Llvm.Types.ITypeRef[])
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: GetIntrinsicDeclaration(string, params ITypeRef[])
  nameWithType: IModule.GetIntrinsicDeclaration(string, params ITypeRef[])
  fullName: Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(string, params Ubiquity.NET.Llvm.Types.ITypeRef[])
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: GetIntrinsicDeclaration
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 370
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets a declaration for an LLVM intrinsic function
  remarks: >-
    This method will match an overloaded intrinsic based on the parameter types. If an intrinsic

    has no overloads then an exact match is required. If the intrinsic has overloads than a prefix

    match is used.

    <div class="IMPORTANT"><h5>important</h5><p>

    It is important to note that the prefix match requires the name provided to have a length greater

    than that of the name of the intrinsic and that the name starts with a matching overloaded intrinsic.

    for example: 'llvm.memset' would not match the overloaded memset intrinsic but 'llvm.memset.p.i' does.

    Thus, it is generally a good idea to use the signature from the LLVM documentation without the address

    space, or bit widths. That is instead of 'llvm.memset.p0i8.i32' use 'llvm.memset.p.i'.

    </p></div>
  example: []
  syntax:
    content: Function GetIntrinsicDeclaration(string name, params ITypeRef[] args)
    parameters:
    - id: name
      type: System.String
      description: Name of the intrinsic
    - id: args
      type: Ubiquity.NET.Llvm.Types.ITypeRef[]
      description: Args for the intrinsic
    return:
      type: Ubiquity.NET.Llvm.Values.Function
      description: Function declaration
    content.vb: Function GetIntrinsicDeclaration(name As String, ParamArray args As ITypeRef()) As [Function]
  overload: Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration*
  nameWithType.vb: IModule.GetIntrinsicDeclaration(String, ParamArray ITypeRef())
  fullName.vb: Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(String, ParamArray Ubiquity.NET.Llvm.Types.ITypeRef())
  name.vb: GetIntrinsicDeclaration(String, ParamArray ITypeRef())
- uid: Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef[])
  commentId: M:Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef[])
  id: GetIntrinsicDeclaration(System.UInt32,Ubiquity.NET.Llvm.Types.ITypeRef[])
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: GetIntrinsicDeclaration(uint, params ITypeRef[])
  nameWithType: IModule.GetIntrinsicDeclaration(uint, params ITypeRef[])
  fullName: Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(uint, params Ubiquity.NET.Llvm.Types.ITypeRef[])
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: GetIntrinsicDeclaration
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 376
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Gets a declaration for an LLVM intrinsic function
  example: []
  syntax:
    content: Function GetIntrinsicDeclaration(uint id, params ITypeRef[] args)
    parameters:
    - id: id
      type: System.UInt32
      description: id of the intrinsic
    - id: args
      type: Ubiquity.NET.Llvm.Types.ITypeRef[]
      description: Arguments for the intrinsic
    return:
      type: Ubiquity.NET.Llvm.Values.Function
      description: Function declaration
    content.vb: Function GetIntrinsicDeclaration(id As UInteger, ParamArray args As ITypeRef()) As [Function]
  overload: Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration*
  nameWithType.vb: IModule.GetIntrinsicDeclaration(UInteger, ParamArray ITypeRef())
  fullName.vb: Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration(UInteger, ParamArray Ubiquity.NET.Llvm.Types.ITypeRef())
  name.vb: GetIntrinsicDeclaration(UInteger, ParamArray ITypeRef())
- uid: Ubiquity.NET.Llvm.IModule.Clone
  commentId: M:Ubiquity.NET.Llvm.IModule.Clone
  id: Clone
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: IModule.Clone()
  fullName: Ubiquity.NET.Llvm.IModule.Clone()
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Clone
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 380
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Clones the current module into the same context
  example: []
  syntax:
    content: Module Clone()
    return:
      type: Ubiquity.NET.Llvm.Module
      description: Cloned module
    content.vb: Function Clone() As [Module]
  overload: Ubiquity.NET.Llvm.IModule.Clone*
- uid: Ubiquity.NET.Llvm.IModule.Clone(Ubiquity.NET.Llvm.IContext)
  commentId: M:Ubiquity.NET.Llvm.IModule.Clone(Ubiquity.NET.Llvm.IContext)
  id: Clone(Ubiquity.NET.Llvm.IContext)
  parent: Ubiquity.NET.Llvm.IModule
  langs:
  - csharp
  - vb
  name: Clone(IContext)
  nameWithType: IModule.Clone(IContext)
  fullName: Ubiquity.NET.Llvm.IModule.Clone(Ubiquity.NET.Llvm.IContext)
  type: Method
  source:
    remote:
      path: src/Ubiquity.NET.Llvm/IModule.cs
      branch: LLVM20
      repo: https://github.com/smaillet/Llvm.NET.git
    id: Clone
    path: ../src/Ubiquity.NET.Llvm/IModule.cs
    startLine: 385
  assemblies:
  - Ubiquity.NET.Llvm
  namespace: Ubiquity.NET.Llvm
  summary: Clones the module into a new <xref href="Ubiquity.NET.Llvm.IContext" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: Module Clone(IContext targetContext)
    parameters:
    - id: targetContext
      type: Ubiquity.NET.Llvm.IContext
      description: <xref href="Ubiquity.NET.Llvm.IContext" data-throw-if-not-resolved="false"></xref> to clone the module into
    return:
      type: Ubiquity.NET.Llvm.Module
      description: Cloned copy of the module
    content.vb: Function Clone(targetContext As IContext) As [Module]
  overload: Ubiquity.NET.Llvm.IModule.Clone*
references:
- uid: Ubiquity.NET.Llvm.Module
  commentId: T:Ubiquity.NET.Llvm.Module
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.Module.html
  name: Module
  nameWithType: Module
  fullName: Ubiquity.NET.Llvm.Module
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Ubiquity.NET.Llvm
  commentId: N:Ubiquity.NET.Llvm
  href: Ubiquity.html
  name: Ubiquity.NET.Llvm
  nameWithType: Ubiquity.NET.Llvm
  fullName: Ubiquity.NET.Llvm
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Ubiquity.NET.Llvm.IModule.SourceFileName*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.SourceFileName
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_SourceFileName
  name: SourceFileName
  nameWithType: IModule.SourceFileName
  fullName: Ubiquity.NET.Llvm.IModule.SourceFileName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Ubiquity.NET.Llvm.IModule.Comdats*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.Comdats
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Comdats
  name: Comdats
  nameWithType: IModule.Comdats
  fullName: Ubiquity.NET.Llvm.IModule.Comdats
- uid: Ubiquity.NET.Llvm.ComdatCollection
  commentId: T:Ubiquity.NET.Llvm.ComdatCollection
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.ComdatCollection.html
  name: ComdatCollection
  nameWithType: ComdatCollection
  fullName: Ubiquity.NET.Llvm.ComdatCollection
- uid: Ubiquity.NET.Llvm.IModule.Context
  commentId: P:Ubiquity.NET.Llvm.IModule.Context
  parent: Ubiquity.NET.Llvm.IModule
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Context
  name: Context
  nameWithType: IModule.Context
  fullName: Ubiquity.NET.Llvm.IModule.Context
- uid: Ubiquity.NET.Llvm.IModule.Context*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.Context
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Context
  name: Context
  nameWithType: IModule.Context
  fullName: Ubiquity.NET.Llvm.IModule.Context
- uid: Ubiquity.NET.Llvm.IContext
  commentId: T:Ubiquity.NET.Llvm.IContext
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.IContext.html
  name: IContext
  nameWithType: IContext
  fullName: Ubiquity.NET.Llvm.IContext
- uid: Ubiquity.NET.Llvm.IModule
  commentId: T:Ubiquity.NET.Llvm.IModule
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.IModule.html
  name: IModule
  nameWithType: IModule
  fullName: Ubiquity.NET.Llvm.IModule
- uid: Ubiquity.NET.Llvm.IModule.ModuleFlags*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.ModuleFlags
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_ModuleFlags
  name: ModuleFlags
  nameWithType: IModule.ModuleFlags
  fullName: Ubiquity.NET.Llvm.IModule.ModuleFlags
- uid: System.Collections.Generic.IReadOnlyDictionary{System.String,Ubiquity.NET.Llvm.Metadata.ModuleFlag}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{System.String,Ubiquity.NET.Llvm.Metadata.ModuleFlag}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  name: IReadOnlyDictionary<string, ModuleFlag>
  nameWithType: IReadOnlyDictionary<string, ModuleFlag>
  fullName: System.Collections.Generic.IReadOnlyDictionary<string, Ubiquity.NET.Llvm.Metadata.ModuleFlag>
  nameWithType.vb: IReadOnlyDictionary(Of String, ModuleFlag)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of String, Ubiquity.NET.Llvm.Metadata.ModuleFlag)
  name.vb: IReadOnlyDictionary(Of String, ModuleFlag)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Metadata.ModuleFlag
    name: ModuleFlag
    href: Ubiquity.NET.Llvm.Metadata.ModuleFlag.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.Metadata.ModuleFlag
    name: ModuleFlag
    href: Ubiquity.NET.Llvm.Metadata.ModuleFlag.html
  - name: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Ubiquity.NET.Llvm.IModule.CompileUnits*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.CompileUnits
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_CompileUnits
  name: CompileUnits
  nameWithType: IModule.CompileUnits
  fullName: Ubiquity.NET.Llvm.IModule.CompileUnits
- uid: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.DICompileUnit}
  commentId: T:System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.DICompileUnit}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<DICompileUnit>
  nameWithType: IEnumerable<DICompileUnit>
  fullName: System.Collections.Generic.IEnumerable<Ubiquity.NET.Llvm.DebugInfo.DICompileUnit>
  nameWithType.vb: IEnumerable(Of DICompileUnit)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Ubiquity.NET.Llvm.DebugInfo.DICompileUnit)
  name.vb: IEnumerable(Of DICompileUnit)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Ubiquity.NET.Llvm.DebugInfo.DICompileUnit
    name: DICompileUnit
    href: Ubiquity.NET.Llvm.DebugInfo.DICompileUnit.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DICompileUnit
    name: DICompileUnit
    href: Ubiquity.NET.Llvm.DebugInfo.DICompileUnit.html
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Ubiquity.NET.Llvm.TargetMachine
  commentId: T:Ubiquity.NET.Llvm.TargetMachine
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.TargetMachine.html
  name: TargetMachine
  nameWithType: TargetMachine
  fullName: Ubiquity.NET.Llvm.TargetMachine
- uid: Ubiquity.NET.Llvm.IModule.DataLayoutString*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.DataLayoutString
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_DataLayoutString
  name: DataLayoutString
  nameWithType: IModule.DataLayoutString
  fullName: Ubiquity.NET.Llvm.IModule.DataLayoutString
- uid: Ubiquity.NET.InteropHelpers.LazyEncodedString
  commentId: T:Ubiquity.NET.InteropHelpers.LazyEncodedString
  parent: Ubiquity.NET.InteropHelpers
  name: LazyEncodedString
  nameWithType: LazyEncodedString
  fullName: Ubiquity.NET.InteropHelpers.LazyEncodedString
- uid: Ubiquity.NET.InteropHelpers
  commentId: N:Ubiquity.NET.InteropHelpers
  name: Ubiquity.NET.InteropHelpers
  nameWithType: Ubiquity.NET.InteropHelpers
  fullName: Ubiquity.NET.InteropHelpers
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
  - name: .
  - uid: Ubiquity.NET
    name: NET
  - name: .
  - uid: Ubiquity.NET.InteropHelpers
    name: InteropHelpers
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
  - name: .
  - uid: Ubiquity.NET
    name: NET
  - name: .
  - uid: Ubiquity.NET.InteropHelpers
    name: InteropHelpers
- uid: Ubiquity.NET.Llvm.IModule.DataLayoutString
  commentId: P:Ubiquity.NET.Llvm.IModule.DataLayoutString
  parent: Ubiquity.NET.Llvm.IModule
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_DataLayoutString
  name: DataLayoutString
  nameWithType: IModule.DataLayoutString
  fullName: Ubiquity.NET.Llvm.IModule.DataLayoutString
- uid: Ubiquity.NET.Llvm.IDataLayout
  commentId: T:Ubiquity.NET.Llvm.IDataLayout
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.IDataLayout.html
  name: IDataLayout
  nameWithType: IDataLayout
  fullName: Ubiquity.NET.Llvm.IDataLayout
- uid: Ubiquity.NET.Llvm.IModule.Layout*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.Layout
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Layout
  name: Layout
  nameWithType: IModule.Layout
  fullName: Ubiquity.NET.Llvm.IModule.Layout
- uid: Ubiquity.NET.Llvm.IModule.TargetTriple*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.TargetTriple
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_TargetTriple
  name: TargetTriple
  nameWithType: IModule.TargetTriple
  fullName: Ubiquity.NET.Llvm.IModule.TargetTriple
- uid: Ubiquity.NET.Llvm.Values.GlobalVariable
  commentId: T:Ubiquity.NET.Llvm.Values.GlobalVariable
  parent: Ubiquity.NET.Llvm.Values
  href: Ubiquity.NET.Llvm.Values.GlobalVariable.html
  name: GlobalVariable
  nameWithType: GlobalVariable
  fullName: Ubiquity.NET.Llvm.Values.GlobalVariable
- uid: Ubiquity.NET.Llvm.IModule.Globals*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.Globals
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Globals
  name: Globals
  nameWithType: IModule.Globals
  fullName: Ubiquity.NET.Llvm.IModule.Globals
- uid: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.GlobalVariable}
  commentId: T:System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.GlobalVariable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<GlobalVariable>
  nameWithType: IEnumerable<GlobalVariable>
  fullName: System.Collections.Generic.IEnumerable<Ubiquity.NET.Llvm.Values.GlobalVariable>
  nameWithType.vb: IEnumerable(Of GlobalVariable)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Ubiquity.NET.Llvm.Values.GlobalVariable)
  name.vb: IEnumerable(Of GlobalVariable)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Ubiquity.NET.Llvm.Values.GlobalVariable
    name: GlobalVariable
    href: Ubiquity.NET.Llvm.Values.GlobalVariable.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.GlobalVariable
    name: GlobalVariable
    href: Ubiquity.NET.Llvm.Values.GlobalVariable.html
  - name: )
- uid: Ubiquity.NET.Llvm.Values
  commentId: N:Ubiquity.NET.Llvm.Values
  href: Ubiquity.html
  name: Ubiquity.NET.Llvm.Values
  nameWithType: Ubiquity.NET.Llvm.Values
  fullName: Ubiquity.NET.Llvm.Values
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.Values
    name: Values
    href: Ubiquity.NET.Llvm.Values.html
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.Values
    name: Values
    href: Ubiquity.NET.Llvm.Values.html
- uid: Ubiquity.NET.Llvm.IModule.Functions*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.Functions
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Functions
  name: Functions
  nameWithType: IModule.Functions
  fullName: Ubiquity.NET.Llvm.IModule.Functions
- uid: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.Function}
  commentId: T:System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.Function}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Function>
  nameWithType: IEnumerable<Function>
  fullName: System.Collections.Generic.IEnumerable<Ubiquity.NET.Llvm.Values.Function>
  nameWithType.vb: IEnumerable(Of Function)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Ubiquity.NET.Llvm.Values.Function)
  name.vb: IEnumerable(Of Function)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Ubiquity.NET.Llvm.Values.Function
    name: Function
    href: Ubiquity.NET.Llvm.Values.Function.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.Function
    name: Function
    href: Ubiquity.NET.Llvm.Values.Function.html
  - name: )
- uid: Ubiquity.NET.Llvm.IModule.Aliases*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.Aliases
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Aliases
  name: Aliases
  nameWithType: IModule.Aliases
  fullName: Ubiquity.NET.Llvm.IModule.Aliases
- uid: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.GlobalAlias}
  commentId: T:System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.GlobalAlias}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<GlobalAlias>
  nameWithType: IEnumerable<GlobalAlias>
  fullName: System.Collections.Generic.IEnumerable<Ubiquity.NET.Llvm.Values.GlobalAlias>
  nameWithType.vb: IEnumerable(Of GlobalAlias)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Ubiquity.NET.Llvm.Values.GlobalAlias)
  name.vb: IEnumerable(Of GlobalAlias)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Ubiquity.NET.Llvm.Values.GlobalAlias
    name: GlobalAlias
    href: Ubiquity.NET.Llvm.Values.GlobalAlias.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.GlobalAlias
    name: GlobalAlias
    href: Ubiquity.NET.Llvm.Values.GlobalAlias.html
  - name: )
- uid: Ubiquity.NET.Llvm.Metadata.NamedMDNode
  commentId: T:Ubiquity.NET.Llvm.Metadata.NamedMDNode
  href: Ubiquity.NET.Llvm.Metadata.NamedMDNode.html
  name: NamedMDNode
  nameWithType: NamedMDNode
  fullName: Ubiquity.NET.Llvm.Metadata.NamedMDNode
- uid: Ubiquity.NET.Llvm.IModule.NamedMetadata*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.NamedMetadata
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_NamedMetadata
  name: NamedMetadata
  nameWithType: IModule.NamedMetadata
  fullName: Ubiquity.NET.Llvm.IModule.NamedMetadata
- uid: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Metadata.NamedMDNode}
  commentId: T:System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Metadata.NamedMDNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<NamedMDNode>
  nameWithType: IEnumerable<NamedMDNode>
  fullName: System.Collections.Generic.IEnumerable<Ubiquity.NET.Llvm.Metadata.NamedMDNode>
  nameWithType.vb: IEnumerable(Of NamedMDNode)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Ubiquity.NET.Llvm.Metadata.NamedMDNode)
  name.vb: IEnumerable(Of NamedMDNode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Ubiquity.NET.Llvm.Metadata.NamedMDNode
    name: NamedMDNode
    href: Ubiquity.NET.Llvm.Metadata.NamedMDNode.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.Metadata.NamedMDNode
    name: NamedMDNode
    href: Ubiquity.NET.Llvm.Metadata.NamedMDNode.html
  - name: )
- uid: Ubiquity.NET.Llvm.Values.GlobalIFunc
  commentId: T:Ubiquity.NET.Llvm.Values.GlobalIFunc
  parent: Ubiquity.NET.Llvm.Values
  href: Ubiquity.NET.Llvm.Values.GlobalIFunc.html
  name: GlobalIFunc
  nameWithType: GlobalIFunc
  fullName: Ubiquity.NET.Llvm.Values.GlobalIFunc
- uid: Ubiquity.NET.Llvm.IModule.IndirectFunctions*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.IndirectFunctions
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_IndirectFunctions
  name: IndirectFunctions
  nameWithType: IModule.IndirectFunctions
  fullName: Ubiquity.NET.Llvm.IModule.IndirectFunctions
- uid: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.GlobalIFunc}
  commentId: T:System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.Values.GlobalIFunc}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<GlobalIFunc>
  nameWithType: IEnumerable<GlobalIFunc>
  fullName: System.Collections.Generic.IEnumerable<Ubiquity.NET.Llvm.Values.GlobalIFunc>
  nameWithType.vb: IEnumerable(Of GlobalIFunc)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Ubiquity.NET.Llvm.Values.GlobalIFunc)
  name.vb: IEnumerable(Of GlobalIFunc)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Ubiquity.NET.Llvm.Values.GlobalIFunc
    name: GlobalIFunc
    href: Ubiquity.NET.Llvm.Values.GlobalIFunc.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.Values.GlobalIFunc
    name: GlobalIFunc
    href: Ubiquity.NET.Llvm.Values.GlobalIFunc.html
  - name: )
- uid: Ubiquity.NET.Llvm.IModule.Name*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.Name
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Name
  name: Name
  nameWithType: IModule.Name
  fullName: Ubiquity.NET.Llvm.IModule.Name
- uid: Ubiquity.NET.Llvm.IModule.ModuleInlineAsm*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.ModuleInlineAsm
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_ModuleInlineAsm
  name: ModuleInlineAsm
  nameWithType: IModule.ModuleInlineAsm
  fullName: Ubiquity.NET.Llvm.IModule.ModuleInlineAsm
- uid: Ubiquity.NET.Llvm.IModule.AppendInlineAsm*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.AppendInlineAsm
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AppendInlineAsm_System_String_
  name: AppendInlineAsm
  nameWithType: IModule.AppendInlineAsm
  fullName: Ubiquity.NET.Llvm.IModule.AppendInlineAsm
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: Ubiquity.NET.Llvm.IModule.TryRunPasses*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.TryRunPasses
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_TryRunPasses_System_String___
  name: TryRunPasses
  nameWithType: IModule.TryRunPasses
  fullName: Ubiquity.NET.Llvm.IModule.TryRunPasses
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: Ubiquity.NET.Llvm.ErrorInfo
  commentId: T:Ubiquity.NET.Llvm.ErrorInfo
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.ErrorInfo.html
  name: ErrorInfo
  nameWithType: ErrorInfo
  fullName: Ubiquity.NET.Llvm.ErrorInfo
- uid: Ubiquity.NET.Llvm.PassBuilderOptions
  commentId: T:Ubiquity.NET.Llvm.PassBuilderOptions
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.PassBuilderOptions.html
  name: PassBuilderOptions
  nameWithType: PassBuilderOptions
  fullName: Ubiquity.NET.Llvm.PassBuilderOptions
- uid: Ubiquity.NET.Llvm.IModule.Link*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.Link
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Link_Ubiquity_NET_Llvm_Module_
  name: Link
  nameWithType: IModule.Link
  fullName: Ubiquity.NET.Llvm.IModule.Link
- uid: Ubiquity.NET.Llvm.IModule.Verify*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.Verify
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Verify_System_String__
  name: Verify
  nameWithType: IModule.Verify
  fullName: Ubiquity.NET.Llvm.IModule.Verify
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Ubiquity.NET.Llvm.IModule.TryGetFunction*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.TryGetFunction
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_TryGetFunction_System_String_Ubiquity_NET_Llvm_Values_Function__
  name: TryGetFunction
  nameWithType: IModule.TryGetFunction
  fullName: Ubiquity.NET.Llvm.IModule.TryGetFunction
- uid: Ubiquity.NET.Llvm.Values.Function
  commentId: T:Ubiquity.NET.Llvm.Values.Function
  parent: Ubiquity.NET.Llvm.Values
  href: Ubiquity.NET.Llvm.Values.Function.html
  name: Function
  nameWithType: Function
  fullName: Ubiquity.NET.Llvm.Values.Function
- uid: Ubiquity.NET.Llvm.IModule.CreateAndAddGlobalIFunc*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.CreateAndAddGlobalIFunc
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_CreateAndAddGlobalIFunc_System_String_Ubiquity_NET_Llvm_Types_ITypeRef_System_UInt32_Ubiquity_NET_Llvm_Values_Function_
  name: CreateAndAddGlobalIFunc
  nameWithType: IModule.CreateAndAddGlobalIFunc
  fullName: Ubiquity.NET.Llvm.IModule.CreateAndAddGlobalIFunc
- uid: Ubiquity.NET.Llvm.Types.ITypeRef
  commentId: T:Ubiquity.NET.Llvm.Types.ITypeRef
  parent: Ubiquity.NET.Llvm.Types
  href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  name: ITypeRef
  nameWithType: ITypeRef
  fullName: Ubiquity.NET.Llvm.Types.ITypeRef
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint32
  name: uint
  nameWithType: uint
  fullName: uint
  nameWithType.vb: UInteger
  fullName.vb: UInteger
  name.vb: UInteger
- uid: Ubiquity.NET.Llvm.Types
  commentId: N:Ubiquity.NET.Llvm.Types
  href: Ubiquity.html
  name: Ubiquity.NET.Llvm.Types
  nameWithType: Ubiquity.NET.Llvm.Types
  fullName: Ubiquity.NET.Llvm.Types
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.Types
    name: Types
    href: Ubiquity.NET.Llvm.Types.html
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.Types
    name: Types
    href: Ubiquity.NET.Llvm.Types.html
- uid: Ubiquity.NET.Llvm.IModule.TryGetNamedGlobalIFunc*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.TryGetNamedGlobalIFunc
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_TryGetNamedGlobalIFunc_System_String_Ubiquity_NET_Llvm_Values_GlobalIFunc__
  name: TryGetNamedGlobalIFunc
  nameWithType: IModule.TryGetNamedGlobalIFunc
  fullName: Ubiquity.NET.Llvm.IModule.TryGetNamedGlobalIFunc
- uid: Ubiquity.NET.Llvm.IModule.CreateFunction*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.CreateFunction
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_CreateFunction_System_String_Ubiquity_NET_Llvm_Types_IFunctionType_
  name: CreateFunction
  nameWithType: IModule.CreateFunction
  fullName: Ubiquity.NET.Llvm.IModule.CreateFunction
- uid: Ubiquity.NET.Llvm.Types.IFunctionType
  commentId: T:Ubiquity.NET.Llvm.Types.IFunctionType
  parent: Ubiquity.NET.Llvm.Types
  href: Ubiquity.NET.Llvm.Types.IFunctionType.html
  name: IFunctionType
  nameWithType: IFunctionType
  fullName: Ubiquity.NET.Llvm.Types.IFunctionType
- uid: Ubiquity.NET.Llvm.IModule.WriteToFile*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.WriteToFile
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_WriteToFile_System_String_
  name: WriteToFile
  nameWithType: IModule.WriteToFile
  fullName: Ubiquity.NET.Llvm.IModule.WriteToFile
- uid: Ubiquity.NET.Llvm.IModule.WriteToTextFile*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.WriteToTextFile
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_WriteToTextFile_System_String_System_String__
  name: WriteToTextFile
  nameWithType: IModule.WriteToTextFile
  fullName: Ubiquity.NET.Llvm.IModule.WriteToTextFile
- uid: Ubiquity.NET.Llvm.IModule.WriteToString*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.WriteToString
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_WriteToString
  name: WriteToString
  nameWithType: IModule.WriteToString
  fullName: Ubiquity.NET.Llvm.IModule.WriteToString
- uid: Ubiquity.NET.Llvm.MemoryBuffer
  commentId: T:Ubiquity.NET.Llvm.MemoryBuffer
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.MemoryBuffer.html
  name: MemoryBuffer
  nameWithType: MemoryBuffer
  fullName: Ubiquity.NET.Llvm.MemoryBuffer
- uid: Ubiquity.NET.Llvm.IModule.WriteToBuffer*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.WriteToBuffer
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_WriteToBuffer
  name: WriteToBuffer
  nameWithType: IModule.WriteToBuffer
  fullName: Ubiquity.NET.Llvm.IModule.WriteToBuffer
- uid: Ubiquity.NET.Llvm.Values.GlobalAlias
  commentId: T:Ubiquity.NET.Llvm.Values.GlobalAlias
  parent: Ubiquity.NET.Llvm.Values
  href: Ubiquity.NET.Llvm.Values.GlobalAlias.html
  name: GlobalAlias
  nameWithType: GlobalAlias
  fullName: Ubiquity.NET.Llvm.Values.GlobalAlias
- uid: Ubiquity.NET.Llvm.IModule.AddAlias*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.AddAlias
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddAlias_Ubiquity_NET_Llvm_Values_Value_System_String_System_UInt32_
  name: AddAlias
  nameWithType: IModule.AddAlias
  fullName: Ubiquity.NET.Llvm.IModule.AddAlias
- uid: Ubiquity.NET.Llvm.Values.Value
  commentId: T:Ubiquity.NET.Llvm.Values.Value
  parent: Ubiquity.NET.Llvm.Values
  href: Ubiquity.NET.Llvm.Values.Value.html
  name: Value
  nameWithType: Value
  fullName: Ubiquity.NET.Llvm.Values.Value
- uid: Ubiquity.NET.Llvm.IModule.GetAlias*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.GetAlias
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_GetAlias_System_String_
  name: GetAlias
  nameWithType: IModule.GetAlias
  fullName: Ubiquity.NET.Llvm.IModule.GetAlias
- uid: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddGlobalInAddressSpace_System_UInt32_Ubiquity_NET_Llvm_Types_ITypeRef_System_String_
  name: AddGlobalInAddressSpace
  nameWithType: IModule.AddGlobalInAddressSpace
  fullName: Ubiquity.NET.Llvm.IModule.AddGlobalInAddressSpace
- uid: Ubiquity.NET.Llvm.Values.Linkage
  commentId: T:Ubiquity.NET.Llvm.Values.Linkage
  parent: Ubiquity.NET.Llvm.Values
  href: Ubiquity.NET.Llvm.Values.Linkage.html
  name: Linkage
  nameWithType: Linkage
  fullName: Ubiquity.NET.Llvm.Values.Linkage
- uid: Ubiquity.NET.Llvm.Values.Constant
  commentId: T:Ubiquity.NET.Llvm.Values.Constant
  parent: Ubiquity.NET.Llvm.Values
  href: Ubiquity.NET.Llvm.Values.Constant.html
  name: Constant
  nameWithType: Constant
  fullName: Ubiquity.NET.Llvm.Values.Constant
- uid: Ubiquity.NET.Llvm.IModule.AddGlobal*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.AddGlobal
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddGlobal_Ubiquity_NET_Llvm_Types_ITypeRef_System_String_
  name: AddGlobal
  nameWithType: IModule.AddGlobal
  fullName: Ubiquity.NET.Llvm.IModule.AddGlobal
- uid: Ubiquity.NET.Llvm.IModule.GetTypeByName*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.GetTypeByName
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_GetTypeByName_System_String_
  name: GetTypeByName
  nameWithType: IModule.GetTypeByName
  fullName: Ubiquity.NET.Llvm.IModule.GetTypeByName
- uid: Ubiquity.NET.Llvm.IModule.GetNamedGlobal*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.GetNamedGlobal
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_GetNamedGlobal_System_String_
  name: GetNamedGlobal
  nameWithType: IModule.GetNamedGlobal
  fullName: Ubiquity.NET.Llvm.IModule.GetNamedGlobal
- uid: Ubiquity.NET.Llvm.IModule.AddModuleFlag*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.AddModuleFlag
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddModuleFlag_Ubiquity_NET_Llvm_ModuleFlagBehavior_System_String_System_UInt32_
  name: AddModuleFlag
  nameWithType: IModule.AddModuleFlag
  fullName: Ubiquity.NET.Llvm.IModule.AddModuleFlag
- uid: Ubiquity.NET.Llvm.ModuleFlagBehavior
  commentId: T:Ubiquity.NET.Llvm.ModuleFlagBehavior
  parent: Ubiquity.NET.Llvm
  href: Ubiquity.NET.Llvm.ModuleFlagBehavior.html
  name: ModuleFlagBehavior
  nameWithType: ModuleFlagBehavior
  fullName: Ubiquity.NET.Llvm.ModuleFlagBehavior
- uid: Ubiquity.NET.Llvm.Metadata.IrMetadata
  commentId: T:Ubiquity.NET.Llvm.Metadata.IrMetadata
  parent: Ubiquity.NET.Llvm.Metadata
  href: Ubiquity.NET.Llvm.Metadata.IrMetadata.html
  name: IrMetadata
  nameWithType: IrMetadata
  fullName: Ubiquity.NET.Llvm.Metadata.IrMetadata
- uid: Ubiquity.NET.Llvm.Metadata
  commentId: N:Ubiquity.NET.Llvm.Metadata
  href: Ubiquity.html
  name: Ubiquity.NET.Llvm.Metadata
  nameWithType: Ubiquity.NET.Llvm.Metadata
  fullName: Ubiquity.NET.Llvm.Metadata
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.Metadata
    name: Metadata
    href: Ubiquity.NET.Llvm.Metadata.html
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.Metadata
    name: Metadata
    href: Ubiquity.NET.Llvm.Metadata.html
- uid: Ubiquity.NET.Llvm.IModule.AddNamedMetadataOperand*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.AddNamedMetadataOperand
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddNamedMetadataOperand_System_String_Ubiquity_NET_Llvm_Metadata_IrMetadata_
  name: AddNamedMetadataOperand
  nameWithType: IModule.AddNamedMetadataOperand
  fullName: Ubiquity.NET.Llvm.IModule.AddNamedMetadataOperand
- uid: Ubiquity.NET.Llvm.IModule.AddVersionIdentMetadata*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.AddVersionIdentMetadata
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_AddVersionIdentMetadata_System_String_
  name: AddVersionIdentMetadata
  nameWithType: IModule.AddVersionIdentMetadata
  fullName: Ubiquity.NET.Llvm.IModule.AddVersionIdentMetadata
- uid: Ubiquity.NET.Llvm.DebugInfo.DIBuilder
  commentId: T:Ubiquity.NET.Llvm.DebugInfo.DIBuilder
  parent: Ubiquity.NET.Llvm.DebugInfo
  href: Ubiquity.NET.Llvm.DebugInfo.DIBuilder.html
  name: DIBuilder
  nameWithType: DIBuilder
  fullName: Ubiquity.NET.Llvm.DebugInfo.DIBuilder
- uid: Ubiquity.NET.Llvm.DebugInfo.DIScope
  commentId: T:Ubiquity.NET.Llvm.DebugInfo.DIScope
  parent: Ubiquity.NET.Llvm.DebugInfo
  href: Ubiquity.NET.Llvm.DebugInfo.DIScope.html
  name: DIScope
  nameWithType: DIScope
  fullName: Ubiquity.NET.Llvm.DebugInfo.DIScope
- uid: Ubiquity.NET.Llvm.DebugInfo.DIFile
  commentId: T:Ubiquity.NET.Llvm.DebugInfo.DIFile
  parent: Ubiquity.NET.Llvm.DebugInfo
  href: Ubiquity.NET.Llvm.DebugInfo.DIFile.html
  name: DIFile
  nameWithType: DIFile
  fullName: Ubiquity.NET.Llvm.DebugInfo.DIFile
- uid: Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType
  commentId: T:Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType
  parent: Ubiquity.NET.Llvm.DebugInfo
  href: Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType.html
  name: DebugFunctionType
  nameWithType: DebugFunctionType
  fullName: Ubiquity.NET.Llvm.DebugInfo.DebugFunctionType
- uid: Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags
  commentId: T:Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags
  parent: Ubiquity.NET.Llvm.DebugInfo
  href: Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags.html
  name: DebugInfoFlags
  nameWithType: DebugInfoFlags
  fullName: Ubiquity.NET.Llvm.DebugInfo.DebugInfoFlags
- uid: Ubiquity.NET.Llvm.DebugInfo
  commentId: N:Ubiquity.NET.Llvm.DebugInfo
  href: Ubiquity.html
  name: Ubiquity.NET.Llvm.DebugInfo
  nameWithType: Ubiquity.NET.Llvm.DebugInfo
  fullName: Ubiquity.NET.Llvm.DebugInfo
  spec.csharp:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.DebugInfo
    name: DebugInfo
    href: Ubiquity.NET.Llvm.DebugInfo.html
  spec.vb:
  - uid: Ubiquity
    name: Ubiquity
    href: Ubiquity.html
  - name: .
  - uid: Ubiquity.NET
    name: NET
    href: Ubiquity.NET.html
  - name: .
  - uid: Ubiquity.NET.Llvm
    name: Llvm
    href: Ubiquity.NET.Llvm.html
  - name: .
  - uid: Ubiquity.NET.Llvm.DebugInfo
    name: DebugInfo
    href: Ubiquity.NET.Llvm.DebugInfo.html
- uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}
  commentId: T:Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}
  parent: Ubiquity.NET.Llvm.DebugInfo
  definition: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
  href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  name: IDebugType<ITypeRef, DIType>
  nameWithType: IDebugType<ITypeRef, DIType>
  fullName: Ubiquity.NET.Llvm.DebugInfo.IDebugType<Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType>
  nameWithType.vb: IDebugType(Of ITypeRef, DIType)
  fullName.vb: Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType)
  name.vb: IDebugType(Of ITypeRef, DIType)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: <
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIType
    name: DIType
    href: Ubiquity.NET.Llvm.DebugInfo.DIType.html
  - name: '>'
  spec.vb:
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIType
    name: DIType
    href: Ubiquity.NET.Llvm.DebugInfo.DIType.html
  - name: )
- uid: System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}}
  commentId: T:System.Collections.Generic.IEnumerable{Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<IDebugType<ITypeRef, DIType>>
  nameWithType: IEnumerable<IDebugType<ITypeRef, DIType>>
  fullName: System.Collections.Generic.IEnumerable<Ubiquity.NET.Llvm.DebugInfo.IDebugType<Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType>>
  nameWithType.vb: IEnumerable(Of IDebugType(Of ITypeRef, DIType))
  fullName.vb: System.Collections.Generic.IEnumerable(Of Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType))
  name.vb: IEnumerable(Of IDebugType(Of ITypeRef, DIType))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: <
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIType
    name: DIType
    href: Ubiquity.NET.Llvm.DebugInfo.DIType.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIType
    name: DIType
    href: Ubiquity.NET.Llvm.DebugInfo.DIType.html
  - name: )
  - name: )
- uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
  commentId: T:Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
  href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  name: IDebugType<TNative, TDebug>
  nameWithType: IDebugType<TNative, TDebug>
  fullName: Ubiquity.NET.Llvm.DebugInfo.IDebugType<TNative, TDebug>
  nameWithType.vb: IDebugType(Of TNative, TDebug)
  fullName.vb: Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of TNative, TDebug)
  name.vb: IDebugType(Of TNative, TDebug)
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: <
  - name: TNative
  - name: ','
  - name: " "
  - name: TDebug
  - name: '>'
  spec.vb:
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TNative
  - name: ','
  - name: " "
  - name: TDebug
  - name: )
- uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType{Ubiquity.NET.Llvm.Types.ITypeRef,Ubiquity.NET.Llvm.DebugInfo.DIType}[]
  isExternal: true
  href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  name: IDebugType<ITypeRef, DIType>[]
  nameWithType: IDebugType<ITypeRef, DIType>[]
  fullName: Ubiquity.NET.Llvm.DebugInfo.IDebugType<Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType>[]
  nameWithType.vb: IDebugType(Of ITypeRef, DIType)()
  fullName.vb: Ubiquity.NET.Llvm.DebugInfo.IDebugType(Of Ubiquity.NET.Llvm.Types.ITypeRef, Ubiquity.NET.Llvm.DebugInfo.DIType)()
  name.vb: IDebugType(Of ITypeRef, DIType)()
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: <
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIType
    name: DIType
    href: Ubiquity.NET.Llvm.DebugInfo.DIType.html
  - name: '>'
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Ubiquity.NET.Llvm.DebugInfo.IDebugType`2
    name: IDebugType
    href: Ubiquity.NET.Llvm.DebugInfo.IDebugType-2.html
  - name: (
  - name: Of
  - name: " "
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: ','
  - name: " "
  - uid: Ubiquity.NET.Llvm.DebugInfo.DIType
    name: DIType
    href: Ubiquity.NET.Llvm.DebugInfo.DIType.html
  - name: )
  - name: (
  - name: )
- uid: Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_GetIntrinsicDeclaration_System_String_Ubiquity_NET_Llvm_Types_ITypeRef___
  name: GetIntrinsicDeclaration
  nameWithType: IModule.GetIntrinsicDeclaration
  fullName: Ubiquity.NET.Llvm.IModule.GetIntrinsicDeclaration
- uid: Ubiquity.NET.Llvm.Types.ITypeRef[]
  isExternal: true
  href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  name: ITypeRef[]
  nameWithType: ITypeRef[]
  fullName: Ubiquity.NET.Llvm.Types.ITypeRef[]
  nameWithType.vb: ITypeRef()
  fullName.vb: Ubiquity.NET.Llvm.Types.ITypeRef()
  name.vb: ITypeRef()
  spec.csharp:
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Ubiquity.NET.Llvm.Types.ITypeRef
    name: ITypeRef
    href: Ubiquity.NET.Llvm.Types.ITypeRef.html
  - name: (
  - name: )
- uid: Ubiquity.NET.Llvm.IModule.Clone*
  commentId: Overload:Ubiquity.NET.Llvm.IModule.Clone
  href: Ubiquity.NET.Llvm.IModule.html#Ubiquity_NET_Llvm_IModule_Clone
  name: Clone
  nameWithType: IModule.Clone
  fullName: Ubiquity.NET.Llvm.IModule.Clone
