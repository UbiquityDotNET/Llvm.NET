// Copyright (c) Ubiquity.NET Contributors Contributors. All rights reserved.
// Licensed under the Apache-2.0 WITH LLVM-exception license. See the LICENSE.md file in the project root for full license information.

using System.ComponentModel;

namespace Ubiquity.NET.Llvm.Values
{
    /// <summary>Utility extensions to validate <see cref="AttributeInfo"/> instances</summary>
    /// <remarks>
    /// These are implemented as extension methods to allow <see cref="CallerArgumentExpressionAttribute"/>
    /// to contain the name/expression of the attribute in source that is validated. The "this" value of
    /// an actual member method does not allow for that.
    /// </remarks>
    public static class AttributeInfoValidationExtensions
    {
        /// <summary>Validates an <see cref="AttributeInfo"/></summary>
        /// <param name="self"><see cref="AttributeInfo"/> to validate</param>
        /// <param name="name">Name of the attribute self [Normally generated by compiler]</param>
        /// <exception cref="ArgumentException">Attribute is invalid or not supported on the specified index</exception>
        public static void ThrowIfInvalid(
            this AttributeInfo self,
            [CallerArgumentExpression( nameof( self ) )] string? name = null
            )
        {
            // TODO: Move exception string literals to a resource...
            if(self.IsInvalid)
            {
                throw new ArgumentException( "AttributeInfo is invalid", name );
            }
        }

        /// <summary>Validates an <see cref="AttributeInfo"/></summary>
        /// <param name="self"><see cref="AttributeInfo"/> to validate</param>
        /// <param name="allowedOn">location to validate the attribute supports</param>
        /// <param name="kind">Required kind of argument for the attribute</param>
        /// <param name="name">Name of the attribute self [Normally generated by compiler]</param>
        /// <exception cref="ArgumentException">Attribute is invalid or not supported on the specified index</exception>
        /// <ImplementationNote>
        /// This is implemented as an extension method to allow CallerArgumentExpression to contain the
        /// name/expression of the attribute in source that is validated. The "this" value of an actual
        /// member method does not allow for that.
        /// </ImplementationNote>
        public static void ThrowIfInvalid(
            this AttributeInfo self,
            AttributeAllowedOn allowedOn,
            AttributeArgKind kind,
            [CallerArgumentExpression( nameof( self ) )] string? name = null
            )
        {
            self.ThrowIfInvalid( name );

            // TODO: Move exception string literals to a resource...
            if(!self.AllowedOn.HasFlag( allowedOn ))
            {
                throw new ArgumentException( "Attribute not allowed on specified index", name );
            }

            if(self.ArgKind != kind)
            {
                throw new ArgumentException( $"Attribute self indicates the wrong kind of argument. [expected: {kind}; got: {self.ArgKind}]", nameof( kind ) );
            }
        }

        /// <summary>Throws an exception if the attribute is invalid for the given index</summary>
        /// <param name="self"><see cref="AttributeInfo"/> to test</param>
        /// <param name="index">Function index to test if the attribute is valid for</param>
        /// <param name="name">Name of the expression creating this test [Normally provided by compiler]</param>
        /// <exception cref="InvalidEnumArgumentException">Index is invalid</exception>
        /// <exception cref="ArgumentException">Attribute is not valid or not valid on the given index.</exception>
        public static void ThrowIfInvalid(
            this AttributeInfo self,
            FunctionAttributeIndex index,
            [CallerArgumentExpression( nameof( self ) )] string? name = null
            )
        {
            AttributeAllowedOn allowedOn = index switch
            {
                FunctionAttributeIndex.Function => AttributeAllowedOn.Function,
                FunctionAttributeIndex.ReturnType => AttributeAllowedOn.Return,
                var x when x >= FunctionAttributeIndex.Parameter0 => AttributeAllowedOn.Parameter,
                _ => throw new InvalidEnumArgumentException(nameof(index)),
            };

            ThrowIfInvalid( self, allowedOn, self.ArgKind, name );
        }
    }
}
