// <copyright file="DwarfEnumerations.cs" company=".NET Foundation">
// Copyright (c) .NET Foundation. All rights reserved.
// </copyright>

using System;
using System.Diagnostics.CodeAnalysis;
using Llvm.NET.Interop;

// The names describe what they are, further details are available in the DWARF specs
#pragma warning disable CS1591, SA1600, SA1602 // Enumeration items must be documented

// ReSharper disable IdentifierTypo
namespace Llvm.NET.DebugInfo
{
    /// <summary>DWARF Debug information language</summary>
    public enum SourceLanguage
    {
        /// <summary>Invalid language</summary>
        Invalid = 0,

        C89 = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageC89,
        C = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageC,
        Ada83 = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageAda83,
        CPlusPlus = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageC_plus_plus,
        Cobol74 = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageCobol74,
        Cobol85 = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageCobol85,
        Fortran77 = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageFortran77,
        Fortran90 = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageFortran90,
        Pascal83 = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguagePascal83,
        Modula2 = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageModula2,
        Java = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageJava,
        C99 = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageC99,
        Ada95 = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageAda95,
        Fortran95 = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageFortran95,
        PLI = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguagePLI,
        ObjC = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageObjC,
        ObjCPlusPlus = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageObjC_plus_plus,
        UPC = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageUPC,
        D = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageD,
        Python = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguagePython,
        OpenCL = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageOpenCL,
        Go = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageGo,
        Modula3 = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageModula3,
        Haskell = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageHaskell,
        CPlusPlus03 = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageC_plus_plus_03,
        CPlusPlus11 = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageC_plus_plus_11,
        OCaml = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageOCaml,
        Rust = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageRust,
        C11 = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageC11,
        Swift = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageSwift,
        Julia = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageJulia,
        Dylan = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageDylan,
        CPlusPlus14 = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageC_plus_plus_14,
        Fortran03 = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageFortran03,
        Fortran08 = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageFortran08,
        RenderScript = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageRenderScript,
        Bliss = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageBLISS,
        MipsAssembler = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageMips_Assembler,
        GoogleRenderScript = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageGOOGLE_RenderScript,
        BorlandDelphi = LibLLVMDwarfSourceLanguage.LibLLVMDwarfSourceLanguageBORLAND_Delphi,

        /// <summary>Base value for unofficial languages ids</summary>
        UserMin = 0x8000,

        /// <summary>[Llvm.NET] C# Language</summary>
        CSharp = UserMin + 0x01000,

        /// <summary>[Llvm.NET] .NET IL Assembly language (ILAsm)</summary>
        ILAsm = UserMin + 0x01001,

        /// <summary>Max Value for unofficial language ids</summary>
        UserMax = 0xffff
    }

    /// <summary>Tag kind for the debug information discriminated union nodes</summary>
    [SuppressMessage( "Microsoft.Design", "CA1028:EnumStorageShouldBeInt32", Justification = "matches interop type from native code" )]
    public enum Tag : ushort
    {
        None = LibLLVMDwarfTag.LibLLVMDwarfTagnull,
        ArrayType = LibLLVMDwarfTag.LibLLVMDwarfTagarray_type,
        ClassType = LibLLVMDwarfTag.LibLLVMDwarfTagclass_type,
        EntryPoint = LibLLVMDwarfTag.LibLLVMDwarfTagentry_point,
        EnumerationType = LibLLVMDwarfTag.LibLLVMDwarfTagenumeration_type,
        FormalParameter = LibLLVMDwarfTag.LibLLVMDwarfTagformal_parameter,
        ImportedDeclaration = LibLLVMDwarfTag.LibLLVMDwarfTagimported_declaration,
        TagLable = LibLLVMDwarfTag.LibLLVMDwarfTaglabel,
        LexicalBlock = LibLLVMDwarfTag.LibLLVMDwarfTaglexical_block,
        Member = LibLLVMDwarfTag.LibLLVMDwarfTagmember,
        PointerType = LibLLVMDwarfTag.LibLLVMDwarfTagpointer_type,
        ReferenceType = LibLLVMDwarfTag.LibLLVMDwarfTagreference_type,
        CompileUnit = LibLLVMDwarfTag.LibLLVMDwarfTagcompile_unit,
        StringType = LibLLVMDwarfTag.LibLLVMDwarfTagstring_type,
        StructureType = LibLLVMDwarfTag.LibLLVMDwarfTagstructure_type,
        SubroutineType = LibLLVMDwarfTag.LibLLVMDwarfTagsubroutine_type,
        TypeDef = LibLLVMDwarfTag.LibLLVMDwarfTagtypedef,
        UnionType = LibLLVMDwarfTag.LibLLVMDwarfTagunion_type,
        UnspecifiedParameters = LibLLVMDwarfTag.LibLLVMDwarfTagunspecified_parameters,
        Variant = LibLLVMDwarfTag.LibLLVMDwarfTagvariant,
        CommonBlock = LibLLVMDwarfTag.LibLLVMDwarfTagcommon_block,
        CommonInclusion = LibLLVMDwarfTag.LibLLVMDwarfTagcommon_inclusion,
        Inheritance = LibLLVMDwarfTag.LibLLVMDwarfTaginheritance,
        InlinedSubroutine = LibLLVMDwarfTag.LibLLVMDwarfTaginlined_subroutine,
        Module = LibLLVMDwarfTag.LibLLVMDwarfTagmodule,
        PointerToMemberType = LibLLVMDwarfTag.LibLLVMDwarfTagptr_to_member_type,
        SetType = LibLLVMDwarfTag.LibLLVMDwarfTagset_type,
        SubRangeType = LibLLVMDwarfTag.LibLLVMDwarfTagsubrange_type,
        WithStatement = LibLLVMDwarfTag.LibLLVMDwarfTagwith_stmt,
        AccessDeclaration = LibLLVMDwarfTag.LibLLVMDwarfTagaccess_declaration,
        BaseType = LibLLVMDwarfTag.LibLLVMDwarfTagbase_type,
        CatchBlock = LibLLVMDwarfTag.LibLLVMDwarfTagcatch_block,
        ConstType = LibLLVMDwarfTag.LibLLVMDwarfTagconst_type,
        Constant = LibLLVMDwarfTag.LibLLVMDwarfTagconstant,
        Enumerator = LibLLVMDwarfTag.LibLLVMDwarfTagenumerator,
        FileType = LibLLVMDwarfTag.LibLLVMDwarfTagfile_type,
        Friend = LibLLVMDwarfTag.LibLLVMDwarfTagfriend,
        List = LibLLVMDwarfTag.LibLLVMDwarfTagnamelist,
        ListItem = LibLLVMDwarfTag.LibLLVMDwarfTagnamelist_item,
        PackedType = LibLLVMDwarfTag.LibLLVMDwarfTagpacked_type,
        SubProgram = LibLLVMDwarfTag.LibLLVMDwarfTagsubprogram,
        TypeParameter = LibLLVMDwarfTag.LibLLVMDwarfTagtemplate_type_parameter,
        ValueParameter = LibLLVMDwarfTag.LibLLVMDwarfTagtemplate_value_parameter,
        ThrownType = LibLLVMDwarfTag.LibLLVMDwarfTagthrown_type,
        TryBlock = LibLLVMDwarfTag.LibLLVMDwarfTagtry_block,
        VariantPart = LibLLVMDwarfTag.LibLLVMDwarfTagvariant_part,
        Variable = LibLLVMDwarfTag.LibLLVMDwarfTagvariable,
        VolatileType = LibLLVMDwarfTag.LibLLVMDwarfTagvolatile_type,
        DwarfProcedure = LibLLVMDwarfTag.LibLLVMDwarfTagdwarf_procedure,
        RestrictType = LibLLVMDwarfTag.LibLLVMDwarfTagrestrict_type,
        InterfaceType = LibLLVMDwarfTag.LibLLVMDwarfTaginterface_type,
        Namespace = LibLLVMDwarfTag.LibLLVMDwarfTagnamespace,
        ImportedModule = LibLLVMDwarfTag.LibLLVMDwarfTagimported_module,
        UnspecifiedType = LibLLVMDwarfTag.LibLLVMDwarfTagunspecified_type,
        PartialUnit = LibLLVMDwarfTag.LibLLVMDwarfTagpartial_unit,
        ImportedUnit = LibLLVMDwarfTag.LibLLVMDwarfTagimported_unit,
        Condition = LibLLVMDwarfTag.LibLLVMDwarfTagcondition,
        SharedType = LibLLVMDwarfTag.LibLLVMDwarfTagshared_type,
        TypeUnit = LibLLVMDwarfTag.LibLLVMDwarfTagtype_unit,
        ValueReferenceType = LibLLVMDwarfTag.LibLLVMDwarfTagrvalue_reference_type,
        TemplateAlias = LibLLVMDwarfTag.LibLLVMDwarfTagtemplate_alias,
        CoArrayType = LibLLVMDwarfTag.LibLLVMDwarfTagcoarray_type,
        GenericSubRange = LibLLVMDwarfTag.LibLLVMDwarfTaggeneric_subrange,
        DynamicType = LibLLVMDwarfTag.LibLLVMDwarfTagdynamic_type,
        AtomicType = LibLLVMDwarfTag.LibLLVMDwarfTagatomic_type,
        CallSite = LibLLVMDwarfTag.LibLLVMDwarfTagcall_site,
        CallSiteParameter = LibLLVMDwarfTag.LibLLVMDwarfTagcall_site_parameter,
        SkeletonUnit = LibLLVMDwarfTag.LibLLVMDwarfTagskeleton_unit,
        ImmutableType = LibLLVMDwarfTag.LibLLVMDwarfTagimmutable_type,
        MIPSLoop = LibLLVMDwarfTag.LibLLVMDwarfTagMIPS_loop,
        FormatLablel = LibLLVMDwarfTag.LibLLVMDwarfTagformat_label,
        FunctionTemplate = LibLLVMDwarfTag.LibLLVMDwarfTagfunction_template,
        ClassTemplate = LibLLVMDwarfTag.LibLLVMDwarfTagclass_template,
        GNUTemplateParameter = LibLLVMDwarfTag.LibLLVMDwarfTagGNU_template_template_param,
        GNUTemplateParameterPack = LibLLVMDwarfTag.LibLLVMDwarfTagGNU_template_parameter_pack,
        GNUFormalParameterPack = LibLLVMDwarfTag.LibLLVMDwarfTagGNU_formal_parameter_pack,
        GNUCallSite = LibLLVMDwarfTag.LibLLVMDwarfTagGNU_call_site,
        GNUCallSiteParameter = LibLLVMDwarfTag.LibLLVMDwarfTagGNU_call_site_parameter,
        AppleProperty = LibLLVMDwarfTag.LibLLVMDwarfTagAPPLE_property,
        BorlandProperty = LibLLVMDwarfTag.LibLLVMDwarfTagBORLAND_property,
        BorlandDelphiString = LibLLVMDwarfTag.LibLLVMDwarfTagBORLAND_Delphi_string,
        BorlandDelphiDynamicString = LibLLVMDwarfTag.LibLLVMDwarfTagBORLAND_Delphi_dynamic_array,
        BorlandDelphiSet = LibLLVMDwarfTag.LibLLVMDwarfTagBORLAND_Delphi_set,
        BorlandDelphiVariant = LibLLVMDwarfTag.LibLLVMDwarfTagBORLAND_Delphi_variant,
    }

    /// <summary>Tags for qualified types</summary>
    public enum QualifiedTypeTag
    {
        None = 0,
        Const = Tag.ConstType,
        Volatile = Tag.VolatileType
    }

    /// <summary>Primitive type supported by the debug information</summary>
    public enum DiTypeKind
    {
        Invalid = 0,

        // Encoding attribute values
        Address = 0x01,
        Boolean = 0x02,
        ComplexFloat = 0x03,
        Float = 0x04,
        Signed = 0x05,
        SignedChar = 0x06,
        Unsigned = 0x07,
        UnsignedChar = 0x08,
        ImaginaryFloat = 0x09,
        PackedDecimal = 0x0a,
        NumericString = 0x0b,
        Edited = 0x0c,
        SignedFixed = 0x0d,
        UnsignedFixed = 0x0e,
        DecimalFloat = 0x0f,
        UTF = 0x10,
        LoUser = 0x80,
        HiUser = 0xff
    }

    /// <summary>Debug information flags</summary>
    /// <remarks>
    /// The three accessibility flags are mutually exclusive and rolled together
    /// in the first two bits.
    /// </remarks>
    [SuppressMessage( "Microsoft.Naming", "CA1726:UsePreferredTerms", MessageId = "Flags", Justification = "Matches the underlying wrapped API" )]
    [Flags]
    public enum DebugInfoFlags
    {
        None = LLVMDIFlags.LLVMDIFlagZero,
        Private = LLVMDIFlags.LLVMDIFlagPrivate,
        Protected = LLVMDIFlags.LLVMDIFlagProtected,
        Public = LLVMDIFlags.LLVMDIFlagPublic,
        ForwardDeclaration = LLVMDIFlags.LLVMDIFlagFwdDecl,
        AppleBlock = LLVMDIFlags.LLVMDIFlagAppleBlock,
        BlockByrefStruct = LLVMDIFlags.LLVMDIFlagBlockByrefStruct,
        Virtual = LLVMDIFlags.LLVMDIFlagVirtual,
        Artificial = LLVMDIFlags.LLVMDIFlagArtificial,
        Explicit = LLVMDIFlags.LLVMDIFlagExplicit,
        Prototyped = LLVMDIFlags.LLVMDIFlagPrototyped,
        ObjcClassComplete = LLVMDIFlags.LLVMDIFlagObjcClassComplete,
        ObjectPointer = LLVMDIFlags.LLVMDIFlagObjectPointer,
        Vector = LLVMDIFlags.LLVMDIFlagVector,
        StaticMember = LLVMDIFlags.LLVMDIFlagStaticMember,
        LValueReference = LLVMDIFlags.LLVMDIFlagLValueReference,
        RValueReference = LLVMDIFlags.LLVMDIFlagRValueReference,
        Reserved = LLVMDIFlags.LLVMDIFlagReserved,
        SingleInheritance = LLVMDIFlags.LLVMDIFlagSingleInheritance,
        MultipleInheritance = LLVMDIFlags.LLVMDIFlagMultipleInheritance,
        VirtualInheritance = LLVMDIFlags.LLVMDIFlagVirtualInheritance,
        IntroducedVirtual = LLVMDIFlags.LLVMDIFlagIntroducedVirtual,
        BitField = LLVMDIFlags.LLVMDIFlagBitField,
        NoReturn = LLVMDIFlags.LLVMDIFlagNoReturn,
        MainSubprogram = LLVMDIFlags.LLVMDIFlagMainSubprogram,
        TypePassByValue = LLVMDIFlags.LLVMDIFlagTypePassByValue,
        TypePassByReference = LLVMDIFlags.LLVMDIFlagTypePassByReference,
        EnumClass = LLVMDIFlags.LLVMDIFlagEnumClass,
        FixedEnum = LLVMDIFlags.LLVMDIFlagFixedEnum,
        Thunk = LLVMDIFlags.LLVMDIFlagThunk,
        Trivial = LLVMDIFlags.LLVMDIFlagTrivial,
        BigEndian = LLVMDIFlags.LLVMDIFlagBigEndian,
        LittleEndian = LLVMDIFlags.LLVMDIFlagLittleEndian,
        IndirectVirtualBase = LLVMDIFlags.LLVMDIFlagIndirectVirtualBase,
        Accessibility = LLVMDIFlags.LLVMDIFlagAccessibility,
        PtrToMemberRep = LLVMDIFlags.LLVMDIFlagPtrToMemberRep
    }

#pragma warning disable SA1300 // Element must begin with upper-case letter
    /// <summary>Debug information expression operator</summary>
    [SuppressMessage( "Microsoft.Design", "CA1028:EnumStorageShouldBeInt32", Justification = "Matches underlying interop type" )]
    public enum ExpressionOp : long
    {
        Invalid = 0,
        addr = 0x03,
        deref = 0x06,
        const1u = 0x08,
        const1s = 0x09,
        const2u = 0x0a,
        const2s = 0x0b,
        const4u = 0x0c,
        const4s = 0x0d,
        const8u = 0x0e,
        const8s = 0x0f,
        constu = 0x10,
        consts = 0x11,
        dup = 0x12,
        drop = 0x13,
        over = 0x14,
        pick = 0x15,
        swap = 0x16,
        rot = 0x17,
        xderef = 0x18,
        abs = 0x19,
        and = 0x1a,
        div = 0x1b,
        minus = 0x1c,
        mod = 0x1d,
        mul = 0x1e,
        neg = 0x1f,
        not = 0x20,
        or = 0x21,
        plus = 0x22,
        plus_uconst = 0x23,
        shl = 0x24,
        shr = 0x25,
        shra = 0x26,
        xor = 0x27,
        skip = 0x2f,
        bra = 0x28,
        eq = 0x29,
        ge = 0x2a,
        gt = 0x2b,
        le = 0x2c,
        lt = 0x2d,
        ne = 0x2e,
        lit0 = 0x30,
        lit1 = 0x31,
        lit2 = 0x32,
        lit3 = 0x33,
        lit4 = 0x34,
        lit5 = 0x35,
        lit6 = 0x36,
        lit7 = 0x37,
        lit8 = 0x38,
        lit9 = 0x39,
        lit10 = 0x3a,
        lit11 = 0x3b,
        lit12 = 0x3c,
        lit13 = 0x3d,
        lit14 = 0x3e,
        lit15 = 0x3f,
        lit16 = 0x40,
        lit17 = 0x41,
        lit18 = 0x42,
        lit19 = 0x43,
        lit20 = 0x44,
        lit21 = 0x45,
        lit22 = 0x46,
        lit23 = 0x47,
        lit24 = 0x48,
        lit25 = 0x49,
        lit26 = 0x4a,
        lit27 = 0x4b,
        lit28 = 0x4c,
        lit29 = 0x4d,
        lit30 = 0x4e,
        lit31 = 0x4f,
        reg0 = 0x50,
        reg1 = 0x51,
        reg2 = 0x52,
        reg3 = 0x53,
        reg4 = 0x54,
        reg5 = 0x55,
        reg6 = 0x56,
        reg7 = 0x57,
        reg8 = 0x58,
        reg9 = 0x59,
        reg10 = 0x5a,
        reg11 = 0x5b,
        reg12 = 0x5c,
        reg13 = 0x5d,
        reg14 = 0x5e,
        reg15 = 0x5f,
        reg16 = 0x60,
        reg17 = 0x61,
        reg18 = 0x62,
        reg19 = 0x63,
        reg20 = 0x64,
        reg21 = 0x65,
        reg22 = 0x66,
        reg23 = 0x67,
        reg24 = 0x68,
        reg25 = 0x69,
        reg26 = 0x6a,
        reg27 = 0x6b,
        reg28 = 0x6c,
        reg29 = 0x6d,
        reg30 = 0x6e,
        reg31 = 0x6f,
        breg0 = 0x70,
        breg1 = 0x71,
        breg2 = 0x72,
        breg3 = 0x73,
        breg4 = 0x74,
        breg5 = 0x75,
        breg6 = 0x76,
        breg7 = 0x77,
        breg8 = 0x78,
        breg9 = 0x79,
        breg10 = 0x7a,
        breg11 = 0x7b,
        breg12 = 0x7c,
        breg13 = 0x7d,
        breg14 = 0x7e,
        breg15 = 0x7f,
        breg16 = 0x80,
        breg17 = 0x81,
        breg18 = 0x82,
        breg19 = 0x83,
        breg20 = 0x84,
        breg21 = 0x85,
        breg22 = 0x86,
        breg23 = 0x87,
        breg24 = 0x88,
        breg25 = 0x89,
        breg26 = 0x8a,
        breg27 = 0x8b,
        breg28 = 0x8c,
        breg29 = 0x8d,
        breg30 = 0x8e,
        breg31 = 0x8f,
        regx = 0x90,
        fbreg = 0x91,
        bregx = 0x92,
        piece = 0x93,
        deref_size = 0x94,
        xderef_size = 0x95,
        nop = 0x96,
        push_object_address = 0x97,
        call2 = 0x98,
        call4 = 0x99,
        call_ref = 0x9a,
        form_tls_address = 0x9b,
        call_frame_cfa = 0x9c,
        bit_piece = 0x9d,
        implicit_value = 0x9e,
        stack_value = 0x9f,

        // Extensions for GNU-style thread-local storage.
        GNU_push_tls_address = 0xe0,

        // Extensions for Fission proposal.
        GNU_addr_index = 0xfb,
        GNU_const_index = 0xfc
    }
#pragma warning restore SA1300 // Element must begin with upper-case letter
}
