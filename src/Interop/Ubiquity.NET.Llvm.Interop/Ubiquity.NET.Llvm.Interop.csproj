<Project Sdk="Microsoft.NET.Sdk">
  <Sdk Name="Microsoft.Build.CentralPackageVersions" />
  <PropertyGroup>
    <TargetFramework>netstandard2.1</TargetFramework>
    <LangVersion>8.0</LangVersion>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <DebugType>portable</DebugType>
    <DebugSymbols>true</DebugSymbols>
    <DocumentationFile>$(BaseIntermediateOutputPath)$(MSBuildProjectName).xml</DocumentationFile>
    <SignAssembly>False</SignAssembly>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <MinClientVersion>4.0</MinClientVersion>
    <Authors>.NET Foundation,LLVM.org,Ubiquity.NET</Authors>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <Description>.NET Low Level Interop Bindings for Ubiquity.LibLLVM. Direct use of this low level API is discouraged, instead you should use the Ubiquity.NET.Llvm package, which provides a full C# object model projection of the LLVM APIs on top of this library.</Description>
    <PackageTags>LLVM,Compiler,JIT,Ubiquity.NET</PackageTags>
    <NoPackageAnalysis>true</NoPackageAnalysis>
    <RepositoryType>git</RepositoryType>
    <RepositoryUrl>https://github.com/UbiquityDotNET/Llvm.NET.git</RepositoryUrl>
    <PackageProjectUrl>https://github.com/UbiquityDotNET/Llvm.NET</PackageProjectUrl>
    <PackageLicenseExpression>NCSA</PackageLicenseExpression>
  </PropertyGroup>
  <ItemGroup>
    <Content Include="..\..\..\BuildOutput\bin\LibLLVM\$(Configuration)\x64\Ubiquity.NET.LibLLVM.dll" Link="runtimes\win-x64\native\Ubiquity.NET.LibLLVM.dll">
        <PackagePath>runtimes\win-x64\native</PackagePath>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="..\..\..\BuildOutput\bin\LibLLVM\$(Configuration)\x64\Ubiquity.NET.LibLLVM.pdb" Link="runtimes\win-x64\native\Ubiquity.NET.LibLLVM.pdb">
        <PackagePath>runtimes\win-x64\native</PackagePath>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="NugetPkg\build\Ubiquity.NET.Llvm.Interop.props">
        <PackagePath>build\Ubiquity.NET.Llvm.Interop.props</PackagePath>
    </Content>
    <Content Include="NugetPkg\buildMultiTargeting\Ubiquity.NET.Llvm.Interop.props">
        <PackagePath>buildMultiTargeting\Ubiquity.NET.Llvm.Interop.props</PackagePath>
    </Content>
  </ItemGroup>
  <ItemGroup>
    <Compile Update="Properties\Resources.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Update="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
      <PackageReference Include="Ubiquity.ArgValidators" />
  </ItemGroup>
  <!--
    Version numbers are computed at build time after any declarative properties are evaluated
    so this is needed to update the NuSpec properties with the dynamically generated values
    NOTE: This can't use NuspecProperties as that is only applicable when using a NuSpec file.
          Worse, it can cause a NullReferenceException (See: https://github.com/NuGet/Home/issues/4649 )
    -->
  <Target Name="_SetNuSpecPropertiesWithBuildInfo" BeforeTargets="GenerateNuspec">
    <PropertyGroup>
      <Description>$(Description) $(llvmVersion)</Description>
    </PropertyGroup>
    <Message Importance="high" Text="llvmVersion=$(llvmVersion)" />
  </Target>

  <Target Name="EnsureLocalNugetFolder" Condition="!EXISTS($(PackageOutputPath))" BeforeTargets="Restore">
    <MakeDir Directories="$(PackageOutputPath)" />
  </Target>

</Project>
