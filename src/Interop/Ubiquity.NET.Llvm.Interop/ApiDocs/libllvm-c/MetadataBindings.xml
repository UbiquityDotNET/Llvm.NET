<!--
;; ==============================================================================
;; <usage>
;;     This file contains the Manually edited doc comments info that the
;;     generated code files refer to. This was originally cloned from the
;;     'GeneratedDocsFolder' and requires manual update and merging whenever
;;     the API surface changes. The generated XML is not committed to the repository
;;     but serves as a useful aid in building the docs for generated code files.
;; </usage>
;; ==============================================================================
-->
<LibLlvmAPI>
    <Enumeration name="LibLLVMDwarfAttributeEncoding">
        <summary>Values for the various DWARF attribute encodings (see DWARF spec for meanings)</summary>
        <Item name="DW_ATE_address">
            <summary>DWARF DW_ATE_address</summary>
        </Item>
        <Item name="DW_ATE_boolean">
            <summary>DWARF DW_ATE_boolean</summary>
        </Item>
        <Item name="DW_ATE_complex_float">
            <summary>DWARF DW_ATE_complex_float</summary>
        </Item>
        <Item name="DW_ATE_float">
            <summary>DWARF DW_ATE_float</summary>
        </Item>
        <Item name="DW_ATE_signed">
            <summary>DWARF DW_ATE_signed</summary>
        </Item>
        <Item name="DW_ATE_signed_char">
            <summary>DWARF DW_ATE_signed_char</summary>
        </Item>
        <Item name="DW_ATE_unsigned">
            <summary>DWARF DW_ATE_unsigned</summary>
        </Item>
        <Item name="DW_ATE_unsigned_char">
            <summary>DWARF DW_ATE_unsigned_char</summary>
        </Item>
        <Item name="DW_ATE_imaginary_float">
            <summary>DWARF DW_ATE_imaginary_float</summary>
        </Item>
        <Item name="DW_ATE_packed_decimal">
            <summary>DWARF DW_ATE_packed_decimal</summary>
        </Item>
        <Item name="DW_ATE_numeric_string">
            <summary>DWARF DW_ATE_numeric_string</summary>
        </Item>
        <Item name="DW_ATE_edited">
            <summary>DWARF DW_ATE_edited</summary>
        </Item>
        <Item name="DW_ATE_signed_fixed">
            <summary>DWARF DW_ATE_signed_fixed</summary>
        </Item>
        <Item name="DW_ATE_unsigned_fixed">
            <summary>DWARF DW_ATE_unsigned_fixed</summary>
        </Item>
        <Item name="DW_ATE_decimal_float">
            <summary>DWARF DW_ATE_decimal_float</summary>
        </Item>
        <Item name="DW_ATE_UTF">
            <summary>DWARF DW_ATE_UTF</summary>
        </Item>
        <Item name="DW_ATE_UCS">
            <summary>DWARF DW_ATE_UCS</summary>
        </Item>
        <Item name="DW_ATE_ASCII">
            <summary>DWARF DW_ATE_ASCII</summary>
        </Item>
        <Item name="DW_ATE_lo_user">
            <summary>DWARF DW_ATE_lo_user</summary>
        </Item>
        <Item name="DW_ATE_hi_user">
            <summary>DWARF DW_ATE_hi_user</summary>
        </Item>
    </Enumeration>
    <Enumeration name="LibLLVMDwarfTag">
        <summary>Enumeration for DWARF debug information tags</summary>
        <remarks>For full details of the tags and their meanings see the <see href="http://dwarfstd.org/">DWARF</see> specifications</remarks>
        <Item name="LibLLVMDwarfTagnull">
            <summary>Null/Invalid tag</summary>
        </Item>
        <Item name="LibLLVMDwarfTagarray_type">
            <summary>DW_TAG_array_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagclass_type">
            <summary>DW_TAG_class_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagentry_point">
            <summary>DW_TAG_entry_point</summary>
        </Item>
        <Item name="LibLLVMDwarfTagenumeration_type">
            <summary>DW_TAG_enumeration_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagformal_parameter">
            <summary>DW_TAG_formal_parameter</summary>
        </Item>
        <Item name="LibLLVMDwarfTagimported_declaration">
            <summary>DW_TAG_imported_declaration</summary>
        </Item>
        <Item name="LibLLVMDwarfTaglabel">
            <summary>DW_TAG_label</summary>
        </Item>
        <Item name="LibLLVMDwarfTaglexical_block">
            <summary>DW_TAG_lexical_block</summary>
        </Item>
        <Item name="LibLLVMDwarfTagmember">
            <summary>DW_TAG_member</summary>
        </Item>
        <Item name="LibLLVMDwarfTagpointer_type">
            <summary>DW_TAG_pointer_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagreference_type">
            <summary>DW_TAG_reference_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagcompile_unit">
            <summary>DW_TAG_compile_unit</summary>
        </Item>
        <Item name="LibLLVMDwarfTagstring_type">
            <summary>DW_TAG_string_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagstructure_type">
            <summary>DW_TAG_structure_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagsubroutine_type">
            <summary>DW_TAG_subroutine_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagtypedef">
            <summary>DW_TAG_typedef</summary>
        </Item>
        <Item name="LibLLVMDwarfTagunion_type">
            <summary>DW_TAG_union_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagunspecified_parameters">
            <summary>DW_TAG_unspecified_parameters</summary>
        </Item>
        <Item name="LibLLVMDwarfTagvariant">
            <summary>DW_TAG_variant</summary>
        </Item>
        <Item name="LibLLVMDwarfTagcommon_block">
            <summary>DW_TAG_common_block</summary>
        </Item>
        <Item name="LibLLVMDwarfTagcommon_inclusion">
            <summary>DW_TAG_common_inclusion</summary>
        </Item>
        <Item name="LibLLVMDwarfTaginheritance">
            <summary>DW_TAG_inheritance</summary>
        </Item>
        <Item name="LibLLVMDwarfTaginlined_subroutine">
            <summary>DW_TAG_inlined_subroutine</summary>
        </Item>
        <Item name="LibLLVMDwarfTagmodule">
            <summary>DW_TAG_module</summary>
        </Item>
        <Item name="LibLLVMDwarfTagptr_to_member_type">
            <summary>DW_TAG_ptr_to_member_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagset_type">
            <summary>DW_TAG_et_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagsubrange_type">
            <summary>DW_TAG_ubrange_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagwith_stmt">
            <summary>DW_TAG_with_stmt</summary>
        </Item>
        <Item name="LibLLVMDwarfTagaccess_declaration">
            <summary>DW_TAG_access_declaration</summary>
        </Item>
        <Item name="LibLLVMDwarfTagbase_type">
            <summary>DW_TAG_base_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagcatch_block">
            <summary>DW_TAG_catch_block</summary>
        </Item>
        <Item name="LibLLVMDwarfTagconst_type">
            <summary>DW_TAG_const_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagconstant">
            <summary>DW_TAG_constant</summary>
        </Item>
        <Item name="LibLLVMDwarfTagenumerator">
            <summary>DW_TAG_enumerator</summary>
        </Item>
        <Item name="LibLLVMDwarfTagfile_type">
            <summary>DW_TAG_file_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagfriend">
            <summary>DW_TAG_friend</summary>
        </Item>
        <Item name="LibLLVMDwarfTagnamelist">
            <summary>DW_TAG_namelist</summary>
        </Item>
        <Item name="LibLLVMDwarfTagnamelist_item">
            <summary>DW_TAG_namelist_item</summary>
        </Item>
        <Item name="LibLLVMDwarfTagpacked_type">
            <summary>DW_TAG_packed_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagsubprogram">
            <summary>DW_TAG_ubprogram</summary>
        </Item>
        <Item name="LibLLVMDwarfTagtemplate_type_parameter">
            <summary>DW_TAG_template_type_parameter</summary>
        </Item>
        <Item name="LibLLVMDwarfTagtemplate_value_parameter">
            <summary>DW_TAG_template_value_parameter</summary>
        </Item>
        <Item name="LibLLVMDwarfTagthrown_type">
            <summary>DW_TAG_thrown_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagtry_block">
            <summary>DW_TAG_try_block</summary>
        </Item>
        <Item name="LibLLVMDwarfTagvariant_part">
            <summary>DW_TAG_variant_part</summary>
        </Item>
        <Item name="LibLLVMDwarfTagvariable">
            <summary>DW_TAG_variable</summary>
        </Item>
        <Item name="LibLLVMDwarfTagvolatile_type">
            <summary>DW_TAG_volatile_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagdwarf_procedure">
            <summary>DW_TAG_dwarf_procedure</summary>
        </Item>
        <Item name="LibLLVMDwarfTagrestrict_type">
            <summary>DW_TAG_restrict_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTaginterface_type">
            <summary>DW_TAG_interface_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagnamespace">
            <summary>DW_TAG_namespace</summary>
        </Item>
        <Item name="LibLLVMDwarfTagimported_module">
            <summary>DW_TAG_imported_module</summary>
        </Item>
        <Item name="LibLLVMDwarfTagunspecified_type">
            <summary>DW_TAG_unspecified_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagpartial_unit">
            <summary>DW_TAG_partial_unit</summary>
        </Item>
        <Item name="LibLLVMDwarfTagimported_unit">
            <summary>DW_TAG_imported_unit</summary>
        </Item>
        <Item name="LibLLVMDwarfTagcondition">
            <summary>DW_TAG_condition</summary>
        </Item>
        <Item name="LibLLVMDwarfTagshared_type">
            <summary>DW_TAG_hared_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagtype_unit">
            <summary>DW_TAG_type_unit</summary>
        </Item>
        <Item name="LibLLVMDwarfTagrvalue_reference_type">
            <summary>DW_TAG_rvalue_reference_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagtemplate_alias">
            <summary>DW_TAG_template_alias</summary>
        </Item>
        <Item name="LibLLVMDwarfTagcoarray_type">
            <summary>DW_TAG_coarray_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTaggeneric_subrange">
            <summary>DW_TAG_generic_subrange</summary>
        </Item>
        <Item name="LibLLVMDwarfTagdynamic_type">
            <summary>DW_TAG_dynamic_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagatomic_type">
            <summary>DW_TAG_atomic_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagcall_site">
            <summary>DW_TAG_call_site</summary>
        </Item>
        <Item name="LibLLVMDwarfTagcall_site_parameter">
            <summary>DW_TAG_call_site_parameter</summary>
        </Item>
        <Item name="LibLLVMDwarfTagskeleton_unit">
            <summary>DW_TAG_keleton_unit</summary>
        </Item>
        <Item name="LibLLVMDwarfTagimmutable_type">
            <summary>DW_TAG_immutable_type</summary>
        </Item>
        <Item name="LibLLVMDwarfTagMIPS_loop">
            <summary>DW_TAG_MIPS_loop</summary>
        </Item>
        <Item name="LibLLVMDwarfTagformat_label">
            <summary>DW_TAG_format_label</summary>
        </Item>
        <Item name="LibLLVMDwarfTagfunction_template">
            <summary>DW_TAG_function_template</summary>
        </Item>
        <Item name="LibLLVMDwarfTagclass_template">
            <summary>DW_TAG_class_template</summary>
        </Item>
        <Item name="LibLLVMDwarfTagGNU_template_template_param">
            <summary>DW_TAG_GNU_template_template_param</summary>
        </Item>
        <Item name="LibLLVMDwarfTagGNU_template_parameter_pack">
            <summary>DW_TAG_GNU_template_parameter_pack</summary>
        </Item>
        <Item name="LibLLVMDwarfTagGNU_formal_parameter_pack">
            <summary>DW_TAG_GNU_formal_parameter_pack</summary>
        </Item>
        <Item name="LibLLVMDwarfTagGNU_call_site">
            <summary>DW_TAG_GNU_call_site</summary>
        </Item>
        <Item name="LibLLVMDwarfTagGNU_call_site_parameter">
            <summary>DW_TAG_GNU_call_site_parameter</summary>
        </Item>
        <Item name="LibLLVMDwarfTagAPPLE_property">
            <summary>DW_TAG_APPLE_property</summary>
        </Item>
        <Item name="LibLLVMDwarfTagBORLAND_property">
            <summary>DW_TAG_BORLAND_property</summary>
        </Item>
        <Item name="LibLLVMDwarfTagBORLAND_Delphi_string">
            <summary>DW_TAG_BORLAND_Delphi_string</summary>
        </Item>
        <Item name="LibLLVMDwarfTagBORLAND_Delphi_dynamic_array">
            <summary>DW_TAG_BORLAND_Delphi_dynamic_array</summary>
        </Item>
        <Item name="LibLLVMDwarfTagBORLAND_Delphi_set">
            <summary>DW_TAG_BORLAND_Delphi_set</summary>
        </Item>
        <Item name="LibLLVMDwarfTagBORLAND_Delphi_variant">
            <summary>DW_TAG_BORLAND_Delphi_variant</summary>
        </Item>
    </Enumeration>
    <Enumeration name="LibLLVMMetadataKind">
        <summary>Enumeration for the Kinds of metadata, which is effectively a discriminated union</summary>
        <Item name="LibLLVMMetadataKind_MDString">
            <summary>Metadata string</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_ConstantAsMetadata">
            <summary>Constant value as metadata</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_LocalAsMetadata">
            <summary>Local value as metadata</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DistinctMDOperandPlaceholder">
            <summary>Distinct MDOperand Placeholder</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_MDTuple">
            <summary>MDTuple</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DILocation">
            <summary>DILocation</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DIExpression">
            <summary>DIExpression</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DIGlobalVariableExpression">
            <summary>DIGlobalVariableExpression</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_GenericDINode">
            <summary>GenericDINode</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DISubrange">
            <summary>DISubrange</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DIEnumerator">
            <summary>DIEnumerator</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DIBasicType">
            <summary>DIBasicType</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DIDerivedType">
            <summary>DIDerivedType</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DICompositeType">
            <summary>DICompositeType</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DISubroutineType">
            <summary>DISubroutineType</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DIFile">
            <summary>DIFile</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DICompileUnit">
            <summary>DICompileUnit</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DISubprogram">
            <summary>DISubprogram</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DILexicalBlock">
            <summary>DILexicalBlock</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DILexicalBlockFile">
            <summary>DILexicalBlockFile</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DINamespace">
            <summary>DINamespace</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DIModule">
            <summary>DIModule</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DITemplateTypeParameter">
            <summary>DITemplateTypeParameter</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DITemplateValueParameter">
            <summary>DITemplateValueParameter</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DIGlobalVariable">
            <summary>DIGlobalVariable</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DILocalVariable">
            <summary>DILocalVariable</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DILabel">
            <summary>DILabel</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DIObjCProperty">
            <summary>DIObjCProperty</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DIImportedEntity">
            <summary>DIImportedEntity</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DIMacro">
            <summary>DIMacro</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DIMacroFile">
            <summary>DIMacroFile</summary>
        </Item>
        <Item name="LibLLVMMetadataKind_DICommonBlock">
            <summary>TODO: Provide summary for LibLLVMMetadataKind.LibLLVMMetadataKind_DICommonBlock Enumeration</summary>
        </Item>
    </Enumeration>
    <Function name="LibLLVMDIBasicTypeGetEncoding">
        <summary>Gets the type encoding for a basic type</summary>
        <param name="basicType">Type to get the encoding for</param>
        <returns>Type encoding for the basic type</returns>
    </Function>
    <Function name="LibLLVMSubProgramDescribes">
        <summary>Tests if a given subprogram describes a given function</summary>
        <param name="subProgram">Subprogram to test</param>
        <param name="F">Function to test</param>
        <returns><see langword="true"/> if the subprogram describes the given function</returns>
    </Function>
    <Function name="LibLLVMGetNodeContext">
        <summary>Gets the context for a node</summary>
        <param name="node">Node to get the context from</param>
        <returns>Context for the node</returns>
    </Function>
    <Function name="LibLLVMDIBuilderCreateTempFunctionFwdDecl">
        <summary>Create a temporary function forward declaration</summary>
        <param name="D">Builder to create the declaration</param>
        <param name="Scope">Scope for the declaration</param>
        <param name="Name">Name of the function</param>
        <param name="NameLen">Length of the function name</param>
        <param name="LinkageName">Linkage name for the function</param>
        <param name="LinakgeNameLen">Length of the linkage name</param>
        <param name="File">File the function is declared in</param>
        <param name="LineNo">Line number for the function</param>
        <param name="Ty">Signature of the function</param>
        <param name="isLocalToUnit">Indicates if the function is local to this unit</param>
        <param name="isDefinition">Indicates if the function is a definition</param>
        <param name="ScopeLine">Source line for the start of the function scope</param>
        <param name="Flags">Debug info flags for the declaration</param>
        <param name="isOptimized">Indicates if the function is optimized</param>
        <returns>Forward declaration node</returns>
    </Function>
    <Function name="LibLLVMDIBuilderFinalizeSubProgram">
        <summary>Finalizes debug information for a single subprogram</summary>
        <param name="dref">Builder that created the sub program to finalize</param>
        <param name="subProgram">SubProgram to finalize</param>
    </Function>
    <Function name="LibLLVMDILocation">
        <summary>Creates a new DILocation</summary>
        <param name="context">Context to create the location in</param>
        <param name="Line">Line number for the location</param>
        <param name="Column">Column for the location</param>
        <param name="scope">Scope containing the location</param>
        <param name="InlinedAt">Location this location is inlined at (Maybe null)</param>
        <returns>Debug location</returns>
    </Function>
    <Function name="LibLLVMDIDescriptorGetTag">
        <summary>Gets the dwarf tag from a descriptor</summary>
        <param name="descriptor">Descriptor to get the tag from</param>
        <returns>Dwarf Tag</returns>
    </Function>
    <Function name="LibLLVMDILocationGetInlinedAt">
        <summary>Gets the inlined at location from a debug location</summary>
        <param name="location">Location to get the information from</param>
        <returns>Inlined location (Maybe null)</returns>
    </Function>
    <Function name="LibLLVMDILocationGetInlinedAtScope">
        <summary>Gets the scope the location is inlined at</summary>
        <param name="location">Location to get the information from</param>
        <returns>Scope</returns>
    </Function>
    <Function name="LibLLVMMetadataAsString">
        <summary>Gets the metadata as a string</summary>
        <param name="descriptor">Metadata</param>
        <returns>Metadata as a string</returns>
    </Function>
    <Function name="LibLLVMMDNodeGetNumOperands">
        <summary>Gets the number of operands in a node</summary>
        <param name="node">Node to get the operands from</param>
        <returns>Number of operands for the node</returns>
    </Function>
    <Function name="LibLLVMMDNodeGetOperand">
        <summary>Gets an operand from a node</summary>
        <param name="node">Node to get the operand from</param>
        <param name="index">Index of the operand to get</param>
        <returns>Operand</returns>
    </Function>
    <Function name="LibLLVMMDNodeReplaceOperand">
        <summary>Replace an operand in a node</summary>
        <param name="node">Node to replace the operand in</param>
        <param name="index">Index of the operand</param>
        <param name="operand">New operand value</param>
        <remarks>
        It is important to fully understand the node hierarchy and actual
        kinds of operands for a given node type as there is no type checking
        with this function. It is very easy to create invalid metadata nodes
        by setting the operands incorrectly. This, function is intended as
        a very low-level function that is called from some higher level that
        will validate correct usage.
        </remarks>
    </Function>
    <Function name="LibLLVMGetOperandNode">
        <summary>Gets the metadata in an operand</summary>
        <param name="operand">Operand to get the metadata for</param>
        <returns>Metadata from the operand</returns>
    </Function>
    <Function name="LibLLVMNamedMetadataGetParentModule">
        <summary>Gets the parent module from a named metadata node</summary>
        <param name="namedMDNode">Node to get the parent from</param>
        <returns>Module for the node</returns>
    </Function>
    <Function name="LibLLVMNamedMetadataEraseFromParent">
        <summary>Removes a NamedMetadata node from the parent module</summary>
        <param name="namedMDNode">node to remove</param>
    </Function>
    <Function name="LibLLVMGetMetadataID">
        <summary>Gets the type id for the metadata node</summary>
        <param name="md">Metadata node</param>
        <returns>Type id</returns>
        <remarks>
            The type id is basically the discriminator for the metadata
            discriminated union.
        </remarks>
    </Function>
    <Function name="LibLLVMNamedMDNodeGetNumOperands">
        <summary>Gets the number of operands in a named MD Node</summary>
        <param name="namedMDNode">Node to get the operand count for</param>
        <returns>Number of operands</returns>
    </Function>
    <Function name="LibLLVMNamedMDNodeGetOperand">
        <summary>Gets an operand from a named MDNode</summary>
        <param name="namedMDNode">Node to get the operand from</param>
        <param name="index">Index of the operand</param>
        <returns>Operand from the node</returns>
    </Function>
    <Function name="LibLLVMNamedMDNodeSetOperand">
        <summary>Sets the operand in a node</summary>
        <param name="namedMDNode">Node to set the operand in</param>
        <param name="index">Index of the operand</param>
        <param name="node">Node for the operand value</param>
    </Function>
    <Function name="LibLLVMNamedMDNodeAddOperand">
        <summary>Adds an operand to a named metadata node</summary>
        <param name="namedMDNode">Node to add the operand from</param>
        <param name="node">Operand node to add</param>
    </Function>
    <Function name="LibLLVMNamedMDNodeClearOperands">
        <summary>Clears all operands from a node</summary>
        <param name="namedMDNode">Node to clear the operands from</param>
    </Function>
    <Function name="LibLLVMConstantAsMetadata">
        <summary>Creates a constant value as metadata</summary>
        <param name="Val">Constant value to make a metadata node from</param>
        <returns>Metadata node for the constant</returns>
    </Function>
    <Function name="LibLLVMMDString2">
        <summary>TODO: Provide summary for Function LibLLVMMDString2</summary>
        <param name="C">TODO: Provide details of parameter C</param>
        <param name="Str">TODO: Provide details of parameter Str</param>
        <param name="SLen">TODO: Provide details of parameter SLen</param>
        <returns>TODO: Document return value</returns>
    </Function>
    <Function name="LibLLVMMDNode2">
        <summary>TODO: Provide summary for Function LibLLVMMDNode2</summary>
        <param name="C">TODO: Provide details of parameter C</param>
        <param name="MDs">TODO: Provide details of parameter MDs</param>
        <param name="Count">TODO: Provide details of parameter Count</param>
        <returns>TODO: Document return value</returns>
    </Function>
    <Function name="LibLLVMGetMDStringText">
        <summary>TODO: Provide summary for Function LibLLVMGetMDStringText</summary>
        <param name="mdstring">TODO: Provide details of parameter mdstring</param>
        <param name="len">TODO: Provide details of parameter len</param>
        <returns>TODO: Document return value</returns>
    </Function>
    <Function name="LibLLVMAddNamedMetadataOperand2">
        <summary>TODO: Provide summary for Function LibLLVMAddNamedMetadataOperand2</summary>
        <param name="M">TODO: Provide details of parameter M</param>
        <param name="name">TODO: Provide details of parameter name</param>
        <param name="Val">TODO: Provide details of parameter Val</param>
    </Function>
    <Function name="LibLLVMSetMetadata2">
        <summary>TODO: Provide summary for Function LibLLVMSetMetadata2</summary>
        <param name="Inst">TODO: Provide details of parameter Inst</param>
        <param name="KindID">TODO: Provide details of parameter KindID</param>
        <param name="MD">TODO: Provide details of parameter MD</param>
    </Function>
    <Function name="LibLLVMSetCurrentDebugLocation2">
        <summary>TODO: Provide summary for Function LibLLVMSetCurrentDebugLocation2</summary>
        <param name="Bref">TODO: Provide details of parameter Bref</param>
        <param name="Line">TODO: Provide details of parameter Line</param>
        <param name="Col">TODO: Provide details of parameter Col</param>
        <param name="Scope">TODO: Provide details of parameter Scope</param>
        <param name="InlinedAt">TODO: Provide details of parameter InlinedAt</param>
    </Function>
    <Function name="LibLLVMIsTemporary">
        <summary>TODO: Provide summary for Function LibLLVMIsTemporary</summary>
        <param name="M">TODO: Provide details of parameter M</param>
        <returns>TODO: Document return value</returns>
    </Function>
    <Function name="LibLLVMIsResolved">
        <summary>TODO: Provide summary for Function LibLLVMIsResolved</summary>
        <param name="M">TODO: Provide details of parameter M</param>
        <returns>TODO: Document return value</returns>
    </Function>
    <Function name="LibLLVMIsUniqued">
        <summary>TODO: Provide summary for Function LibLLVMIsUniqued</summary>
        <param name="M">TODO: Provide details of parameter M</param>
        <returns>TODO: Document return value</returns>
    </Function>
    <Function name="LibLLVMIsDistinct">
        <summary>TODO: Provide summary for Function LibLLVMIsDistinct</summary>
        <param name="M">TODO: Provide details of parameter M</param>
        <returns>TODO: Document return value</returns>
    </Function>
    <Function name="LibLLVMDIGlobalVarExpGetVariable">
        <summary>TODO: Provide summary for Function LibLLVMDIGlobalVarExpGetVariable</summary>
        <param name="metadataHandle">TODO: Provide details of parameter metadataHandle</param>
        <returns>TODO: Document return value</returns>
    </Function>
    <Function name="LibLLVMDIVariableGetLine">
        <summary>TODO: Provide summary for Function LibLLVMDIVariableGetLine</summary>
        <param name="_0">TODO: Provide details of parameter _0</param>
        <returns>TODO: Document return value</returns>
    </Function>
</LibLlvmAPI>
