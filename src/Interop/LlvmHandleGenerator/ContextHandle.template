/// <summary>Simple type safe handle to wrap an opaque pointer for interop with "C" API exported from LibLLVM</summary>
/// <remarks>
///    This handle is owned by it's container and therefore isn't disposed by the
///    calling App.
/// <note type="important">
///     Since the object this handle refers to is not owned by the App, the object is
///     destroyed whenever it's container is destroyed, which will invalidate this handle.
///     Use of this handle after the container is destroyed will produce undefined
///     behavior, including, and most likely, memory access violations.
/// </note>
/// </remarks>
[NativeMarshalling( typeof( ContextHandleMarshaller<%%HANDLENAME%%> ) )]
readonly partial record struct %%HANDLENAME%%
    : IContextHandle<%%HANDLENAME%%>
{
    /// <summary>Gets the handle as an <see cref="nint"/> suitable for passing to native code</summary>
    /// <returns>The handle as an <see cref="nint"/></returns>
    public nint DangerousGetHandle() => Handle;

    /// <summary>Interface defined factory for an instance of <see cref="%%HANDLENAME%%"/></summary>
    /// <param name="abiValue">Native ABI value of the handle</param>
    /// <returns>Type specific wrapper around the native ABI handle</returns>
    public static %%HANDLENAME%% FromABI(nint abiValue) => new(abiValue);

    /// <summary>Gets a zero (<see langword="null"/>) value handle</summary>
    static %%HANDLENAME%% Zero { get; } = new( nint.Zero );

    private %%HANDLENAME%%(nint p)
    {
        Handle = p;
    }

    private readonly nint Handle;
}
