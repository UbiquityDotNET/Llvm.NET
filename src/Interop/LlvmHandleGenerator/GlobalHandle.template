/// <summary>Global LLVM object handle</summary>
partial class %%HANDLENAME%%
    : GlobalHandleBase
{
    /// <summary>Initializes an instance of <see cref="%%HANDLENAME%%"/> with default values</summary>
    public %%HANDLENAME%%()
        : base( ownsHandle: true )
    {
    }

    /// <summary>Initializes an instance of <see cref="%%HANDLENAME%%"/></summary>
    /// <param name="handle">Raw native pointer for the handle</param>
    /// <param name="owner">Value to indicate whether the handle is owned or not</param>
    public %%HANDLENAME%%(nint handle, bool owner)
        : base( owner )
    {
        SetHandle( handle );
    }

    /// <summary>Gets a Zero (<see langword="null"/>) value handle</summary>
    public static %%HANDLENAME%% Zero { get; } = new %%HANDLENAME%%( nint.Zero, false );

    /// <inheritdoc/>
    protected override bool ReleaseHandle()
    {
        // critical safety check, base should never call ReleaseHandle on an invalid handle
        // but ABI usually can't handle that and would just crash the app, so make it
        // a NOP just in case.
        if(handle != nint.Zero)
        {
            LLVMOrcDisposeDumpObjects( handle );
        }

        return true;

        [DllImport( Names.LibraryPath )]
        [UnmanagedCallConv( CallConvs = [ typeof( CallConvCdecl ) ] )]
        static extern void LLVMOrcDisposeDumpObjects(nint p);
    }
}
