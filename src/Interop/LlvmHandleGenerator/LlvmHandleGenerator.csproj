<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <!-- Consuming projects should not reference, or include a dependency on, the generator itself [not needed at runtime] -->
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <IsRoslynComponent>true</IsRoslynComponent>

    <!--
    Roslyn Source generators MUST target .NET standard 2.0, which leaves them rather
    limited with respect to newer language and runtime features.
    -->
    <TargetFramework>netstandard2.0</TargetFramework>
    <Nullable>enable</Nullable>
    <!--
        Sadly, Roslyn source generators are restricted to targeting .NET Standard 2.0.
        Most runtime support required is "pollyfilled" with additional dependencies. Though
        some language features have a hard requirement on runtime support not available
        in .NET Standard 2.0. Thus those features will land in build errors in most cases,
        but sometimes can end up as runtime errors! BEWARE! Be careful and limit use of
        esoteric language features.
        -->
    <LangVersion>13</LangVersion>
    <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
  </PropertyGroup>
  <ItemGroup>
    <Compile Remove="ContextHandleAttribute.cs" />
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="ContextHandleAttribute.cs" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Basic.Reference.Assemblies" Version="1.7.9" PrivateAssets="all" />
    <PackageReference Include="IsExternalInit" Version="1.0.3">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Nullable" Version="1.3.1">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.12.0" PrivateAssets="all" />
    <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.11.0" PrivateAssets="all" />
  </ItemGroup>

  <ItemGroup>
    <Service Include="{508349b6-6b84-4df5-91f0-309beebad82d}" />
  </ItemGroup>

  <ItemGroup>
    <!-- This ensures the library will be packaged as a source generator when using `dotnet pack` -->
    <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\SourceGenerator.Utils\SourceGenerator.Utils.csproj" />
  </ItemGroup>

  <!--
    The following property and target are needed to ensure the dependent project's DLL are included
    with the source generator such that it can access the dll at runtime. This is an area where source
    generator build automation is "lacking"...
    -->
  <PropertyGroup>
    <GetTargetPathDependsOn>$(GetTargetPathDependsOn);GetDependencyTargetPaths</GetTargetPathDependsOn>
  </PropertyGroup>

  <Target Name="GetDependencyTargetPaths" AfterTargets="ResolvePackageDependenciesForBuild">
    <ItemGroup>
      <TargetPathWithTargetPlatformMoniker Include="@(ResolvedCompileFileDefinitions)" IncludeRuntimeDependency="false" />
    </ItemGroup>
  </Target>
</Project>
