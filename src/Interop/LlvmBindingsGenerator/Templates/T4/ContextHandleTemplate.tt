<#@ template language="C#" visibility="internal" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: <#=ToolVersion#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;

namespace Llvm.NET.Interop
{
    [GeneratedCode("LlvmBindingsGenerator","<#=ToolVersion#>")]
    public struct <#=HandleName#>
        : IEquatable<<#=HandleName#>>
    {
        public override int GetHashCode( ) => Handle.GetHashCode( );

        public override bool Equals( object obj )
            => !( obj is null )
             && ( obj is <#=HandleName#> r )
             && ( r.Handle == Handle );

        public bool Equals( <#=HandleName#> other ) => Handle == other.Handle;

        public static bool operator ==( <#=HandleName#> lhs, <#=HandleName#> rhs )
            => EqualityComparer<<#=HandleName#>>.Default.Equals( lhs, rhs );

        public static bool operator !=( <#=HandleName#> lhs, <#=HandleName#> rhs ) => !( lhs == rhs );

        public static <#=HandleName#> Zero { get; } = new <#=HandleName#>(IntPtr.Zero);

        public IntPtr ToIntPtr() => Handle;

        public static implicit operator IntPtr(<#=HandleName#> value) => value.ToIntPtr();

        internal <#=HandleName#>( IntPtr p )
        {
            Handle = p;
        }

        private readonly IntPtr Handle;
    }
}
