<#@ template language="C#" visibility="internal"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. [LlvmBindingsGenerator]
//     Tool Version: <#=ToolVersion#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable

using System.CodeDom.Compiler;

namespace Ubiquity.NET.Llvm.Interop
{
    /// <summary>Global LLVM object handle</summary>
    [GeneratedCode("LlvmBindingsGenerator","<#=ToolVersion#>")]
    public class <#=HandleName#>
        : GlobalHandleBase
        , IEquatable<<#=HandleName#>>
    {
        /// <summary>Initializes an instance of <see cref="<#=HandleName#>"/> with default values</summary>
        public <#=HandleName#>()
            : base(ownsHandle: true)
        {
        }

        /// <summary>Initializes an instance of <see cref="<#=HandleName#>"/></summary>
        /// <param name="handle">Raw native pointer for the handle</param>
        /// <param name="owner">Value to indicate whether the handle is owned or not</param>
        public <#=HandleName#>( nint handle, bool owner )
            : base( owner )
        {
            SetHandle( handle );
        }

        public bool Equals(<#=HandleName#>? other) => other is not null && handle == other.handle;

        public override bool Equals(object? obj) => obj is <#=HandleName#> hOther && Equals(hOther);

        public override int GetHashCode() => handle.GetHashCode();

        /// <summary>Gets a Zero (<see langword="null"/>) value handle</summary>
        public static <#=HandleName#> Zero { get; } = new <#=HandleName#>(nint.Zero, false);
<#if(NeedsAlias){#>

        // Implicitly cast to an alias - still owned by this instance
        public static implicit operator <#=HandleName#>Alias(<#=HandleName#> self)
        {
            ArgumentNullException.ThrowIfNull(self);
            self.ThrowIfInvalid();
            return <#=HandleName#>Alias.FromABI(self.DangerousGetHandle());
        }
<#}#>

        /// <inheritdoc/>
        protected override bool ReleaseHandle( )
        {
            <#=HandleDisposeFunction#>( handle );
            return true;

            // Native ABI declaration without ANY marshalling, AOT compatible
            [DllImport( NativeMethods.LibraryName )]
            [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
            static unsafe extern void <#=HandleDisposeFunction#>( nint p );
        }
    }
}
