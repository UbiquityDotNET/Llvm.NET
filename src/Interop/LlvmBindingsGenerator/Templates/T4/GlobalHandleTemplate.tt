<#@ template language="C#" visibility="internal"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: <#=ToolVersion#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Ubiquity.NET.Llvm.Interop
{
    /// <summary>Global LLVM object handle</summary>
    [GeneratedCode("LlvmBindingsGenerator","<#=ToolVersion#>")]
    public partial class <#=HandleName#>
        : LlvmObjectRef
    {
        /// <summary>Initializes an instance of <see cref="<#=HandleName#>"/> with default values</summary>
        public <#=HandleName#>()
            : base(ownsHandle: true)
        {
        }

        /// <summary>Initializes an instance of <see cref="<#=HandleName#>"/></summary>
        /// <param name="handle">Raw native pointer for the handle</param>
        /// <param name="owner">Value to indicate whether the handle is owned or not</param>
        public <#=HandleName#>( nint handle, bool owner )
            : base( owner )
        {
            SetHandle( handle );
        }

        /// <summary>Gets a Zero (<see langword="null"/>) value handle</summary>
        public static <#=HandleName#> Zero { get; } = new <#=HandleName#>(nint.Zero, false);

        /// <inheritdoc/>
        protected override bool ReleaseHandle( )
        {
            // critical safety check, base should never call ReleaseHandle on an invalid handle
            // but ABI usually can't handle that and would just crash the app, so make it
            // a NOP just in case.
            if( handle != nint.Zero )
            {
                <#=HandleDisposeFunction#>( handle );
            }
            return true;
        }

        [LibraryImport( NativeMethods.LibraryPath )]
        [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
        private static unsafe partial void <#=HandleDisposeFunction#>( nint p );
    }
<#if(NeedsAlias){#>

    // CONSIDER: Make the alias a `ref struct` to prevent boxing or heap allocation.
    //           This would model the intended semantics in code and enforce the
    //           lifetime rules better. (Not perfectly as a ref struct could still
    //           escape the lifetime of the owner, but compile time catching most
    //           cases is still WAY better than random runtime bugs.

    /// <summary>Alias (non-owning) handle for a <see cref="<#=HandleName#>"/></summary>
    ///<remarks>
    /// Sometimes a global object is exposed via a child that maintains a reference to the parent.
    /// In such cases, the handle isn't owned by the App (it's an alias) and therefore should not be
    /// disposed or destroyed. This handle type takes care of that in a type safe manner and does not
    /// perform any automatic cleanup. [That is, this is a PURE reference to an object]
    ///</remarks>
    [GeneratedCode("LlvmBindingsGenerator","<#=ToolVersion#>")]
    public class <#=HandleName#>Alias
        : <#=HandleName#>
    {
        public <#=HandleName#>Alias()
            : base( nint.Zero, false )
        {
        }
    }
<#}#>}
