<#@ template language="C#" visibility="internal"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: <#=ToolVersion#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading;

namespace Llvm.NET.Interop
{
    [SecurityCritical]
    [GeneratedCode("LlvmBindingsGenerator","<#=ToolVersion#>")]
    public class <#=HandleName#>
        : LlvmObjectRef
    {
        public <#=HandleName#>( IntPtr handle, bool owner )
            : base( owner )
        {
            SetHandle( handle );
        }

        public static <#=HandleName#> Zero { get; } = new <#=HandleName#>(IntPtr.Zero, false);

        [SecurityCritical]
        protected override bool ReleaseHandle( )
        {
            // ensure handle appears invalid from this point forward
            var prevHandle = Interlocked.Exchange( ref handle, IntPtr.Zero );
            SetHandleAsInvalid( );

            if( prevHandle != IntPtr.Zero )
            {
                <#=HandleDisposeFunction#>( handle );
            }
            return true;
        }

        private <#=HandleName#>( )
            : base( true )
        {
        }

        [DllImport( NativeMethods.LibraryPath, CallingConvention = CallingConvention.Cdecl )]
        private static extern void <#=HandleDisposeFunction#>( IntPtr p );
    }
<#if(NeedsAlias){#>

    [GeneratedCode("LlvmBindingsGenerator","<#=ToolVersion#>")]
    public class <#=HandleName#>Alias
        : <#=HandleName#>
    {
        private <#=HandleName#>Alias()
            : base( IntPtr.Zero, false )
        {
        }
    }
<#}#>}
