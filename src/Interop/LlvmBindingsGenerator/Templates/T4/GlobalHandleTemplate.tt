<#@ template language="C#" visibility="internal"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. [LlvmBindingsGenerator]
//     Tool Version: <#=ToolVersion#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable

using System;
using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Ubiquity.NET.Llvm.Interop
{
    /// <summary>Global LLVM object handle</summary>
    [GeneratedCode("LlvmBindingsGenerator","<#=ToolVersion#>")]
    public class <#=HandleName#>
        : GlobalHandleBase
        , IEquatable<<#=HandleName#>>
    {
        /// <summary>Initializes an instance of <see cref="<#=HandleName#>"/> with default values</summary>
        public <#=HandleName#>()
            : base(ownsHandle: true)
        {
        }

        /// <summary>Initializes an instance of <see cref="<#=HandleName#>"/></summary>
        /// <param name="handle">Raw native pointer for the handle</param>
        /// <param name="owner">Value to indicate whether the handle is owned or not</param>
        public <#=HandleName#>( nint handle, bool owner )
            : base( owner )
        {
            SetHandle( handle );
        }

        /// <summary>Throws an exception if this handle is invalid or in the closed state</summary>
        /// <param name="message">Exception error message [default: empty string]</param>
        /// <param name="memberName">Name of the member making the call [Default: provided by compiler]</param>
        /// <param name="sourceFilePath">Source file of the code making this call [Default: provided by compiler]</param>
        /// <param name="sourceLineNumber">Source line number of the code making this call [Default: provided by compiler]</param>
        /// <returns>This instance for fluent based API usage</returns>
        /// <exception cref="LlvmException">This handle is invalid or closed</exception>
        public <#=HandleName#> ThrowIfInvalid(
            string message = "",
            [CallerMemberNameAttribute] string memberName = "",
            [CallerFilePath] string sourceFilePath = "",
            [CallerLineNumber] int sourceLineNumber = 0)
        {
            return IsInvalid || IsClosed
                 ? throw new LlvmException( $"[{memberName}] - {sourceFilePath}@{sourceLineNumber}; {message}" )
                 : this;
        }

        public bool Equals(<#=HandleName#>? other) => other is not null && handle == other.handle;

        public override bool Equals(object? obj) => obj is <#=HandleName#> hOther && Equals(hOther);

        public override int GetHashCode() => handle.GetHashCode();

        /// <summary>Gets a Zero (<see langword="null"/>) value handle</summary>
        public static <#=HandleName#> Zero { get; } = new <#=HandleName#>(nint.Zero, false);

        /// <inheritdoc/>
        protected override bool ReleaseHandle( )
        {
            // critical safety check, base should never call ReleaseHandle on an invalid handle
            // but ABI usually can't handle that and would just crash the app, so make it
            // a NOP just in case.
            if( handle != nint.Zero )
            {
                <#=HandleDisposeFunction#>( handle );
            }

            return true;

            // Native ABI declaration without ANY marshalling, AOT compatible
            [DllImport( NativeMethods.LibraryName )]
            [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
            static unsafe extern void <#=HandleDisposeFunction#>( nint p );
        }
    }
<#if(NeedsAlias){#>

    /// <summary>Alias (non-owning) handle for a <see cref="<#=HandleName#>"/></summary>
    ///<remarks>
    /// Sometimes a global object is exposed via a child that maintains a reference to the parent.
    /// In such cases, the handle isn't owned by the App (it's an alias) and therefore should not be
    /// disposed or destroyed. This handle type takes care of that in a type safe manner and does not
    /// perform any automatic cleanup. [That is, this is a PURE reference to an object]
    ///</remarks>
    [GeneratedCode("LlvmBindingsGenerator","<#=ToolVersion#>")]
    public class <#=HandleName#>Alias
        : <#=HandleName#>
    {
        public <#=HandleName#>Alias()
            : base( nint.Zero, false )
        {
        }
    }
<#}#>}
