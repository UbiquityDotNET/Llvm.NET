<#@ template language="C#" visibility="internal" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: <#=ToolVersion#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable

using System.CodeDom.Compiler;
<#if(HasNativeDisposer){#>
using System.Runtime.CompilerServices;
<#}#>
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.Marshalling;

namespace Ubiquity.NET.Llvm.Interop
{
<#if(HasNativeDisposer){#>
    ///<summary>Custom string marshalling class for strings using <see cref="<#=NativeDisposer#>"/></summary>
<#}else{#>
    ///<summary>Custom string marshalling class for strings in LLVM that do not require any disposal (e.g. simple copy on marshal)</summary>
<#}#>
    [GeneratedCode("LlvmBindingsGenerator","<#=ToolVersion#>")]
    [CustomMarshaller(typeof(string), MarshalMode.ManagedToUnmanagedOut, typeof(<#=Name#>))]
    public static partial class <#=Name#>
    {
        /// <summary>Converts an LLVM string to a managed code string</summary>
        /// <param name="p">native 'char*'</param>
        /// <returns>Managed code string representation of the native string</returns>
        public static unsafe string? ConvertToManaged(byte* p)
        {
            return p is null ? null : AnsiStringMarshaller.ConvertToManaged(p);
        }

<#if(HasNativeDisposer){#>
        /// <summary>Releases the unmanaged pointer</summary>
        /// <param name="p">unmanaged pointer</param>
        public static void Free(nint p)
        {
            <#=NativeDisposer#>(p);
        }

        [LibraryImport( NativeMethods.LibraryPath)]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        private static unsafe partial void <#=NativeDisposer#>( nint p );
<#}#>
    }
}
