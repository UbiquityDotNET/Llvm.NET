<#@ template language="C#" visibility="internal"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<!--
;; ==============================================================================
;; <auto-generated>
;;     This file was generated by a tool.
;;     Runtime Version: <#=ToolVersion#>
;;
;;     Changes to this file may cause incorrect behavior and will be lost if
;;     the code is regenerated.
;; </auto-generated>
;; <usage>
;;     This file contains the bare bones skeleton doc comments info that the
;;     generated code files refer to. If the original source contained comments,
;;     those comments are generated here as the "remarks" element to aid in
;;     completing the docs. This always generated file is created with a .g.xml
;;     extension, however the generated C# code includes the form with the ".g"
;;     in the extension. This prevents the generation of this skeleton from
;;     overwriting any customized docs data. Any new entries need merging into
;;     the real version with all the manual edits.
;; </usage>
;; ==============================================================================
-->
<LibLlvmAPI>
<#foreach(var e in Enums){#>
    <Enumeration name="<#=e.Name#>">
        <summary>TODO: Provide summary for <#=e.Name#> Enumeration</summary>
<#if( e.Comments.Any() ){#>
        <remarks>
<#foreach(var commentLine in e.Comments){#>
            <#=commentLine#>
<#}#>
        </remarks>
<#}#>
<#foreach(var enumItem in e.Members){#>
        <Item name="<#=enumItem.Name#>">
            <summary>TODO: Provide summary for <#=e.Name#>.<#=enumItem.Name#> Enumeration</summary>
        </Item>
<#}#>
    </Enumeration>
<#}#>
<#foreach(var d in Delegates){#>
    <Delegate name="<#=d.Name#>">
        <summary>TODO: Provide summary for Delegate <#=d.Name#></summary>
<#foreach(var p in d.ParameterNames){#>
        <param name="<#=p#>">TODO: Provide details of parameter <#=p#></param>
<#}#><#if(d.HasNonVoidReturn){#>
        <returns>TODO: Document return value</returns>
<#}#>
    </Delegate>
<#}#>
<#foreach(var f in Functions){#>
    <Function name="<#=f.Name#>">
        <summary>TODO: Provide summary for Function <#=f.Name#></summary>
<#foreach(var p in f.ParameterNames){#>
        <param name="<#=p#>">TODO: Provide details of parameter <#=p#></param>
<#}#><#if(f.HasNonVoidReturn){#>
        <returns>TODO: Document return value</returns>
<#}#>
    </Function>
<#}#>
<#foreach(var s in ValueTypes){#>
    <Struct name="<#=s.Name#>">
        <summary>TODO: Provide summary for struct <#=s.Name#></summary>
<# var parsedComments = new ParsedComment(s);
if( parsedComments.Any() ){#>
        <remarks>
<#foreach(var commentLine in parsedComments){#>
            <#=commentLine#>
<#}#>
        </remarks>
<#}#>
<#foreach(var fld in s.Fields){#>
        <Field name="<#=fld.Name#>">
            <summary>TODO: Provide summary for field <#=s.Name#>.<#=fld.Name#></summary>
        </Field>
<#}#>
    </Struct>
<#}#>
</LibLlvmAPI>
