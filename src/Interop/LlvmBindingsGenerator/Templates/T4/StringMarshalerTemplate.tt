<#@ template language="C#" visibility="internal" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: <#=ToolVersion#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.InteropServices;

namespace Llvm.NET.Interop
{
 <#if(HasNativeDisposer){#>
    ///<summary>Custom string marshaling class for strings using <#=NativeDisposer#></summary>
<#}else{#>
    ///<summary>Custom string marshaling class for strings in LLVM</summary>
<#}#>
    [GeneratedCode("LlvmBindingsGenerator","<#=ToolVersion#>")]
    public class <#=Name#>
        : ICustomMarshaler
    {
        ///<Inheritdoc/>
        public void CleanUpManagedData( object ManagedObj )
        {
        }

<#if(HasNativeDisposer){#>
        public void CleanUpNativeData( IntPtr pNativeData )
            => NativeDisposer?.Invoke( pNativeData );
<#}else{#>
        public void CleanUpNativeData( IntPtr pNativeData ) { /* NOP */ }
<#}#>
        [SuppressMessage( "Design", "CA1024:Use properties where appropriate.", Justification = "Name and signature defined by interface")]
        public int GetNativeDataSize( ) => -1;

        public IntPtr MarshalManagedToNative( object ManagedObj )
            => throw new NotImplementedException( );

        public object MarshalNativeToManaged( IntPtr pNativeData )
            => StringNormalizer.NormalizeLineEndings( pNativeData );

        public static ICustomMarshaler GetInstance( string cookie )
        {
            switch( cookie.ToUpperInvariant( ) )
            {
            case null:
            case "":
            case "NONE":
                return new <#=Name#>( );

            default:
                throw new ArgumentException( "Invalid marshal cookie", nameof( cookie ) );
            }
        }

        internal <#=Name#>( )
        {
<#if(HasNativeDisposer){#>
            NativeDisposer = <#=NativeDisposer#>;
<#}#>
        }

<#if(HasNativeDisposer){#>
        private readonly Action<IntPtr> NativeDisposer;

        [DllImport( NativeMethods.LibraryPath, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi, ThrowOnUnmappableChar = true, BestFitMapping = false )]
        private static extern void <#=NativeDisposer#>( IntPtr p );
<#}#>
    }
}
