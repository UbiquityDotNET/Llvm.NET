<#@ template language="C#" visibility="internal" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: <#=ToolVersion#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Runtime.InteropServices;

namespace Llvm.NET.Interop
{
<#if(HasNativeDisposer){#>
    ///<summary>Custom string marshaling class for strings using <see cref="<#=NativeDisposer#>"/></summary>
<#}else{#>
    ///<summary>Custom string marshaling class for strings in LLVM that do not require any disposal (e.g. simple copy on marshal)</summary>
<#}#>
    [GeneratedCode("LlvmBindingsGenerator","<#=ToolVersion#>")]
    public class <#=Name#>
        : CustomStringMarshalerBase
    {
        /// <summary>Custom marshaler static factory contract implementation</summary>
        /// <param name="cookie">Cookie from attribute</param>
        /// <returns>Custom marshaller instance</returns>
        public static ICustomMarshaler GetInstance( string cookie )
        {
            switch( cookie.ToUpperInvariant( ) )
            {
            case null:
            case "":
            case "NONE":
                return new <#=Name#>( );

            default:
                throw new ArgumentException( "Invalid marshal cookie", nameof( cookie ) );
            }
        }

        internal <#=Name#>( )
<#if(HasNativeDisposer){#>
            : base( <#=NativeDisposer#> )
<#}#>
        {
        }

<#if(HasNativeDisposer){#>
        [DllImport( NativeMethods.LibraryPath, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi, ThrowOnUnmappableChar = true, BestFitMapping = false )]
        private static extern void <#=NativeDisposer#>( IntPtr p );
<#}#>
    }
}
