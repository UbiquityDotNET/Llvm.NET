<#@ template language="C#" visibility="internal" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: <#=ToolVersion#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

<#foreach(var import in Imports ) {#>
using <#=import#>;
<#}#>

namespace Llvm.NET.Interop
{
<#foreach(var e in Enums){#>
    /// <include file="<#=Unit.FileNameWithoutExtension#>.xml" path='LibLLVMAPI/Enumeration[@name="<#=e.Name#>"]/*[not(self::Item)]' />
    [GeneratedCode("LlvmBindingsGenerator","<#=ToolVersion#>")]
    public enum <#=e.Name#> : <#=e.BaseType#>
    {
<#foreach(var m in e.Members) {#>
        /// <include file="<#=Unit.FileNameWithoutExtension#>.xml" path='LibLLVMAPI/Enumeration[@name="<#=e.Name#>"]/Item[@name="<#=m.Name#>"]/*' />
        <#=m.Name#> = <#=m.Value#>,
<#}#>
    }

<#}
foreach(var d in Delegates) {#>
    /// <include file="<#=Unit.FileNameWithoutExtension#>.xml" path='LibLLVMAPI/Delegate[@name="<#=d.Name#>"]/*' />
<#foreach( var attrib in d.Attributes) {#>
    <#=attrib.AsString()#>
<#}#>
    <#=d#>
<#}#>
<#foreach(var s in ValueTypes){#>
    /// <include file="<#=Unit.FileNameWithoutExtension#>.xml" path='LibLLVMAPI/Struct[@name="<#=s.Name#>"]/*[not(self::Field)]' />
<#    foreach(var sa in s.Attributes) {#>
    <#=sa.AsString()#>
<#}#>
    public struct <#=s.Name#>
    {
<#foreach(var fld in s.Fields){#>
        /// <include file="<#=Unit.FileNameWithoutExtension#>.xml" path='LibLLVMAPI/struct[@name="<#=s.Name#>"]/Field[@name="<#=fld.Name#>"]/*' />
<#  foreach(var fa in fld.Attributes) {#>
        <#=fa.AsString()#>
<#  }#>
        public <#=GetTypeName(fld.Type)#> <#=fld.Name#>;
<#}#>
    }

<#}#>
    public static partial class NativeMethods
    {
<#foreach(var f in Functions) {#>
        /// <include file="<#=Unit.FileNameWithoutExtension#>.xml" path='LibLLVMAPI/Function[@name="<#=f.Name#>"]/*' />
<#foreach(var a in f.Attributes) {#>
        <#=a.AsString()#>
<#}#>
        <#=f#>
<#}#>
    }
}
