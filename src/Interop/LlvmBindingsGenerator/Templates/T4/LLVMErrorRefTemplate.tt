<#@ template language="C#" visibility="internal"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: <#=ToolVersion#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading;

namespace Llvm.NET.Interop
{
    /// <summary>Global LLVM object handle</summary>
    [SecurityCritical]
    [GeneratedCode( "LlvmBindingsGenerator", "<#=ToolVersion#>" )]
    public class LLVMErrorRef
        : LlvmObjectRef
    {
        /// <summary>Creates a new instance of an LLVMErrorRef</summary>
        /// <param name="handle">Raw native pointer for the handle</param>
        /// <param name="owner">Value to indicate whether the handle is owned or not</param>
        public LLVMErrorRef( IntPtr handle, bool owner )
            : base( owner )
        {
            SetHandle( handle );
            LazyMessage = new Lazy<string>( InternalGetMessage );
        }

        /// <inheritdoc/>
        public override string ToString()
        {
            return LazyMessage.Value;
        }

        /// <inheritdoc/>
        [SecurityCritical]
        protected override bool ReleaseHandle( )
        {
            // ensure handle appears invalid from this point forward
            var prevHandle = Interlocked.Exchange( ref handle, IntPtr.Zero );
            SetHandleAsInvalid( );

            if( prevHandle != IntPtr.Zero )
            {
                LLVMConsumeError( handle );
            }
            return true;
        }

        // during marshaling the runtime always calls the default constructor and calls SetHandle()
        private LLVMErrorRef( )
            : base( true )
        {
            LazyMessage = new Lazy<string>( InternalGetMessage );
        }

        private string InternalGetMessage( )
        {
            if( IsInvalid )
            {
                return string.Empty;
            }

            string retVal = LLVMGetErrorMessage( handle );
            SetHandle( IntPtr.Zero );
            SetHandleAsInvalid( );
            return retVal;
        }

        // use Lazy to cache result of the underlying destructive get
        Lazy<string> LazyMessage;

        [DllImport( NativeMethods.LibraryPath, CallingConvention = CallingConvention.Cdecl )]
        private static extern void LLVMConsumeError( IntPtr p );

        [DllImport( NativeMethods.LibraryPath, CallingConvention = CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( ErrorMessageMarshaler ) )]
        private static extern string LLVMGetErrorMessage( IntPtr p );
    }
}
