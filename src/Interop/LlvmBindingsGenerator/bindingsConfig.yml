#FunctionBindings:
#    - Name: <Function Name>
#      IsObsolete: [true|false] # indicates if the function is considered obsolete [Default is false]
#      IsExported: [true|false] # indicates if the function is exported from LibLLVM.dll [ Default is true]
#      IsProjected: [true|false] # indicates if the function is projected to .NET via Ubiquity.NET.Llvm.Interop.dll [Default is true]
#      ReturnTransform: <Marshaling info, see below for details>
#      ParamTransforms:
#        - <Marshaling info, see below for details>
#        - <Marshaling info, see below for details>
#        - ...
# ----
# Some functions are exported, but not projected into Ubiquity.NET.Llvm.Interop.NativeMethods. While this may seem strange, it is
# generally used only for dipose functions that are only used by the handle wrappers. Exposing such APIs for random callers
# would introduce undefined behavior that most likely results in hard to diagnose crashes. So, they have private PInvoke
# signatures in the handle types themselves, but are ignored for generating the public NativeMethods API surface
#
# Marshaling Info has a base type and multiple derived types
# Properties for all forms of parameter binding:
#     Name - Name of the prameter [ignored for return]
#     IsAlias - Indicates if the return is an alias handle [Only applies to Return]
#     IsUnsafe - Indicates if the return type in manged code is unsafe [Only applies to Return]
#     Semantics - Semantics for the parameter
#         Return - the binding applies to the return of a function
#         In     - the binding is for an input paramater
#         Out    - the binding is for an Out parameter
#         InOut  - the binding is for an out (e.g. 'ref') paramater
#
# Marhsaling info derived types
#   !Status {} - [Return only] Force LLVMStatus as the return type
#   !Alias {}  - [Return only] Return is a GlobalContext handle alias (e.g. caller does not, and cannot destroy the item)
#   !Unsafe {} - [Return only] Return is an unsafe pointer type (This basically disables the validation pass check for unsafe types for this function)
#   !String
#       Kind - type of marshalling to apply for the string. In all cases the string is copied to a managed string during marshaling
#           CopyAlias - Copy only, no release of the native string
#           DisposeMesage - LLVMDisposeMessage() is used to release the native string
#           OrcDisposeMangledSymbol - LLVMOrcDisposeMangledSymbol is used to release the native string
#           DisposeErrorMesage - LLVMDisposeErrorMessage()
#
#   !Primitive
#       Kind - indicates the native type of a primitive to facilitate correct interop signatures
#           Null
#           Void
#           Bool
#           WideChar
#           Char
#           SChar
#           UChar
#           Char16
#           Char32
#           Short
#           UShort
#           Int
#           IntPtr
#           UInt
#           Long
#           ULong
#           LongLong
#           ULongLong
#           Int128
#           UInt128
#           Half
#           Float
#           Double
#           LongDouble
#           Float128
#           IntPtr
#           UIntPtr
#           String
#           Decimal
#
#   !Array
#       SubType - the unmanaged type of the elements of the array (See: System.Runtime.InteropServices.UnmanagedType enum for details)
#       SizeParam - optional integer index of an out parmater that contains the size of the array
#
FunctionBindings:
  - Name: LLVMMDStringInContext
    IsObsolete: True
    DeprecationMessage: "Use LLVMMDStringInContext2 instead"

  - Name: LLVMMDString
    IsObsolete: True
    DeprecationMessage: "Use LLVMMDStringInContext2"

  - Name: LLVMMDNodeInContext
    IsObsolete: True
    DeprecationMessage: "Use LLVMMDNodeInContext2 instead"

  - Name: LLVMMDNode
    IsObsolete: true
    DeprecationMessage: "Use LLVMMDNodeInContext2 instead"

  - Name: LLVMSetCurrentDebugLocation
    IsObsolete: True
    DeprecationMessage: "Use LLVMSetCurrentDebugLocation2 instead"

  - Name: LLVMGetCurrentDebugLocation
    IsObsolete: True
    DeprecationMessage: "Use LLVMGetCurrentDebugLocation2 instead"

  - Name: LLVMCreateObjectFile
    IsObsolete: True
    DeprecationMessage: "Use LLVMCreateBinary instead"

  - Name: LLVMIsSectionIteratorAtEnd
    IsObsolete: True
    DeprecationMessage: "Use LLVMObjectFileIsSectionIteratorAtEnd instead"

  - Name: LLVMGetSymbols
    IsObsolete: True
    DeprecationMessage: "LLVMObjectFileIsSectionIteratorAtEnd"

  - Name: LLVMParseBitcodeInContext
    IsObsolete: True
    DeprecationMessage: "Use LLVMParseBitcodeInContext2 instead"
    ParamTransforms:
      - !String {Name: OutMessage, Semantics: Out, Kind: DisposeMessage }

  - Name: LLVMGetBitcodeModuleInContext
    IsObsolete: True
    DeprecationMessage: "Use LLVMGetBitcodeModuleInContext2 instead"
    ParamTransforms:
      - !String {Name: OutMessage, Semantics: Out, Kind: DisposeMessage }

  - Name: LLVMWriteBitcodeToFileHandle
    IsObsolete: True
    DeprecationMessage: "Use LLVMWriteBitcodeToFD instead"
    ReturnTransform: !Status {}

  - Name: LLVMGetDataLayout
    IsObsolete: True
    DeprecationMessage: "Use LLVMGetDataLayoutStr instead"
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMSetModuleInlineAsm
    IsObsolete: True
    DeprecationMessage: "Use LLVMSetModuleInlineAsm2 instead"

  - Name: LLVMGetValueName
    IsObsolete: True
    DeprecationMessage: "Use LLVMGetValueName2 instead"
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMSetValueName
    IsObsolete: True
    DeprecationMessage: "Use LLVMSetValueName2 instead"

  - Name: LLVMConstInlineAsm
    IsObsolete: True
    DeprecationMessage: "Use LLVMGetInlineAsm instead"

  - Name: LLVMHasUnnamedAddr
    IsObsolete: True
    DeprecationMessage: "Use LLVMGetUnnamedAddress instead"

  - Name: LLVMSetUnnamedAddr
    IsObsolete: True
    DeprecationMessage: "Use LLVMSetUnnamedAddress instead"

  - Name: LLVMBuildInvoke
    IsObsolete: True
    DeprecationMessage: "Use LLVMBuildInvoke2 instead"

  - Name: LLVMBuildLoad
    IsObsolete: True
    DeprecationMessage: "Use LLVMBuildLoad2 instead"

  - Name: LLVMBuildGEP
    IsObsolete: True
    DeprecationMessage: "Use LLVMBuildGEP2 instead"

  - Name: LLVMBuildInBoundsGEP
    IsObsolete: True
    DeprecationMessage: "Use LLVMBuildInBoundsGEP2 instead"

  - Name: LLVMBuildStructGEP
    IsObsolete: True
    DeprecationMessage: "Use LLVMBuildStructGEP2 instead"

  - Name: LLVMBuildIntCast
    IsObsolete: True
    DeprecationMessage: "Use LLVMBuildIntCast2 instead"

  - Name: LLVMBuildCall
    IsObsolete: True
    DeprecationMessage: "Use LLVMBuildCall2 instead"

  - Name: LLVMCreateFunctionPassManager
    IsObsolete: True
    DeprecationMessage: "Use LLVMCreateFunctionPassManagerForModule instead"

  - Name: LLVMStartMultithreaded
    IsObsolete: True
    DeprecationMessage: "This function is deprecated, multi-threading support is a compile-time variable and cannot be changed at run-time"

  - Name: LLVMStopMultithreaded
    IsObsolete: True
    DeprecationMessage: "This function is deprecated, multi-threading support is a compile-time variable and cannot be changed at run-time"

  - Name: LLVMCreateBinary
    ParamTransforms:
      - !String {Name: ErrorMessage, Semantics: Out, Kind: DisposeMessage }

  - Name: LLVMDisposeMessage
    IsProjected: False

  - Name: LLVMDisposeErrorMessage
    IsProjected: False

  - Name: LLVMConsumeError
    IsProjected: False

  - Name: LLVMGetErrorMessage
    IsProjected: False

  - Name: LLVMCreateMessage
    IsExported: False
    IsProjected: False

  - Name: LLVMOrcDisposeMangledSymbol
    IsProjected: False

  - Name: LLVMAddInternalizePassWithMustPreservePredicate
    ParamTransforms:
      - !Primitive { Name: MustPreserve, Semantics: In, Kind: IntPtr }

    # LLVMConstGEP2 appears in Core.h, but has no implementation [Go, Figure!]
  - Name: LLVMConstGEP2
    IsExported: False
    IsProjected: False

    # LLVMConstInBoundsGEP2 appears in Core.h, but has no implementation [Go, Figure!]
  - Name: LLVMConstInBoundsGEP2
    IsExported: False
    IsProjected: False

  - Name: llvm_create_optimizer
    IsExported: False
    IsProjected: False

  - Name: llvm_destroy_optimizer
    IsExported: False
    IsProjected: False

  - Name: llvm_optimize_modules
    IsExported: False
    IsProjected: False

  - Name: llvm_read_object_file
    IsExported: False
    IsProjected: False

  - Name: lto_api_version
    IsExported: False
    IsProjected: False

  - Name: lto_codegen_add_module
    IsExported: False
    IsProjected: False

  - Name: lto_codegen_add_must_preserve_symbol
    IsExported: False
    IsProjected: False

  - Name: lto_codegen_compile
    IsExported: False
    IsProjected: False

  - Name: lto_codegen_compile_optimized
    IsExported: False
    IsProjected: False

  - Name: lto_codegen_compile_to_file
    IsExported: False
    IsProjected: False

  - Name: lto_codegen_create
    IsExported: False
    IsProjected: False

  - Name: lto_codegen_create_in_local_context
    IsExported: False
    IsProjected: False

  - Name: lto_codegen_debug_options
    IsExported: False
    IsProjected: False

  - Name: lto_codegen_dispose
    IsExported: False
    IsProjected: False

  - Name: lto_codegen_optimize
    IsExported: False
    IsProjected: False

  - Name: lto_codegen_set_assembler_args
    IsExported: False
    IsProjected: False

  - Name: lto_codegen_set_assembler_path
    IsExported: False
    IsProjected: False

  - Name: lto_codegen_set_cpu
    IsExported: False
    IsProjected: False

  - Name: lto_codegen_set_debug_model
    IsExported: False
    IsProjected: False

  - Name: lto_codegen_set_diagnostic_handler
    IsExported: False
    IsProjected: False

  - Name: lto_codegen_set_module
    IsExported: False
    IsProjected: False

  - Name: lto_codegen_set_pic_model
    IsExported: False
    IsProjected: False

  - Name: lto_codegen_set_should_embed_uselists
    IsExported: False
    IsProjected: False

  - Name: lto_codegen_set_should_internalize
    IsExported: False
    IsProjected: False

  - Name: lto_codegen_write_merged_modules
    IsExported: False
    IsProjected: False

  - Name: lto_get_error_message
    IsExported: False
    IsProjected: False
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: lto_get_version
    IsExported: False
    IsProjected: False
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: lto_initialize_disassembler
    IsExported: False
    IsProjected: False

  - Name: lto_module_create
    IsExported: False
    IsProjected: False

  - Name: lto_module_create_from_fd
    IsExported: False
    IsProjected: False

  - Name: lto_module_create_from_fd_at_offset
    IsExported: False
    IsProjected: False

  - Name: lto_module_create_from_memory
    IsExported: False
    IsProjected: False

  - Name: lto_module_create_from_memory_with_path
    IsExported: False
    IsProjected: False

  - Name: lto_module_create_in_codegen_context
    IsExported: False
    IsProjected: False

  - Name: lto_module_create_in_local_context
    IsExported: False
    IsProjected: False

  - Name: lto_module_dispose
    IsExported: False
    IsProjected: False

  - Name: lto_module_get_linkeropts
    IsExported: False
    IsProjected: False
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: lto_module_get_num_symbols
    IsExported: False
    IsProjected: False

  - Name: lto_module_get_symbol_attribute
    IsExported: False
    IsProjected: False

  - Name: lto_module_get_symbol_name
    IsExported: False
    IsProjected: False
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: lto_module_get_target_triple
    IsExported: False
    IsProjected: False
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: lto_module_has_objc_category
    IsExported: False
    IsProjected: False

  - Name: lto_module_is_object_file
    IsExported: False
    IsProjected: False

  - Name: lto_module_is_object_file_for_target
    IsExported: False
    IsProjected: False

  - Name: lto_module_is_object_file_in_memory
    IsExported: False
    IsProjected: False

  - Name: lto_module_is_object_file_in_memory_for_target
    IsExported: False
    IsProjected: False

  - Name: lto_module_is_thinlto
    IsExported: False
    IsProjected: False

  - Name: lto_module_set_target_triple
    IsExported: False
    IsProjected: False

  - Name: thinlto_codegen_add_cross_referenced_symbol
    IsExported: False
    IsProjected: False

  - Name: thinlto_codegen_add_module
    IsExported: False
    IsProjected: False

  - Name: thinlto_codegen_add_must_preserve_symbol
    IsExported: False
    IsProjected: False

  - Name: thinlto_codegen_disable_codegen
    IsExported: False
    IsProjected: False

  - Name: thinlto_codegen_dispose
    IsExported: False
    IsProjected: False

  - Name: thinlto_codegen_process
    IsExported: False
    IsProjected: False

  - Name: thinlto_codegen_set_cache_dir
    IsExported: False
    IsProjected: False

  - Name: thinlto_codegen_set_cache_entry_expiration
    IsExported: False
    IsProjected: False

  - Name: thinlto_codegen_set_cache_pruning_interval
    IsExported: False
    IsProjected: False

  - Name: thinlto_codegen_set_cache_size_bytes
    IsExported: False
    IsProjected: False

  - Name: thinlto_codegen_set_cache_size_files
    IsExported: False
    IsProjected: False

  - Name: thinlto_codegen_set_cache_size_megabytes
    IsExported: False
    IsProjected: False

  - Name: thinlto_codegen_set_codegen_only
    IsExported: False
    IsProjected: False

  - Name: thinlto_codegen_set_cpu
    IsExported: False
    IsProjected: False

  - Name: thinlto_codegen_set_final_cache_size_relative_to_available_space
    IsExported: False
    IsProjected: False

  - Name: thinlto_codegen_set_pic_model
    IsExported: False
    IsProjected: False

  - Name: thinlto_codegen_set_savetemps_dir
    IsExported: False
    IsProjected: False

  - Name: thinlto_create_codegen
    IsExported: False
    IsProjected: False

  - Name: thinlto_debug_options
    IsExported: False
    IsProjected: False

  - Name: thinlto_module_get_num_object_files
    IsExported: False
    IsProjected: False

  - Name: thinlto_module_get_num_objects
    IsExported: False
    IsProjected: False

  - Name: thinlto_module_get_object
    IsExported: False
    IsProjected: False

  - Name: thinlto_module_get_object_file
    IsExported: False
    IsProjected: False
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: thinlto_set_generated_objects_dir
    IsExported: False
    IsProjected: False

  - Name: LLVMDisposeMemoryBuffer
    IsProjected: False

  - Name: LLVMContextDispose
    IsProjected: False

  - Name: LLVMDisposeModule
    IsProjected: False

  - Name: LLVMDisposeBuilder
    IsProjected: False

  - Name: LLVMDisposeDIBuilder
    IsProjected: False

  - Name: LLVMDisposeModuleProvider
    IsProjected: False

  - Name: LLVMDisposePassManager
    IsProjected: False

  - Name: LLVMDisposeGenericValue
    IsProjected: False

  - Name: LLVMDisposeExecutionEngine
    IsProjected: False

  - Name: LLVMDisposeMCJITMemoryManager
    IsProjected: False

  - Name: LLVMDisposeTargetData
    IsProjected: False

  - Name: LLVMDisposeTargetMachine
    IsProjected: False

  - Name: LLVMDisposeObjectFile
    IsProjected: False

  - Name: LLVMDisposeSectionIterator
    IsProjected: False

  - Name: LLVMDisposeSymbolIterator
    IsProjected: False

  - Name: LLVMDisposeRelocationIterator
    IsProjected: False

  - Name: LLVMOrcDisposeInstance
    IsProjected: False

  - Name: LLVMPassManagerBuilderDispose
    IsProjected: False

  - Name: LLVMDisposeValueMetadataEntries
    IsProjected: False

  - Name: LLVMDisposeModuleFlagsMetadata
    IsProjected: False

  - Name: LLVMDisasmDispose
    IsProjected: False

  - Name: LibLLVMDisposeTriple
    IsProjected: False

  - Name: LibLLVMDisposeValueCache
    IsProjected: False

  - Name: LLVMVerifyModule
    ReturnTransform: !Status {}
    ParamTransforms:
      - !String {Name: OutMessage, Semantics: Out, Kind: DisposeMessage }

  - Name: LLVMParseBitcode
    ParamTransforms:
      - !String {Name: OutMessage, Semantics: Out, Kind: DisposeMessage }

  - Name: LLVMGetBitcodeModule
    ParamTransforms:
      - !String {Name: OutMessage, Semantics: Out, Kind: DisposeMessage }

  - Name: LLVMPrintModuleToFile
    ReturnTransform: !Status {}
    ParamTransforms:
      - !String {Name: ErrorMessage, Semantics: Out, Kind: DisposeMessage }

  - Name: LLVMCreateMemoryBufferWithContentsOfFile
    ReturnTransform: !Status {}
    ParamTransforms:
      - !String {Name: OutMessage, Semantics: Out, Kind: DisposeMessage }

  - Name: LLVMCreateMemoryBufferWithSTDIN
    ReturnTransform: !Status {}
    ParamTransforms:
      - !String {Name: OutMessage, Semantics: Out, Kind: DisposeMessage }

  - Name: LLVMCreateExecutionEngineForModule
    ReturnTransform: !Status {}
    ParamTransforms:
      - !String {Name: OutError, Semantics: Out, Kind: DisposeMessage }

  - Name: LLVMCreateInterpreterForModule
    ReturnTransform: !Status {}
    ParamTransforms:
      - !String {Name: OutError, Semantics: Out, Kind: DisposeMessage }

  - Name: LLVMCreateJITCompilerForModule
    ReturnTransform: !Status {}
    ParamTransforms:
      - !String {Name: OutError, Semantics: Out, Kind: DisposeMessage }

  - Name: LLVMCreateMCJITCompilerForModule
    ReturnTransform: !Status {}
    ParamTransforms:
      - !String {Name: OutError, Semantics: Out, Kind: DisposeMessage }

  - Name: LLVMRemoveModule
    ReturnTransform: !Status {}
    ParamTransforms:
      - !String {Name: OutError, Semantics: Out, Kind: DisposeMessage }

  - Name: LLVMGetTargetFromTriple
    ReturnTransform: !Status {}
    ParamTransforms:
      - !String {Name: ErrorMessage, Semantics: Out, Kind: DisposeMessage }

  - Name: LLVMTargetMachineEmitToFile
    ReturnTransform: !Status {}
    ParamTransforms:
      - !String {Name: ErrorMessage, Semantics: Out, Kind: DisposeMessage }
      - !String {Name: Filename, Semantics: In, Kind: CopyAlias }

  - Name: LLVMTargetMachineEmitToMemoryBuffer
    ReturnTransform: !Status {}
    ParamTransforms:
      - !String {Name: ErrorMessage, Semantics: Out, Kind: DisposeMessage }

  - Name: LLVMParseIRInContext
    ReturnTransform: !Status {}
    ParamTransforms:
      - !String {Name: OutMessage, Semantics: Out, Kind: DisposeMessage }

  - Name: LLVMOrcGetMangledSymbol
    ParamTransforms:
      - !String {Name: MangledSymbol, Semantics: Out, Kind: OrcDisposeMangledSymbol }

  - Name: LLVMGetInlineAsm
    ParamTransforms:
      - !String {Name: AsmString, Semantics: In, Kind: CopyAlias }
      - !String {Name: Constraints, Semantics: In, Kind: CopyAlias }

  - Name: LLVMDisasmInstruction
    ParamTransforms:
      - !String {Name: OutString, Semantics: InOut, Kind: CopyAlias }
      - !Primitive { Name: Bytes, Semantics: In, Kind: IntPtr }

  - Name: LibLLVMVerifyFunctionEx
    ReturnTransform: !Status {}
    ParamTransforms:
      - !String {Name: OutMessages, Semantics: Out, Kind: DisposeMessage }

  - Name: LLVMCopyStringRepOfTargetData
    ReturnTransform: !String {Kind: DisposeMessage }

  - Name: LibLLVMMetadataAsString
    ReturnTransform: !String {Kind: DisposeMessage }

  - Name: LLVMDIBuilderCreateEnumerationType
    ParamTransforms:
      - !Array {SubType: SysInt, Name: Elements, Semantics: In }

  - Name: LLVMDIBuilderCreateSubroutineType
    ParamTransforms:
      - !Array {SubType: SysInt, Name: ParameterTypes, Semantics: In }

  - Name: LLVMDIBuilderCreateStructType
    ParamTransforms:
      - !Array {SubType: SysInt, Name: Elements, Semantics: In }

  - Name: LLVMDIBuilderCreateUnionType
    ParamTransforms:
      - !Array {SubType: SysInt, Name: Elements, Semantics: In }

  - Name: LLVMDIBuilderCreateArrayType
    ParamTransforms:
      - !Array {SubType: SysInt, Name: Subscripts, Semantics: In }

  - Name: LLVMDIBuilderCreateVectorType
    ParamTransforms:
      - !Array {SubType: SysInt, Name: Subscripts, Semantics: In }

  - Name: LLVMAddInternalizePass
    ParamTransforms:
      - !Primitive { Name: AllButMain, Semantics: In, Kind: Bool }

  - Name: LLVMGetCallSiteAttributes
    ParamTransforms:
      - !Array {SubType: SysInt, Name: Attrs, Semantics: InOut }

  - Name: LLVMGetAttributesAtIndex
    ParamTransforms:
      - !Array {SubType: SysInt, Name: Attrs, Semantics: InOut }

  - Name: LLVMAddIncoming
    ParamTransforms:
      - !Array {SubType: SysInt, Name: IncomingValues, Semantics: In }
      - !Array {SubType: SysInt, Name: IncomingBlocks, Semantics: In }

  - Name: LLVMGetIntrinsicDeclaration
    ParamTransforms:
      - !Array {SubType: SysInt, Name: ParamTypes, Semantics: In }

  - Name: LLVMIntrinsicGetType
    ParamTransforms:
      - !Array {SubType: SysInt, Name: ParamTypes, Semantics: In }

  - Name: LLVMIntrinsicCopyOverloadedName
    ReturnTransform: !String {Kind: CopyAlias }
    ParamTransforms:
      - !Array {SubType: SysInt, Name: ParamTypes, Semantics: In }

  - Name: LLVMBuildCall2
    ParamTransforms:
      - !Array {SubType: SysInt, Name: Args, Semantics: In }

  - Name: LLVMBuildInBoundsGEP2
    ParamTransforms:
      - !Array {SubType: SysInt, Name: Indices, Semantics: In }

  - Name: LLVMConstGEP
    ParamTransforms:
      - !Array {SubType: SysInt, Name: ConstantIndices, Semantics: In }

  - Name: LLVMBuildGEP2
    ParamTransforms:
      - !Array {SubType: SysInt, Name: Indices, Semantics: In }

  - Name: LLVMDIBuilderCreateExpression
    ParamTransforms:
      - !Array {SubType: I8, Name: Addr, Semantics: In }

  - Name: LLVMFunctionType
    ParamTransforms:
      - !Array {SubType: SysInt, Name: ParamTypes, Semantics: In }

  - Name: LLVMConstStructInContext
    ParamTransforms:
      - !Array {SubType: SysInt, Name: ConstantVals, Semantics: In }

  - Name: LLVMConstNamedStruct
    ParamTransforms:
      - !Array {SubType: SysInt, Name: ConstantVals, Semantics: In }

  - Name: LLVMStructTypeInContext
    ParamTransforms:
      - !Array {SubType: SysInt, Name: ElementTypes, Semantics: In }

  - Name: LLVMMDNodeInContext2
    ParamTransforms:
      - !Array {SubType: SysInt, Name: MDs, Semantics: In }

  - Name: LLVMDIBuilderGetOrCreateTypeArray
    ParamTransforms:
      - !Array {SubType: SysInt, Name: Data, Semantics: In }

  - Name: LLVMDIBuilderGetOrCreateArray
    ParamTransforms:
      - !Array {SubType: SysInt, Name: Data, Semantics: In }

  - Name: LLVMBuildInvoke2
    ParamTransforms:
      - !Array {SubType: SysInt, Name: Args, Semantics: In }

  - Name: LLVMConstInBoundsGEP
    ParamTransforms:
      - !Array {SubType: SysInt, Name: ConstantIndices, Semantics: In }

  - Name: LLVMGetParamTypes
    ParamTransforms:
      - !Array {SubType: SysInt, Name: Dest, Semantics: InOut }

  - Name: LLVMStructSetBody
    ParamTransforms:
      - !Array {SubType: SysInt, Name: ElementTypes, Semantics: In }

  - Name: LLVMGetBasicBlocks
    ParamTransforms:
      - !Array {SubType: SysInt, Name: BasicBlocks, Semantics: In }

  - Name: LLVMConstArray
    ParamTransforms:
      - !Array {SubType: SysInt, Name: ConstantVals, Semantics: In }

  - Name: LLVMGetDiagInfoDescription
    ReturnTransform: !String {Kind: DisposeMessage }

  - Name: LLVMGetStringAttributeKind
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMGetStringAttributeValue
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMGetModuleIdentifier
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMGetSourceFileName
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMGetDataLayoutStr
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMGetTarget
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMModuleFlagEntriesGetKey
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMGetModuleInlineAsm
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMGetNamedMetadataName
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMGetDebugLocDirectory
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMGetDebugLocFilename
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMGetStructName
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMGetValueName2
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMGetAsString
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMGetSection
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMIntrinsicGetName
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMGetGC
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMGetMDString
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMGetBasicBlockName
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMDITypeGetName
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMGetTargetName
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMGetTargetDescription
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMGetSectionName
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMGetSymbolName
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMGetRelocationTypeName
    ReturnTransform: !String {Kind: DisposeMessage }

  - Name: LLVMGetRelocationValueString
    ReturnTransform: !String {Kind: DisposeMessage }

  - Name: LLVMOrcGetErrorMsg
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LLVMPrintModuleToString
    ReturnTransform: !String {Kind: DisposeMessage }

  - Name: LLVMPrintTypeToString
    ReturnTransform: !String {Kind: DisposeMessage }

  - Name: LLVMPrintValueToString
    ReturnTransform: !String {Kind: DisposeMessage }

  - Name: LLVMGetTargetMachineTriple
    ReturnTransform: !String {Kind: DisposeMessage }

  - Name: LLVMGetTargetMachineCPU
    ReturnTransform: !String {Kind: DisposeMessage }

  - Name: LLVMGetTargetMachineFeatureString
    ReturnTransform: !String {Kind: DisposeMessage }

  - Name: LLVMGetBufferStart
    ReturnTransform: !Primitive {Kind: IntPtr }

  - Name: LibLLVMGetMDStringText
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LibLLVMAttributeToString
    ReturnTransform: !String {Kind: DisposeErrorMesage }

  - Name: LibLLVMGetModuleSourceFileName
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LibLLVMGetModuleName
    ReturnTransform: !String {Kind: CopyAlias }

  - Name: LibLLVMComdatGetName
    ReturnTransform: !String {Kind: DisposeErrorMesage }

  - Name: LibLLVMTripleAsString
    ReturnTransform: !String {Kind: DisposeMessage }

  - Name: LibLLVMTripleGetArchTypeName
    ReturnTransform: !String {Kind: DisposeMessage }

  - Name: LibLLVMTripleGetSubArchTypeName
    ReturnTransform: !String {Kind: DisposeMessage }

  - Name: LibLLVMTripleGetVendorTypeName
    ReturnTransform: !String {Kind: DisposeMessage }

  - Name: LibLLVMTripleGetOsTypeName
    ReturnTransform: !String {Kind: DisposeMessage }

  - Name: LibLLVMTripleGetEnvironmentTypeName
    ReturnTransform: !String {Kind: DisposeMessage }

  - Name: LibLLVMTripleGetObjectFormatTypeName
    ReturnTransform: !String {Kind: DisposeMessage }

  - Name: LLVMNormalizeTargetTriple
    ReturnTransform: !String {Kind: DisposeMessage }

  - Name: LLVMGetDefaultTargetTriple
    ReturnTransform: !String {Kind: DisposeMessage }

  - Name: LLVMGetHostCPUName
    ReturnTransform: !String {Kind: DisposeMessage }

  - Name: LLVMGetHostCPUFeatures
    ReturnTransform: !String {Kind: DisposeMessage }

  - Name: LLVMHasMetadata
    ReturnTransform: !Primitive {Kind: Bool }

  - Name: LLVMGetSectionContents
    ReturnTransform: !Primitive {Kind: IntPtr }

  - Name: LLVMSetDisasmOptions
    ReturnTransform: !Primitive {Kind: Bool }

  - Name: LLVMFindFunction
    ReturnTransform: !Status {}

  - Name: LLVMGetBitcodeModule2
    ReturnTransform: !Status {}

  - Name: LLVMGetBitcodeModuleInContext2
    ReturnTransform: !Status {}

  - Name: LLVMInitializeNativeAsmParser
    ReturnTransform: !Status {}

  - Name: LLVMInitializeNativeAsmPrinter
    ReturnTransform: !Status {}

  - Name: LLVMInitializeNativeDisassembler
    ReturnTransform: !Status {}

  - Name: LLVMInitializeNativeTarget
    ReturnTransform: !Status {}

  - Name: LLVMLinkModules2
    ReturnTransform: !Status {}

  - Name: LLVMParseBitcode2
    ReturnTransform: !Status {}

  - Name: LLVMParseBitcodeInContext2
    ReturnTransform: !Status {}

  - Name: LLVMWriteBitcodeToFD
    ReturnTransform: !Status {}

  - Name: LLVMWriteBitcodeToFile
    ReturnTransform: !Status {}

  - Name: LibLLVMGetNodeContext
    ReturnTransform: !Alias {}

  - Name: LibLLVMNamedMetadataGetParentModule
    ReturnTransform: !Alias {}

  - Name: LLVMGetExecutionEngineTargetData
    ReturnTransform: !Alias {}

  - Name: LLVMGetExecutionEngineTargetMachine
    ReturnTransform: !Alias {}

  - Name: LLVMGetGlobalContext
    ReturnTransform: !Alias {}

  - Name: LLVMGetGlobalParent
    ReturnTransform: !Alias {}

  - Name: LLVMGetModuleContext
    ReturnTransform: !Alias {}

  - Name: LLVMGetTypeContext
    ReturnTransform: !Alias {}

  - Name: LLVMGetModuleDataLayout
    ReturnTransform: !Alias {}

  - Name: LLVMDIFileGetDirectory
    ReturnTransform: !String {Kind: CopyAlias}

  - Name: LLVMDIFileGetFilename
    ReturnTransform: !String {Kind: CopyAlias}

  - Name: LLVMDIFileGetSource
    ReturnTransform: !String {Kind: CopyAlias}

  - Name: LLVMGetPointerToGlobal
    ReturnTransform: !Primitive {Kind: IntPtr}

  - Name: LLVMContextGetDiagnosticContext
    ReturnTransform: !Primitive {Kind: IntPtr}

  - Name: LLVMGenericValueToPointer
    ReturnTransform: !Primitive {Kind: IntPtr}

  - Name: LLVMRecompileAndRelinkFunction
    ReturnTransform: !Primitive {Kind: IntPtr}

  - Name: LLVMSearchForAddressOfSymbol
    ReturnTransform: !Primitive {Kind: IntPtr}

  - Name: LLVMGetIndices
    ReturnTransform: !Unsafe {}

  - Name: LLVMSymbolLookupCallback
    ReturnTransform: !String {Kind: CopyAlias}

# The HandleMap Lists the types of handles and their disposal semantics
#HandleMap:
#    - !ContextHandle { HandleName: LLVMTypeRef}
#    - !GlobalHandle { HandleName: LLVMModuleRef, Disposer: LLVMDisposeModule, Alias: true }
#
HandleMap:
  - !GlobalHandle {HandleName: LLVMMemoryBufferRef, Disposer: LLVMDisposeMemoryBuffer, Alias: False}
  - !GlobalHandle {HandleName: LLVMContextRef, Disposer: LLVMContextDispose, Alias: True}
  - !GlobalHandle {HandleName: LLVMModuleRef, Disposer: LLVMDisposeModule, Alias: True}
  - !ContextHandle {HandleName: LLVMTypeRef }
  - !ContextHandle {HandleName: LLVMValueRef }
  - !ContextHandle {HandleName: LLVMBasicBlockRef }
  - !ContextHandle {HandleName: LLVMMetadataRef }
  - !ContextHandle {HandleName: LLVMNamedMDNodeRef }
  - !GlobalHandle {HandleName: LLVMBuilderRef, Disposer: LLVMDisposeBuilder, Alias: False}
  - !GlobalHandle {HandleName: LLVMDIBuilderRef, Disposer: LLVMDisposeDIBuilder, Alias: False}
  - !GlobalHandle {HandleName: LLVMModuleProviderRef, Disposer: LLVMDisposeModuleProvider, Alias: False}
  - !GlobalHandle {HandleName: LLVMPassManagerRef, Disposer: LLVMDisposePassManager, Alias: False}
  - !GlobalHandle {HandleName: LLVMPassRegistryRef, Disposer: LLVMPassRegistryDispose, Alias: False}
  - !ContextHandle {HandleName: LLVMUseRef }
  - !ContextHandle {HandleName: LLVMAttributeRef }
  - !ContextHandle {HandleName: LLVMDiagnosticInfoRef }
  - !ContextHandle {HandleName: LLVMComdatRef }
  - !ContextHandle {HandleName: LLVMJITEventListenerRef }
  - !GlobalHandle {HandleName: LLVMGenericValueRef, Disposer: LLVMDisposeGenericValue, Alias: False}
  - !GlobalHandle {HandleName: LLVMExecutionEngineRef, Disposer: LLVMDisposeExecutionEngine, Alias: False}
  - !GlobalHandle {HandleName: LLVMMCJITMemoryManagerRef, Disposer: LLVMDisposeMCJITMemoryManager, Alias: False}
  - !GlobalHandle {HandleName: LLVMTargetDataRef, Disposer: LLVMDisposeTargetData, Alias: True}
  - !ContextHandle {HandleName: LLVMTargetLibraryInfoRef }
  - !GlobalHandle {HandleName: LLVMTargetMachineRef, Disposer: LLVMDisposeTargetMachine, Alias: True}
  - !ContextHandle {HandleName: LLVMTargetRef }
  - !ContextHandle {HandleName: LLVMErrorTypeId }
  - !GlobalHandle {HandleName: LLVMObjectFileRef, Disposer: LLVMDisposeObjectFile, Alias: False}
  - !GlobalHandle {HandleName: LLVMBinaryRef, Disposer: LLVMDisposeBinary, Alias: False}
  - !GlobalHandle {HandleName: LLVMSectionIteratorRef, Disposer: LLVMDisposeSectionIterator, Alias: False}
  - !GlobalHandle {HandleName: LLVMSymbolIteratorRef, Disposer: LLVMDisposeSymbolIterator, Alias: False}
  - !GlobalHandle {HandleName: LLVMRelocationIteratorRef, Disposer: LLVMDisposeRelocationIterator, Alias: False}
  - !GlobalHandle {HandleName: LLVMOrcJITStackRef, Disposer: LLVMOrcDisposeInstance, Alias: False}
  - !GlobalHandle {HandleName: LLVMPassManagerBuilderRef, Disposer: LLVMPassManagerBuilderDispose, Alias: False}
  - !GlobalHandle {HandleName: LLVMValueMetadataEntry, Disposer: LLVMDisposeValueMetadataEntries, Alias: False}
  - !GlobalHandle {HandleName: LLVMModuleFlagEntry, Disposer: LLVMDisposeModuleFlagsMetadata, Alias: False}
  - !GlobalHandle {HandleName: LLVMDisasmContextRef, Disposer: LLVMDisasmDispose, Alias: False}
  - !GlobalHandle {HandleName: LibLLVMTripleRef, Disposer: LibLLVMDisposeTriple, Alias: False}
  - !GlobalHandle {HandleName: LibLLVMValueCacheRef, Disposer: LibLLVMDisposeValueCache, Alias: False}
  - !ContextHandle {HandleName: LibLLVMMDOperandRef}
  - !ContextHandle {HandleName: LLVMRemarkStringRef}
  - !ContextHandle {HandleName: LLVMRemarkDebugLocRef}
  - !ContextHandle {HandleName: LLVMRemarkArgRef}
  - !GlobalHandle {HandleName: LLVMRemarkEntryRef, Disposer: LLVMRemarkEntryDispose, Alias: False}
  - !GlobalHandle {HandleName: LLVMRemarkParserRef, Disposer: LLVMRemarkParserDispose, Alias: False}

# C/C++ allow anonymous enums that effectively introduce a const into the parent namespace.
# Generally, that's not desired for the interop. In fact the only known use cases for this
# in the LLVM-C headers is to handle some FLAGS type enums where the language limits the values
# of an enum to the range of an int. So what LLVM does is define the anonymous enum, and then
# define a typedef of unsigned to a name for the enum. (see: Core.h\LLVMAttributeIndex as an
# example)
# This table maps the name of the first element of an anonymous enum with the name of the
# typedef used to represent the enumeration. This is used to find the correct declaration
# in the AST
#AnonymousEnums:
#    LLVMAttributeReturnIndex: LLVMAttributeIndex
#    LLVMMDStringMetadataKind: LLVMMetadataKind
#
AnonymousEnums:
  LLVMAttributeReturnIndex: LLVMAttributeIndex
  LLVMMDStringMetadataKind: LLVMMetadataKind

IgnoredHeaders:
  - llvm-c/LinkTimeOptimizer.h
  - llvm-c/lto.h
  - llvm-c/Remarks.h
