# This section list the native headers ignored by this tool
IgnoredHeaders:
  - llvm-c/lto.h
  - llvm-c/Remarks.h

# The HandleMap Lists the types of handles and their disposal semantics
# If Alias is True for a global handle then an alias handle is also generated
# ContextHandle's are owned by the containing context and therefore do not have
# any sort of Disposer function.
#
#HandleMap:
#    - !GlobalHandle { HandleName: <Name of Handle>, Disposer: <Dispose Method for handle>[, Alias: True] }
#    - !ContextHandle { HandleName: <Name of Handle>}
#
HandleMap:
  - !GlobalHandle {HandleName: LLVMMemoryBufferRef, Disposer: LLVMDisposeMemoryBuffer}
  - !GlobalHandle {HandleName: LLVMContextRef, Disposer: LLVMContextDispose, Alias: True}
  - !GlobalHandle {HandleName: LLVMModuleRef, Disposer: LLVMDisposeModule, Alias: True}
  - !GlobalHandle {HandleName: LLVMBuilderRef, Disposer: LLVMDisposeBuilder}
  - !GlobalHandle {HandleName: LLVMDIBuilderRef, Disposer: LLVMDisposeDIBuilder}
  - !GlobalHandle {HandleName: LLVMModuleProviderRef, Disposer: LLVMDisposeModuleProvider}
  - !GlobalHandle {HandleName: LLVMPassManagerRef, Disposer: LLVMDisposePassManager}
  - !GlobalHandle {HandleName: LLVMGenericValueRef, Disposer: LLVMDisposeGenericValue}
  - !GlobalHandle {HandleName: LLVMExecutionEngineRef, Disposer: LLVMDisposeExecutionEngine}
  - !GlobalHandle {HandleName: LLVMMCJITMemoryManagerRef, Disposer: LLVMDisposeMCJITMemoryManager}
  - !GlobalHandle {HandleName: LLVMTargetDataRef, Disposer: LLVMDisposeTargetData, Alias: True}
  - !GlobalHandle {HandleName: LLVMObjectFileRef, Disposer: LLVMDisposeObjectFile}
  - !GlobalHandle {HandleName: LLVMBinaryRef, Disposer: LLVMDisposeBinary}
  - !GlobalHandle {HandleName: LLVMSectionIteratorRef, Disposer: LLVMDisposeSectionIterator}
  - !GlobalHandle {HandleName: LLVMSymbolIteratorRef, Disposer: LLVMDisposeSymbolIterator}
  - !GlobalHandle {HandleName: LLVMRelocationIteratorRef, Disposer: LLVMDisposeRelocationIterator}
  # NOTE: This isn't really a reference to a single entry, it's an array. But this is the name that
  # LLVM uses and changing that for the interop layer causes all sorts of problems for renaming return
  # types and parameters etc...
  - !GlobalHandle {HandleName: LLVMValueMetadataEntry, Disposer: LLVMDisposeValueMetadataEntries}
  - !GlobalHandle {HandleName: LLVMModuleFlagEntry, Disposer: LLVMDisposeModuleFlagsMetadata}
  - !GlobalHandle {HandleName: LLVMDisasmContextRef, Disposer: LLVMDisasmDispose}
  - !GlobalHandle {HandleName: LibLLVMTripleRef, Disposer: LibLLVMDisposeTriple}
  - !GlobalHandle {HandleName: LibLLVMValueCacheRef, Disposer: LibLLVMDisposeValueCache}
  - !GlobalHandle {HandleName: LLVMTargetMachineRef, Disposer: LLVMDisposeTargetMachine, Alias: True}
  - !GlobalHandle {HandleName: LLVMOrcSymbolStringPoolEntryRef, Disposer: LLVMOrcDisposeSymbols}
  - !GlobalHandle {HandleName: LLVMOperandBundleRef, Disposer: LLVMDisposeOperandBundle}
  - !GlobalHandle {HandleName: LLVMTargetMachineOptionsRef, Disposer: LLVMDisposeTargetMachineOptions}
  - !GlobalHandle {HandleName: LLVMOrcLLJITBuilderRef, Disposer: LLVMOrcDisposeLLJITBuilder}
  - !GlobalHandle {HandleName: LLVMOrcLLJITRef, Disposer: LLVMOrcDisposeLLJIT}
  - !GlobalHandle {HandleName: LLVMOrcMaterializationUnitRef, Disposer: LLVMOrcDisposeMaterializationUnit}
  - !GlobalHandle {HandleName: LLVMOrcMaterializationResponsibilityRef, Disposer: LLVMOrcDisposeMaterializationResponsibility}
  - !GlobalHandle {HandleName: LLVMOrcResourceTrackerRef, Disposer: LLVMOrcReleaseResourceTracker}
  - !GlobalHandle {HandleName: LLVMOrcDefinitionGeneratorRef, Disposer: LLVMOrcDisposeDefinitionGenerator}
  - !GlobalHandle {HandleName: LLVMOrcThreadSafeContextRef, Disposer: LLVMOrcDisposeThreadSafeContext}
  - !GlobalHandle {HandleName: LLVMOrcThreadSafeModuleRef, Disposer: LLVMOrcDisposeThreadSafeModule}
  - !GlobalHandle {HandleName: LLVMOrcJITTargetMachineBuilderRef, Disposer: LLVMOrcDisposeJITTargetMachineBuilder}
  - !GlobalHandle {HandleName: LLVMOrcObjectLayerRef, Disposer: LLVMOrcDisposeObjectLayer}
  - !GlobalHandle {HandleName: LLVMOrcIndirectStubsManagerRef, Disposer: LLVMOrcDisposeIndirectStubsManager}
  - !GlobalHandle {HandleName: LLVMOrcLazyCallThroughManagerRef, Disposer: LLVMOrcDisposeLazyCallThroughManager}
  - !GlobalHandle {HandleName: LLVMOrcDumpObjectsRef, Disposer: LLVMOrcDisposeDumpObjects}
  - !GlobalHandle {HandleName: LLVMPassBuilderOptionsRef, Disposer: LLVMDisposePassBuilderOptions}

  - !ContextHandle {HandleName: LLVMTypeRef }
  - !ContextHandle {HandleName: LLVMValueRef }
  - !ContextHandle {HandleName: LLVMBasicBlockRef }
  - !ContextHandle {HandleName: LLVMMetadataRef }
  - !ContextHandle {HandleName: LLVMNamedMDNodeRef }
  - !ContextHandle {HandleName: LLVMUseRef }
  - !ContextHandle {HandleName: LLVMAttributeRef }
  - !ContextHandle {HandleName: LLVMDiagnosticInfoRef }
  - !ContextHandle {HandleName: LLVMComdatRef }
  - !ContextHandle {HandleName: LLVMJITEventListenerRef }
  - !ContextHandle {HandleName: LLVMTargetLibraryInfoRef }
  - !ContextHandle {HandleName: LLVMTargetRef }
  - !ContextHandle {HandleName: LLVMErrorTypeId }
  - !ContextHandle {HandleName: LibLLVMMDOperandRef}
  - !ContextHandle {HandleName: LLVMDbgRecordRef}
  - !ContextHandle {HandleName: LLVMOrcExecutionSessionRef}
  - !ContextHandle {HandleName: LLVMOrcSymbolStringPoolRef}
  - !ContextHandle {HandleName: LLVMOrcJITDylibRef}
  - !ContextHandle {HandleName: LLVMOrcLookupStateRef}
  - !ContextHandle {HandleName: LLVMOrcIRTransformLayerRef}
  - !ContextHandle {HandleName: LLVMOrcObjectTransformLayerRef}
  - !ContextHandle {HandleName: LLVMOrcObjectLinkingLayerRef}
