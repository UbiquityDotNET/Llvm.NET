// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 2.17941.31104.49410
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading;

namespace Llvm.NET.Interop
{
    /// <summary>Global LLVM object handle</summary>
    [SecurityCritical]
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public class LLVMContextRef
        : LlvmObjectRef
    {
        /// <summary>Creates a new instance of an LLVMContextRef</summary>
        /// <param name="handle">Raw native pointer for the handle</param>
        /// <param name="owner">Value to indicate whether the handle is owned or not</param>
        public LLVMContextRef( IntPtr handle, bool owner )
            : base( owner )
        {
            SetHandle( handle );
        }

        /// <summary>Gets a Zero (<see langword="null"/> value handle</summary>
        public static LLVMContextRef Zero { get; } = new LLVMContextRef(IntPtr.Zero, false);

        /// <inheritdoc/>
        [SecurityCritical]
        protected override bool ReleaseHandle( )
        {
            // ensure handle appears invalid from this point forward
            var prevHandle = Interlocked.Exchange( ref handle, IntPtr.Zero );
            SetHandleAsInvalid( );

            if( prevHandle != IntPtr.Zero )
            {
                LLVMContextDispose( handle );
            }
            return true;
        }

        private LLVMContextRef( )
            : base( true )
        {
        }

        [DllImport( NativeMethods.LibraryPath, CallingConvention = CallingConvention.Cdecl )]
        private static extern void LLVMContextDispose( IntPtr p );
    }

    /// <summary>Alias handle for an LLVM object</summary>
    ///<remarks>
    /// Sometimes a global object is exposed via a child that maintains a reference to the parent.
    /// In such cases, the handle isn't owned by the App (it's an alias) and therfore should not be
    /// disposed or destroyed. This handle type takes care of that in a type safe manner and does not
    /// perform any automatic cleanup.
    ///</remarks>
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public class LLVMContextRefAlias
        : LLVMContextRef
    {
        private LLVMContextRefAlias()
            : base( IntPtr.Zero, false )
        {
        }
    }
}
