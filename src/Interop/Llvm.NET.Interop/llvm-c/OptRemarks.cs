// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 2.17941.31104.49410
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.CodeDom.Compiler;
using System.Runtime.InteropServices;
using System.Security;

namespace Llvm.NET.Interop
{
    [StructLayout( LayoutKind.Sequential )]
    public struct LLVMOptRemarkStringRef
    {
        [MarshalAs( UnmanagedType.LPStr )]
        string Str;
        System.UInt32 Len;
    }

    [StructLayout( LayoutKind.Sequential )]
    public struct LLVMOptRemarkDebugLoc
    {
        LLVMOptRemarkStringRef SourceFile;
        System.UInt32 SourceLineNumber;
        System.UInt32 SourceColumnNumber;
    }

    [StructLayout( LayoutKind.Sequential )]
    public struct LLVMOptRemarkArg
    {
        LLVMOptRemarkStringRef Key;
        LLVMOptRemarkStringRef Value;
        LLVMOptRemarkDebugLoc DebugLoc;
    }

    [StructLayout( LayoutKind.Sequential )]
    public struct LLVMOptRemarkEntry
    {
        LLVMOptRemarkStringRef RemarkType;
        LLVMOptRemarkStringRef PassName;
        LLVMOptRemarkStringRef RemarkName;
        LLVMOptRemarkStringRef FunctionName;
        LLVMOptRemarkDebugLoc DebugLoc;
        System.UInt32 Hotness;
        System.UInt32 NumArgs;
        global::Llvm.NET.Interop.LLVMOptRemarkArg Args;
    }

    public static partial class NativeMethods
    {
        /**
         * Creates a remark parser that can be used to read and parse the buffer located
         * in \p Buf of size \p Size.
         *
         * \p Buf cannot be NULL.
         *
         * This function should be paired with LLVMOptRemarkParserDispose() to avoid
         * leaking resources.
         *
         * \since OPT_REMARKS_API_VERSION=0
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMOptRemarkParserRef LLVMOptRemarkParserCreate( global::System.IntPtr Buf, System.UInt64 Size );

        /**
         * Returns the next remark in the file.
         *
         * The value pointed to by the return value is invalidated by the next call to
         * LLVMOptRemarkParserGetNext().
         *
         * If the parser reaches the end of the buffer, the return value will be NULL.
         *
         * In the case of an error, the return value will be NULL, and:
         *
         * 1) LLVMOptRemarkParserHasError() will return `1`.
         *
         * 2) LLVMOptRemarkParserGetErrorMessage() will return a descriptive error
         *    message.
         *
         * An error may occur if:
         *
         * 1) An argument is invalid.
         *
         * 2) There is a YAML parsing error. This type of error aborts parsing
         *    immediately and returns `1`. It can occur on malformed YAML.
         *
         * 3) Remark parsing error. If this type of error occurs, the parser won't call
         *    the handler and will continue to the next one. It can occur on malformed
         *    remarks, like missing or extra fields in the file.
         *
         * Here is a quick example of the usage:
         *
         * ```
         *  LLVMOptRemarkParserRef Parser = LLVMOptRemarkParserCreate(Buf, Size);
         *  LLVMOptRemarkEntry *Remark = NULL;
         *  while ((Remark == LLVMOptRemarkParserGetNext(Parser))) {
         *    // use Remark
         *  }
         *  bool HasError = LLVMOptRemarkParserHasError(Parser);
         *  LLVMOptRemarkParserDispose(Parser);
         * ```
         *
         * \since OPT_REMARKS_API_VERSION=0
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern global::Llvm.NET.Interop.LLVMOptRemarkEntry LLVMOptRemarkParserGetNext( LLVMOptRemarkParserRef Parser );

        /**
         * Returns `1` if the parser encountered an error while parsing the buffer.
         *
         * \since OPT_REMARKS_API_VERSION=0
         */
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMOptRemarkParserHasError( LLVMOptRemarkParserRef Parser );

        /**
         * Returns a null-terminated string containing an error message.
         *
         * In case of no error, the result is `NULL`.
         *
         * The memory of the string is bound to the lifetime of \p Parser. If
         * LLVMOptRemarkParserDispose() is called, the memory of the string will be
         * released.
         *
         * \since OPT_REMARKS_API_VERSION=0
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LLVMOptRemarkParserGetErrorMessage( LLVMOptRemarkParserRef Parser );

    }
}
