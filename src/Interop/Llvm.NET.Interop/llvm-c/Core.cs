// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 2.17941.31104.49410
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.CodeDom.Compiler;
using System.Runtime.InteropServices;
using System.Security;

namespace Llvm.NET.Interop
{
    /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/*[not(self::Item)]' />
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public enum LLVMOpcode : global::System.Int32
    {
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMRet"]/*' />
        LLVMRet = 1,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMBr"]/*' />
        LLVMBr = 2,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMSwitch"]/*' />
        LLVMSwitch = 3,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMIndirectBr"]/*' />
        LLVMIndirectBr = 4,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMInvoke"]/*' />
        LLVMInvoke = 5,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMUnreachable"]/*' />
        LLVMUnreachable = 7,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMFNeg"]/*' />
        LLVMFNeg = 66,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMAdd"]/*' />
        LLVMAdd = 8,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMFAdd"]/*' />
        LLVMFAdd = 9,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMSub"]/*' />
        LLVMSub = 10,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMFSub"]/*' />
        LLVMFSub = 11,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMMul"]/*' />
        LLVMMul = 12,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMFMul"]/*' />
        LLVMFMul = 13,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMUDiv"]/*' />
        LLVMUDiv = 14,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMSDiv"]/*' />
        LLVMSDiv = 15,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMFDiv"]/*' />
        LLVMFDiv = 16,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMURem"]/*' />
        LLVMURem = 17,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMSRem"]/*' />
        LLVMSRem = 18,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMFRem"]/*' />
        LLVMFRem = 19,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMShl"]/*' />
        LLVMShl = 20,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMLShr"]/*' />
        LLVMLShr = 21,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMAShr"]/*' />
        LLVMAShr = 22,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMAnd"]/*' />
        LLVMAnd = 23,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMOr"]/*' />
        LLVMOr = 24,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMXor"]/*' />
        LLVMXor = 25,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMAlloca"]/*' />
        LLVMAlloca = 26,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMLoad"]/*' />
        LLVMLoad = 27,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMStore"]/*' />
        LLVMStore = 28,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMGetElementPtr"]/*' />
        LLVMGetElementPtr = 29,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMTrunc"]/*' />
        LLVMTrunc = 30,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMZExt"]/*' />
        LLVMZExt = 31,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMSExt"]/*' />
        LLVMSExt = 32,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMFPToUI"]/*' />
        LLVMFPToUI = 33,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMFPToSI"]/*' />
        LLVMFPToSI = 34,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMUIToFP"]/*' />
        LLVMUIToFP = 35,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMSIToFP"]/*' />
        LLVMSIToFP = 36,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMFPTrunc"]/*' />
        LLVMFPTrunc = 37,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMFPExt"]/*' />
        LLVMFPExt = 38,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMPtrToInt"]/*' />
        LLVMPtrToInt = 39,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMIntToPtr"]/*' />
        LLVMIntToPtr = 40,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMBitCast"]/*' />
        LLVMBitCast = 41,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMAddrSpaceCast"]/*' />
        LLVMAddrSpaceCast = 60,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMICmp"]/*' />
        LLVMICmp = 42,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMFCmp"]/*' />
        LLVMFCmp = 43,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMPHI"]/*' />
        LLVMPHI = 44,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMCall"]/*' />
        LLVMCall = 45,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMSelect"]/*' />
        LLVMSelect = 46,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMUserOp1"]/*' />
        LLVMUserOp1 = 47,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMUserOp2"]/*' />
        LLVMUserOp2 = 48,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMVAArg"]/*' />
        LLVMVAArg = 49,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMExtractElement"]/*' />
        LLVMExtractElement = 50,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMInsertElement"]/*' />
        LLVMInsertElement = 51,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMShuffleVector"]/*' />
        LLVMShuffleVector = 52,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMExtractValue"]/*' />
        LLVMExtractValue = 53,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMInsertValue"]/*' />
        LLVMInsertValue = 54,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMFence"]/*' />
        LLVMFence = 55,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMAtomicCmpXchg"]/*' />
        LLVMAtomicCmpXchg = 56,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMAtomicRMW"]/*' />
        LLVMAtomicRMW = 57,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMResume"]/*' />
        LLVMResume = 58,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMLandingPad"]/*' />
        LLVMLandingPad = 59,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMCleanupRet"]/*' />
        LLVMCleanupRet = 61,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMCatchRet"]/*' />
        LLVMCatchRet = 62,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMCatchPad"]/*' />
        LLVMCatchPad = 63,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMCleanupPad"]/*' />
        LLVMCleanupPad = 64,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMOpcode"]/Item[@name="LLVMCatchSwitch"]/*' />
        LLVMCatchSwitch = 65,
    }

    /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMTypeKind"]/*[not(self::Item)]' />
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public enum LLVMTypeKind : global::System.Int32
    {
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMTypeKind"]/Item[@name="LLVMVoidTypeKind"]/*' />
        LLVMVoidTypeKind = 0,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMTypeKind"]/Item[@name="LLVMHalfTypeKind"]/*' />
        LLVMHalfTypeKind = 1,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMTypeKind"]/Item[@name="LLVMFloatTypeKind"]/*' />
        LLVMFloatTypeKind = 2,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMTypeKind"]/Item[@name="LLVMDoubleTypeKind"]/*' />
        LLVMDoubleTypeKind = 3,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMTypeKind"]/Item[@name="LLVMX86_FP80TypeKind"]/*' />
        LLVMX86_FP80TypeKind = 4,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMTypeKind"]/Item[@name="LLVMFP128TypeKind"]/*' />
        LLVMFP128TypeKind = 5,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMTypeKind"]/Item[@name="LLVMPPC_FP128TypeKind"]/*' />
        LLVMPPC_FP128TypeKind = 6,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMTypeKind"]/Item[@name="LLVMLabelTypeKind"]/*' />
        LLVMLabelTypeKind = 7,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMTypeKind"]/Item[@name="LLVMIntegerTypeKind"]/*' />
        LLVMIntegerTypeKind = 8,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMTypeKind"]/Item[@name="LLVMFunctionTypeKind"]/*' />
        LLVMFunctionTypeKind = 9,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMTypeKind"]/Item[@name="LLVMStructTypeKind"]/*' />
        LLVMStructTypeKind = 10,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMTypeKind"]/Item[@name="LLVMArrayTypeKind"]/*' />
        LLVMArrayTypeKind = 11,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMTypeKind"]/Item[@name="LLVMPointerTypeKind"]/*' />
        LLVMPointerTypeKind = 12,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMTypeKind"]/Item[@name="LLVMVectorTypeKind"]/*' />
        LLVMVectorTypeKind = 13,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMTypeKind"]/Item[@name="LLVMMetadataTypeKind"]/*' />
        LLVMMetadataTypeKind = 14,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMTypeKind"]/Item[@name="LLVMX86_MMXTypeKind"]/*' />
        LLVMX86_MMXTypeKind = 15,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMTypeKind"]/Item[@name="LLVMTokenTypeKind"]/*' />
        LLVMTokenTypeKind = 16,
    }

    /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMLinkage"]/*[not(self::Item)]' />
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public enum LLVMLinkage : global::System.Int32
    {
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMLinkage"]/Item[@name="LLVMExternalLinkage"]/*' />
        LLVMExternalLinkage = 0,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMLinkage"]/Item[@name="LLVMAvailableExternallyLinkage"]/*' />
        LLVMAvailableExternallyLinkage = 1,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMLinkage"]/Item[@name="LLVMLinkOnceAnyLinkage"]/*' />
        LLVMLinkOnceAnyLinkage = 2,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMLinkage"]/Item[@name="LLVMLinkOnceODRLinkage"]/*' />
        LLVMLinkOnceODRLinkage = 3,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMLinkage"]/Item[@name="LLVMLinkOnceODRAutoHideLinkage"]/*' />
        LLVMLinkOnceODRAutoHideLinkage = 4,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMLinkage"]/Item[@name="LLVMWeakAnyLinkage"]/*' />
        LLVMWeakAnyLinkage = 5,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMLinkage"]/Item[@name="LLVMWeakODRLinkage"]/*' />
        LLVMWeakODRLinkage = 6,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMLinkage"]/Item[@name="LLVMAppendingLinkage"]/*' />
        LLVMAppendingLinkage = 7,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMLinkage"]/Item[@name="LLVMInternalLinkage"]/*' />
        LLVMInternalLinkage = 8,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMLinkage"]/Item[@name="LLVMPrivateLinkage"]/*' />
        LLVMPrivateLinkage = 9,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMLinkage"]/Item[@name="LLVMDLLImportLinkage"]/*' />
        LLVMDLLImportLinkage = 10,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMLinkage"]/Item[@name="LLVMDLLExportLinkage"]/*' />
        LLVMDLLExportLinkage = 11,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMLinkage"]/Item[@name="LLVMExternalWeakLinkage"]/*' />
        LLVMExternalWeakLinkage = 12,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMLinkage"]/Item[@name="LLVMGhostLinkage"]/*' />
        LLVMGhostLinkage = 13,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMLinkage"]/Item[@name="LLVMCommonLinkage"]/*' />
        LLVMCommonLinkage = 14,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMLinkage"]/Item[@name="LLVMLinkerPrivateLinkage"]/*' />
        LLVMLinkerPrivateLinkage = 15,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMLinkage"]/Item[@name="LLVMLinkerPrivateWeakLinkage"]/*' />
        LLVMLinkerPrivateWeakLinkage = 16,
    }

    /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMVisibility"]/*[not(self::Item)]' />
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public enum LLVMVisibility : global::System.Int32
    {
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMVisibility"]/Item[@name="LLVMDefaultVisibility"]/*' />
        LLVMDefaultVisibility = 0,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMVisibility"]/Item[@name="LLVMHiddenVisibility"]/*' />
        LLVMHiddenVisibility = 1,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMVisibility"]/Item[@name="LLVMProtectedVisibility"]/*' />
        LLVMProtectedVisibility = 2,
    }

    /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMUnnamedAddr"]/*[not(self::Item)]' />
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public enum LLVMUnnamedAddr : global::System.Int32
    {
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMUnnamedAddr"]/Item[@name="LLVMNoUnnamedAddr"]/*' />
        LLVMNoUnnamedAddr = 0,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMUnnamedAddr"]/Item[@name="LLVMLocalUnnamedAddr"]/*' />
        LLVMLocalUnnamedAddr = 1,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMUnnamedAddr"]/Item[@name="LLVMGlobalUnnamedAddr"]/*' />
        LLVMGlobalUnnamedAddr = 2,
    }

    /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMDLLStorageClass"]/*[not(self::Item)]' />
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public enum LLVMDLLStorageClass : global::System.Int32
    {
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMDLLStorageClass"]/Item[@name="LLVMDefaultStorageClass"]/*' />
        LLVMDefaultStorageClass = 0,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMDLLStorageClass"]/Item[@name="LLVMDLLImportStorageClass"]/*' />
        LLVMDLLImportStorageClass = 1,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMDLLStorageClass"]/Item[@name="LLVMDLLExportStorageClass"]/*' />
        LLVMDLLExportStorageClass = 2,
    }

    /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/*[not(self::Item)]' />
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public enum LLVMCallConv : global::System.Int32
    {
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMCCallConv"]/*' />
        LLVMCCallConv = 0,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMFastCallConv"]/*' />
        LLVMFastCallConv = 8,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMColdCallConv"]/*' />
        LLVMColdCallConv = 9,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMGHCCallConv"]/*' />
        LLVMGHCCallConv = 10,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMHiPECallConv"]/*' />
        LLVMHiPECallConv = 11,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMWebKitJSCallConv"]/*' />
        LLVMWebKitJSCallConv = 12,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMAnyRegCallConv"]/*' />
        LLVMAnyRegCallConv = 13,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMPreserveMostCallConv"]/*' />
        LLVMPreserveMostCallConv = 14,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMPreserveAllCallConv"]/*' />
        LLVMPreserveAllCallConv = 15,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMSwiftCallConv"]/*' />
        LLVMSwiftCallConv = 16,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMCXXFASTTLSCallConv"]/*' />
        LLVMCXXFASTTLSCallConv = 17,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMX86StdcallCallConv"]/*' />
        LLVMX86StdcallCallConv = 64,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMX86FastcallCallConv"]/*' />
        LLVMX86FastcallCallConv = 65,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMARMAPCSCallConv"]/*' />
        LLVMARMAPCSCallConv = 66,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMARMAAPCSCallConv"]/*' />
        LLVMARMAAPCSCallConv = 67,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMARMAAPCSVFPCallConv"]/*' />
        LLVMARMAAPCSVFPCallConv = 68,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMMSP430INTRCallConv"]/*' />
        LLVMMSP430INTRCallConv = 69,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMX86ThisCallCallConv"]/*' />
        LLVMX86ThisCallCallConv = 70,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMPTXKernelCallConv"]/*' />
        LLVMPTXKernelCallConv = 71,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMPTXDeviceCallConv"]/*' />
        LLVMPTXDeviceCallConv = 72,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMSPIRFUNCCallConv"]/*' />
        LLVMSPIRFUNCCallConv = 75,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMSPIRKERNELCallConv"]/*' />
        LLVMSPIRKERNELCallConv = 76,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMIntelOCLBICallConv"]/*' />
        LLVMIntelOCLBICallConv = 77,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMX8664SysVCallConv"]/*' />
        LLVMX8664SysVCallConv = 78,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMWin64CallConv"]/*' />
        LLVMWin64CallConv = 79,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMX86VectorCallCallConv"]/*' />
        LLVMX86VectorCallCallConv = 80,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMHHVMCallConv"]/*' />
        LLVMHHVMCallConv = 81,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMHHVMCCallConv"]/*' />
        LLVMHHVMCCallConv = 82,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMX86INTRCallConv"]/*' />
        LLVMX86INTRCallConv = 83,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMAVRINTRCallConv"]/*' />
        LLVMAVRINTRCallConv = 84,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMAVRSIGNALCallConv"]/*' />
        LLVMAVRSIGNALCallConv = 85,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMAVRBUILTINCallConv"]/*' />
        LLVMAVRBUILTINCallConv = 86,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMAMDGPUVSCallConv"]/*' />
        LLVMAMDGPUVSCallConv = 87,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMAMDGPUGSCallConv"]/*' />
        LLVMAMDGPUGSCallConv = 88,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMAMDGPUPSCallConv"]/*' />
        LLVMAMDGPUPSCallConv = 89,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMAMDGPUCSCallConv"]/*' />
        LLVMAMDGPUCSCallConv = 90,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMAMDGPUKERNELCallConv"]/*' />
        LLVMAMDGPUKERNELCallConv = 91,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMX86RegCallCallConv"]/*' />
        LLVMX86RegCallCallConv = 92,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMAMDGPUHSCallConv"]/*' />
        LLVMAMDGPUHSCallConv = 93,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMMSP430BUILTINCallConv"]/*' />
        LLVMMSP430BUILTINCallConv = 94,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMAMDGPULSCallConv"]/*' />
        LLVMAMDGPULSCallConv = 95,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMCallConv"]/Item[@name="LLVMAMDGPUESCallConv"]/*' />
        LLVMAMDGPUESCallConv = 96,
    }

    /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/*[not(self::Item)]' />
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public enum LLVMValueKind : global::System.Int32
    {
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMArgumentValueKind"]/*' />
        LLVMArgumentValueKind = 0,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMBasicBlockValueKind"]/*' />
        LLVMBasicBlockValueKind = 1,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMMemoryUseValueKind"]/*' />
        LLVMMemoryUseValueKind = 2,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMMemoryDefValueKind"]/*' />
        LLVMMemoryDefValueKind = 3,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMMemoryPhiValueKind"]/*' />
        LLVMMemoryPhiValueKind = 4,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMFunctionValueKind"]/*' />
        LLVMFunctionValueKind = 5,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMGlobalAliasValueKind"]/*' />
        LLVMGlobalAliasValueKind = 6,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMGlobalIFuncValueKind"]/*' />
        LLVMGlobalIFuncValueKind = 7,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMGlobalVariableValueKind"]/*' />
        LLVMGlobalVariableValueKind = 8,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMBlockAddressValueKind"]/*' />
        LLVMBlockAddressValueKind = 9,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMConstantExprValueKind"]/*' />
        LLVMConstantExprValueKind = 10,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMConstantArrayValueKind"]/*' />
        LLVMConstantArrayValueKind = 11,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMConstantStructValueKind"]/*' />
        LLVMConstantStructValueKind = 12,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMConstantVectorValueKind"]/*' />
        LLVMConstantVectorValueKind = 13,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMUndefValueValueKind"]/*' />
        LLVMUndefValueValueKind = 14,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMConstantAggregateZeroValueKind"]/*' />
        LLVMConstantAggregateZeroValueKind = 15,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMConstantDataArrayValueKind"]/*' />
        LLVMConstantDataArrayValueKind = 16,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMConstantDataVectorValueKind"]/*' />
        LLVMConstantDataVectorValueKind = 17,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMConstantIntValueKind"]/*' />
        LLVMConstantIntValueKind = 18,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMConstantFPValueKind"]/*' />
        LLVMConstantFPValueKind = 19,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMConstantPointerNullValueKind"]/*' />
        LLVMConstantPointerNullValueKind = 20,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMConstantTokenNoneValueKind"]/*' />
        LLVMConstantTokenNoneValueKind = 21,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMMetadataAsValueValueKind"]/*' />
        LLVMMetadataAsValueValueKind = 22,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMInlineAsmValueKind"]/*' />
        LLVMInlineAsmValueKind = 23,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMValueKind"]/Item[@name="LLVMInstructionValueKind"]/*' />
        LLVMInstructionValueKind = 24,
    }

    /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMIntPredicate"]/*[not(self::Item)]' />
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public enum LLVMIntPredicate : global::System.Int32
    {
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMIntPredicate"]/Item[@name="LLVMIntEQ"]/*' />
        LLVMIntEQ = 32,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMIntPredicate"]/Item[@name="LLVMIntNE"]/*' />
        LLVMIntNE = 33,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMIntPredicate"]/Item[@name="LLVMIntUGT"]/*' />
        LLVMIntUGT = 34,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMIntPredicate"]/Item[@name="LLVMIntUGE"]/*' />
        LLVMIntUGE = 35,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMIntPredicate"]/Item[@name="LLVMIntULT"]/*' />
        LLVMIntULT = 36,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMIntPredicate"]/Item[@name="LLVMIntULE"]/*' />
        LLVMIntULE = 37,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMIntPredicate"]/Item[@name="LLVMIntSGT"]/*' />
        LLVMIntSGT = 38,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMIntPredicate"]/Item[@name="LLVMIntSGE"]/*' />
        LLVMIntSGE = 39,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMIntPredicate"]/Item[@name="LLVMIntSLT"]/*' />
        LLVMIntSLT = 40,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMIntPredicate"]/Item[@name="LLVMIntSLE"]/*' />
        LLVMIntSLE = 41,
    }

    /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMRealPredicate"]/*[not(self::Item)]' />
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public enum LLVMRealPredicate : global::System.Int32
    {
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMRealPredicate"]/Item[@name="LLVMRealPredicateFalse"]/*' />
        LLVMRealPredicateFalse = 0,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMRealPredicate"]/Item[@name="LLVMRealOEQ"]/*' />
        LLVMRealOEQ = 1,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMRealPredicate"]/Item[@name="LLVMRealOGT"]/*' />
        LLVMRealOGT = 2,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMRealPredicate"]/Item[@name="LLVMRealOGE"]/*' />
        LLVMRealOGE = 3,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMRealPredicate"]/Item[@name="LLVMRealOLT"]/*' />
        LLVMRealOLT = 4,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMRealPredicate"]/Item[@name="LLVMRealOLE"]/*' />
        LLVMRealOLE = 5,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMRealPredicate"]/Item[@name="LLVMRealONE"]/*' />
        LLVMRealONE = 6,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMRealPredicate"]/Item[@name="LLVMRealORD"]/*' />
        LLVMRealORD = 7,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMRealPredicate"]/Item[@name="LLVMRealUNO"]/*' />
        LLVMRealUNO = 8,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMRealPredicate"]/Item[@name="LLVMRealUEQ"]/*' />
        LLVMRealUEQ = 9,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMRealPredicate"]/Item[@name="LLVMRealUGT"]/*' />
        LLVMRealUGT = 10,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMRealPredicate"]/Item[@name="LLVMRealUGE"]/*' />
        LLVMRealUGE = 11,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMRealPredicate"]/Item[@name="LLVMRealULT"]/*' />
        LLVMRealULT = 12,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMRealPredicate"]/Item[@name="LLVMRealULE"]/*' />
        LLVMRealULE = 13,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMRealPredicate"]/Item[@name="LLVMRealUNE"]/*' />
        LLVMRealUNE = 14,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMRealPredicate"]/Item[@name="LLVMRealPredicateTrue"]/*' />
        LLVMRealPredicateTrue = 15,
    }

    /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMLandingPadClauseTy"]/*[not(self::Item)]' />
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public enum LLVMLandingPadClauseTy : global::System.Int32
    {
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMLandingPadClauseTy"]/Item[@name="LLVMLandingPadCatch"]/*' />
        LLVMLandingPadCatch = 0,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMLandingPadClauseTy"]/Item[@name="LLVMLandingPadFilter"]/*' />
        LLVMLandingPadFilter = 1,
    }

    /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMThreadLocalMode"]/*[not(self::Item)]' />
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public enum LLVMThreadLocalMode : global::System.Int32
    {
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMThreadLocalMode"]/Item[@name="LLVMNotThreadLocal"]/*' />
        LLVMNotThreadLocal = 0,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMThreadLocalMode"]/Item[@name="LLVMGeneralDynamicTLSModel"]/*' />
        LLVMGeneralDynamicTLSModel = 1,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMThreadLocalMode"]/Item[@name="LLVMLocalDynamicTLSModel"]/*' />
        LLVMLocalDynamicTLSModel = 2,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMThreadLocalMode"]/Item[@name="LLVMInitialExecTLSModel"]/*' />
        LLVMInitialExecTLSModel = 3,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMThreadLocalMode"]/Item[@name="LLVMLocalExecTLSModel"]/*' />
        LLVMLocalExecTLSModel = 4,
    }

    /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMAtomicOrdering"]/*[not(self::Item)]' />
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public enum LLVMAtomicOrdering : global::System.Int32
    {
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMAtomicOrdering"]/Item[@name="LLVMAtomicOrderingNotAtomic"]/*' />
        LLVMAtomicOrderingNotAtomic = 0,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMAtomicOrdering"]/Item[@name="LLVMAtomicOrderingUnordered"]/*' />
        LLVMAtomicOrderingUnordered = 1,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMAtomicOrdering"]/Item[@name="LLVMAtomicOrderingMonotonic"]/*' />
        LLVMAtomicOrderingMonotonic = 2,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMAtomicOrdering"]/Item[@name="LLVMAtomicOrderingAcquire"]/*' />
        LLVMAtomicOrderingAcquire = 4,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMAtomicOrdering"]/Item[@name="LLVMAtomicOrderingRelease"]/*' />
        LLVMAtomicOrderingRelease = 5,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMAtomicOrdering"]/Item[@name="LLVMAtomicOrderingAcquireRelease"]/*' />
        LLVMAtomicOrderingAcquireRelease = 6,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMAtomicOrdering"]/Item[@name="LLVMAtomicOrderingSequentiallyConsistent"]/*' />
        LLVMAtomicOrderingSequentiallyConsistent = 7,
    }

    /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMAtomicRMWBinOp"]/*[not(self::Item)]' />
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public enum LLVMAtomicRMWBinOp : global::System.Int32
    {
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMAtomicRMWBinOp"]/Item[@name="LLVMAtomicRMWBinOpXchg"]/*' />
        LLVMAtomicRMWBinOpXchg = 0,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMAtomicRMWBinOp"]/Item[@name="LLVMAtomicRMWBinOpAdd"]/*' />
        LLVMAtomicRMWBinOpAdd = 1,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMAtomicRMWBinOp"]/Item[@name="LLVMAtomicRMWBinOpSub"]/*' />
        LLVMAtomicRMWBinOpSub = 2,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMAtomicRMWBinOp"]/Item[@name="LLVMAtomicRMWBinOpAnd"]/*' />
        LLVMAtomicRMWBinOpAnd = 3,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMAtomicRMWBinOp"]/Item[@name="LLVMAtomicRMWBinOpNand"]/*' />
        LLVMAtomicRMWBinOpNand = 4,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMAtomicRMWBinOp"]/Item[@name="LLVMAtomicRMWBinOpOr"]/*' />
        LLVMAtomicRMWBinOpOr = 5,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMAtomicRMWBinOp"]/Item[@name="LLVMAtomicRMWBinOpXor"]/*' />
        LLVMAtomicRMWBinOpXor = 6,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMAtomicRMWBinOp"]/Item[@name="LLVMAtomicRMWBinOpMax"]/*' />
        LLVMAtomicRMWBinOpMax = 7,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMAtomicRMWBinOp"]/Item[@name="LLVMAtomicRMWBinOpMin"]/*' />
        LLVMAtomicRMWBinOpMin = 8,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMAtomicRMWBinOp"]/Item[@name="LLVMAtomicRMWBinOpUMax"]/*' />
        LLVMAtomicRMWBinOpUMax = 9,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMAtomicRMWBinOp"]/Item[@name="LLVMAtomicRMWBinOpUMin"]/*' />
        LLVMAtomicRMWBinOpUMin = 10,
    }

    /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMDiagnosticSeverity"]/*[not(self::Item)]' />
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public enum LLVMDiagnosticSeverity : global::System.Int32
    {
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMDiagnosticSeverity"]/Item[@name="LLVMDSError"]/*' />
        LLVMDSError = 0,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMDiagnosticSeverity"]/Item[@name="LLVMDSWarning"]/*' />
        LLVMDSWarning = 1,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMDiagnosticSeverity"]/Item[@name="LLVMDSRemark"]/*' />
        LLVMDSRemark = 2,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMDiagnosticSeverity"]/Item[@name="LLVMDSNote"]/*' />
        LLVMDSNote = 3,
    }

    /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMInlineAsmDialect"]/*[not(self::Item)]' />
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public enum LLVMInlineAsmDialect : global::System.Int32
    {
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMInlineAsmDialect"]/Item[@name="LLVMInlineAsmDialectATT"]/*' />
        LLVMInlineAsmDialectATT = 0,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMInlineAsmDialect"]/Item[@name="LLVMInlineAsmDialectIntel"]/*' />
        LLVMInlineAsmDialectIntel = 1,
    }

    /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMModuleFlagBehavior"]/*[not(self::Item)]' />
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public enum LLVMModuleFlagBehavior : global::System.Int32
    {
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMModuleFlagBehavior"]/Item[@name="LLVMModuleFlagBehaviorError"]/*' />
        LLVMModuleFlagBehaviorError = 0,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMModuleFlagBehavior"]/Item[@name="LLVMModuleFlagBehaviorWarning"]/*' />
        LLVMModuleFlagBehaviorWarning = 1,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMModuleFlagBehavior"]/Item[@name="LLVMModuleFlagBehaviorRequire"]/*' />
        LLVMModuleFlagBehaviorRequire = 2,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMModuleFlagBehavior"]/Item[@name="LLVMModuleFlagBehaviorOverride"]/*' />
        LLVMModuleFlagBehaviorOverride = 3,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMModuleFlagBehavior"]/Item[@name="LLVMModuleFlagBehaviorAppend"]/*' />
        LLVMModuleFlagBehaviorAppend = 4,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMModuleFlagBehavior"]/Item[@name="LLVMModuleFlagBehaviorAppendUnique"]/*' />
        LLVMModuleFlagBehaviorAppendUnique = 5,
    }

    /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMAttributeIndex"]/*[not(self::Item)]' />
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public enum LLVMAttributeIndex : global::System.Int32
    {
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMAttributeIndex"]/Item[@name="LLVMAttributeReturnIndex"]/*' />
        LLVMAttributeReturnIndex = 0,
        /// <include file="Core.xml" path='LibLLVMAPI/Enumeration[@name="LLVMAttributeIndex"]/Item[@name="LLVMAttributeFunctionIndex"]/*' />
        LLVMAttributeFunctionIndex = -1,
    }

    /// <include file="Core.xml" path='LibLLVMAPI/Delegate[@name="LLVMDiagnosticHandler"]/*' />
    [UnmanagedFunctionPointer( global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
    public delegate void LLVMDiagnosticHandler( LLVMDiagnosticInfoRef _0, global::System.IntPtr _1 );

    /// <include file="Core.xml" path='LibLLVMAPI/Delegate[@name="LLVMYieldCallback"]/*' />
    [UnmanagedFunctionPointer( global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
    public delegate void LLVMYieldCallback( LLVMContextRef _0, global::System.IntPtr _1 );

    public static partial class NativeMethods
    {
        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMInitializeCore"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMInitializeCore( LLVMPassRegistryRef R );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMShutdown"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMShutdown(  );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMContextCreate"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMContextRef LLVMContextCreate(  );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetGlobalContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMContextRefAlias LLVMGetGlobalContext(  );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMContextSetDiagnosticHandler"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMContextSetDiagnosticHandler( LLVMContextRef C, LLVMDiagnosticHandler Handler, global::System.IntPtr DiagnosticContext );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMContextGetDiagnosticHandler"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMDiagnosticHandler LLVMContextGetDiagnosticHandler( LLVMContextRef C );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMContextGetDiagnosticContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern global::System.IntPtr LLVMContextGetDiagnosticContext( LLVMContextRef C );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMContextSetYieldCallback"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMContextSetYieldCallback( LLVMContextRef C, LLVMYieldCallback Callback, global::System.IntPtr OpaqueHandle );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMContextShouldDiscardValueNames"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMContextShouldDiscardValueNames( LLVMContextRef C );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMContextSetDiscardValueNames"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMContextSetDiscardValueNames( LLVMContextRef C, [MarshalAs( UnmanagedType.Bool )]bool Discard );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetDiagInfoDescription"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( DisposeMessageMarshaler ) )]
        public static extern string LLVMGetDiagInfoDescription( LLVMDiagnosticInfoRef DI );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetDiagInfoSeverity"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMDiagnosticSeverity LLVMGetDiagInfoSeverity( LLVMDiagnosticInfoRef DI );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetMDKindIDInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetMDKindIDInContext( LLVMContextRef C, [MarshalAs( UnmanagedType.LPStr )]string Name, uint SLen );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetMDKindID"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetMDKindID( [MarshalAs( UnmanagedType.LPStr )]string Name, uint SLen );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetEnumAttributeKindForName"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetEnumAttributeKindForName( [MarshalAs( UnmanagedType.LPStr )]string Name, size_t SLen );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetLastEnumAttributeKind"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetLastEnumAttributeKind(  );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMCreateEnumAttribute"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMAttributeRef LLVMCreateEnumAttribute( LLVMContextRef C, uint KindID, System.UInt64 Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetEnumAttributeKind"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetEnumAttributeKind( LLVMAttributeRef A );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetEnumAttributeValue"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern System.UInt64 LLVMGetEnumAttributeValue( LLVMAttributeRef A );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMCreateStringAttribute"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMAttributeRef LLVMCreateStringAttribute( LLVMContextRef C, [MarshalAs( UnmanagedType.LPStr )]string K, uint KLength, [MarshalAs( UnmanagedType.LPStr )]string V, uint VLength );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetStringAttributeKind"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LLVMGetStringAttributeKind( LLVMAttributeRef A, out uint Length );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetStringAttributeValue"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LLVMGetStringAttributeValue( LLVMAttributeRef A, out uint Length );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsEnumAttribute"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMIsEnumAttribute( LLVMAttributeRef A );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsStringAttribute"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMIsStringAttribute( LLVMAttributeRef A );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMModuleCreateWithName"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMModuleRef LLVMModuleCreateWithName( [MarshalAs( UnmanagedType.LPStr )]string ModuleID );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMModuleCreateWithNameInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMModuleRef LLVMModuleCreateWithNameInContext( [MarshalAs( UnmanagedType.LPStr )]string ModuleID, LLVMContextRef C );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMCloneModule"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMModuleRef LLVMCloneModule( LLVMModuleRef M );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMDisposeModule"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMDisposeModule( LLVMModuleRef M );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetModuleIdentifier"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LLVMGetModuleIdentifier( LLVMModuleRef M, out size_t Len );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetModuleIdentifier"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetModuleIdentifier( LLVMModuleRef M, [MarshalAs( UnmanagedType.LPStr )]string Ident, size_t Len );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetSourceFileName"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LLVMGetSourceFileName( LLVMModuleRef M, out size_t Len );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetSourceFileName"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetSourceFileName( LLVMModuleRef M, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t Len );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetDataLayoutStr"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LLVMGetDataLayoutStr( LLVMModuleRef M );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetDataLayout"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetDataLayout( LLVMModuleRef M, [MarshalAs( UnmanagedType.LPStr )]string DataLayoutStr );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetTarget"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LLVMGetTarget( LLVMModuleRef M );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetTarget"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetTarget( LLVMModuleRef M, [MarshalAs( UnmanagedType.LPStr )]string Triple );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMCopyModuleFlagsMetadata"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMModuleFlagEntry LLVMCopyModuleFlagsMetadata( LLVMModuleRef M, out size_t Len );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMModuleFlagEntriesGetFlagBehavior"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMModuleFlagBehavior LLVMModuleFlagEntriesGetFlagBehavior( LLVMModuleFlagEntry Entries, uint Index );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMModuleFlagEntriesGetKey"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LLVMModuleFlagEntriesGetKey( LLVMModuleFlagEntry Entries, uint Index, out size_t Len );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMModuleFlagEntriesGetMetadata"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMModuleFlagEntriesGetMetadata( LLVMModuleFlagEntry Entries, uint Index );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetModuleFlag"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMGetModuleFlag( LLVMModuleRef M, [MarshalAs( UnmanagedType.LPStr )]string Key, size_t KeyLen );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMAddModuleFlag"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMAddModuleFlag( LLVMModuleRef M, LLVMModuleFlagBehavior Behavior, [MarshalAs( UnmanagedType.LPStr )]string Key, size_t KeyLen, LLVMMetadataRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMDumpModule"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMDumpModule( LLVMModuleRef M );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMPrintModuleToFile"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMStatus LLVMPrintModuleToFile( LLVMModuleRef M, [MarshalAs( UnmanagedType.LPStr )]string Filename, [MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( DisposeMessageMarshaler ) )]out string ErrorMessage );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMPrintModuleToString"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( DisposeMessageMarshaler ) )]
        public static extern string LLVMPrintModuleToString( LLVMModuleRef M );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetModuleInlineAsm"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LLVMGetModuleInlineAsm( LLVMModuleRef M, out size_t Len );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetModuleInlineAsm2"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetModuleInlineAsm2( LLVMModuleRef M, [MarshalAs( UnmanagedType.LPStr )]string Asm, size_t Len );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMAppendModuleInlineAsm"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMAppendModuleInlineAsm( LLVMModuleRef M, [MarshalAs( UnmanagedType.LPStr )]string Asm, size_t Len );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetInlineAsm"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetInlineAsm( LLVMTypeRef Ty, [MarshalAs( UnmanagedType.LPStr )]string AsmString, size_t AsmStringSize, [MarshalAs( UnmanagedType.LPStr )]string Constraints, size_t ConstraintsSize, [MarshalAs( UnmanagedType.Bool )]bool HasSideEffects, [MarshalAs( UnmanagedType.Bool )]bool IsAlignStack, LLVMInlineAsmDialect Dialect );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetModuleContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMContextRefAlias LLVMGetModuleContext( LLVMModuleRef M );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetTypeByName"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMGetTypeByName( LLVMModuleRef M, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetFirstNamedMetadata"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMNamedMDNodeRef LLVMGetFirstNamedMetadata( LLVMModuleRef M );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetLastNamedMetadata"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMNamedMDNodeRef LLVMGetLastNamedMetadata( LLVMModuleRef M );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetNextNamedMetadata"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMNamedMDNodeRef LLVMGetNextNamedMetadata( LLVMNamedMDNodeRef NamedMDNode );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetPreviousNamedMetadata"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMNamedMDNodeRef LLVMGetPreviousNamedMetadata( LLVMNamedMDNodeRef NamedMDNode );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetNamedMetadata"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMNamedMDNodeRef LLVMGetNamedMetadata( LLVMModuleRef M, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetOrInsertNamedMetadata"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMNamedMDNodeRef LLVMGetOrInsertNamedMetadata( LLVMModuleRef M, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetNamedMetadataName"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LLVMGetNamedMetadataName( LLVMNamedMDNodeRef NamedMD, out size_t NameLen );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetNamedMetadataNumOperands"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetNamedMetadataNumOperands( LLVMModuleRef M, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetNamedMetadataOperands"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMGetNamedMetadataOperands( LLVMModuleRef M, [MarshalAs( UnmanagedType.LPStr )]string Name, out LLVMValueRef Dest );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMAddNamedMetadataOperand"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMAddNamedMetadataOperand( LLVMModuleRef M, [MarshalAs( UnmanagedType.LPStr )]string Name, LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetDebugLocDirectory"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LLVMGetDebugLocDirectory( LLVMValueRef Val, out uint Length );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetDebugLocFilename"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LLVMGetDebugLocFilename( LLVMValueRef Val, out uint Length );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetDebugLocLine"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetDebugLocLine( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetDebugLocColumn"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetDebugLocColumn( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMAddFunction"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMAddFunction( LLVMModuleRef M, [MarshalAs( UnmanagedType.LPStr )]string Name, LLVMTypeRef FunctionTy );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetNamedFunction"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetNamedFunction( LLVMModuleRef M, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetFirstFunction"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetFirstFunction( LLVMModuleRef M );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetLastFunction"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetLastFunction( LLVMModuleRef M );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetNextFunction"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetNextFunction( LLVMValueRef Fn );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetPreviousFunction"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetPreviousFunction( LLVMValueRef Fn );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetTypeKind"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeKind LLVMGetTypeKind( LLVMTypeRef Ty );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMTypeIsSized"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMTypeIsSized( LLVMTypeRef Ty );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetTypeContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMContextRefAlias LLVMGetTypeContext( LLVMTypeRef Ty );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMDumpType"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMDumpType( LLVMTypeRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMPrintTypeToString"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( DisposeMessageMarshaler ) )]
        public static extern string LLVMPrintTypeToString( LLVMTypeRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMInt1TypeInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMInt1TypeInContext( LLVMContextRef C );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMInt8TypeInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMInt8TypeInContext( LLVMContextRef C );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMInt16TypeInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMInt16TypeInContext( LLVMContextRef C );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMInt32TypeInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMInt32TypeInContext( LLVMContextRef C );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMInt64TypeInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMInt64TypeInContext( LLVMContextRef C );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMInt128TypeInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMInt128TypeInContext( LLVMContextRef C );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIntTypeInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMIntTypeInContext( LLVMContextRef C, uint NumBits );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMInt1Type"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMInt1Type(  );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMInt8Type"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMInt8Type(  );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMInt16Type"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMInt16Type(  );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMInt32Type"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMInt32Type(  );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMInt64Type"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMInt64Type(  );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMInt128Type"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMInt128Type(  );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIntType"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMIntType( uint NumBits );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetIntTypeWidth"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetIntTypeWidth( LLVMTypeRef IntegerTy );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMHalfTypeInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMHalfTypeInContext( LLVMContextRef C );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMFloatTypeInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMFloatTypeInContext( LLVMContextRef C );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMDoubleTypeInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMDoubleTypeInContext( LLVMContextRef C );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMX86FP80TypeInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMX86FP80TypeInContext( LLVMContextRef C );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMFP128TypeInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMFP128TypeInContext( LLVMContextRef C );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMPPCFP128TypeInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMPPCFP128TypeInContext( LLVMContextRef C );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMHalfType"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMHalfType(  );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMFloatType"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMFloatType(  );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMDoubleType"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMDoubleType(  );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMX86FP80Type"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMX86FP80Type(  );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMFP128Type"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMFP128Type(  );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMPPCFP128Type"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMPPCFP128Type(  );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMFunctionType"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMFunctionType( LLVMTypeRef ReturnType, out LLVMTypeRef ParamTypes, uint ParamCount, [MarshalAs( UnmanagedType.Bool )]bool IsVarArg );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsFunctionVarArg"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMIsFunctionVarArg( LLVMTypeRef FunctionTy );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetReturnType"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMGetReturnType( LLVMTypeRef FunctionTy );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMCountParamTypes"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMCountParamTypes( LLVMTypeRef FunctionTy );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetParamTypes"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMGetParamTypes( LLVMTypeRef FunctionTy, out LLVMTypeRef Dest );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMStructTypeInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMStructTypeInContext( LLVMContextRef C, out LLVMTypeRef ElementTypes, uint ElementCount, [MarshalAs( UnmanagedType.Bool )]bool Packed );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMStructType"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMStructType( out LLVMTypeRef ElementTypes, uint ElementCount, [MarshalAs( UnmanagedType.Bool )]bool Packed );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMStructCreateNamed"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMStructCreateNamed( LLVMContextRef C, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetStructName"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LLVMGetStructName( LLVMTypeRef Ty );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMStructSetBody"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMStructSetBody( LLVMTypeRef StructTy, out LLVMTypeRef ElementTypes, uint ElementCount, [MarshalAs( UnmanagedType.Bool )]bool Packed );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMCountStructElementTypes"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMCountStructElementTypes( LLVMTypeRef StructTy );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetStructElementTypes"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMGetStructElementTypes( LLVMTypeRef StructTy, out LLVMTypeRef Dest );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMStructGetTypeAtIndex"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMStructGetTypeAtIndex( LLVMTypeRef StructTy, uint i );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsPackedStruct"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMIsPackedStruct( LLVMTypeRef StructTy );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsOpaqueStruct"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMIsOpaqueStruct( LLVMTypeRef StructTy );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsLiteralStruct"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMIsLiteralStruct( LLVMTypeRef StructTy );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetElementType"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMGetElementType( LLVMTypeRef Ty );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetSubtypes"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMGetSubtypes( LLVMTypeRef Tp, out LLVMTypeRef Arr );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetNumContainedTypes"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetNumContainedTypes( LLVMTypeRef Tp );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMArrayType"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMArrayType( LLVMTypeRef ElementType, uint ElementCount );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetArrayLength"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetArrayLength( LLVMTypeRef ArrayTy );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMPointerType"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMPointerType( LLVMTypeRef ElementType, uint AddressSpace );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetPointerAddressSpace"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetPointerAddressSpace( LLVMTypeRef PointerTy );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMVectorType"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMVectorType( LLVMTypeRef ElementType, uint ElementCount );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetVectorSize"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetVectorSize( LLVMTypeRef VectorTy );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMVoidTypeInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMVoidTypeInContext( LLVMContextRef C );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMLabelTypeInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMLabelTypeInContext( LLVMContextRef C );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMX86MMXTypeInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMX86MMXTypeInContext( LLVMContextRef C );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMTokenTypeInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMTokenTypeInContext( LLVMContextRef C );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMMetadataTypeInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMMetadataTypeInContext( LLVMContextRef C );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMVoidType"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMVoidType(  );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMLabelType"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMLabelType(  );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMX86MMXType"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMX86MMXType(  );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMTypeOf"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMTypeOf( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetValueKind"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueKind LLVMGetValueKind( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetValueName2"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LLVMGetValueName2( LLVMValueRef Val, out size_t Length );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetValueName2"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetValueName2( LLVMValueRef Val, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMDumpValue"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMDumpValue( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMPrintValueToString"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( DisposeMessageMarshaler ) )]
        public static extern string LLVMPrintValueToString( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMReplaceAllUsesWith"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMReplaceAllUsesWith( LLVMValueRef OldVal, LLVMValueRef NewVal );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsConstant"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMIsConstant( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsUndef"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMIsUndef( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAArgument"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAArgument( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsABasicBlock"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsABasicBlock( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAInlineAsm"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAInlineAsm( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAUser"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAUser( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAConstant"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAConstant( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsABlockAddress"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsABlockAddress( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAConstantAggregateZero"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAConstantAggregateZero( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAConstantArray"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAConstantArray( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAConstantDataSequential"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAConstantDataSequential( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAConstantDataArray"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAConstantDataArray( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAConstantDataVector"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAConstantDataVector( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAConstantExpr"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAConstantExpr( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAConstantFP"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAConstantFP( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAConstantInt"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAConstantInt( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAConstantPointerNull"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAConstantPointerNull( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAConstantStruct"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAConstantStruct( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAConstantTokenNone"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAConstantTokenNone( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAConstantVector"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAConstantVector( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAGlobalValue"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAGlobalValue( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAGlobalAlias"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAGlobalAlias( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAGlobalIFunc"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAGlobalIFunc( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAGlobalObject"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAGlobalObject( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAFunction"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAFunction( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAGlobalVariable"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAGlobalVariable( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAUndefValue"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAUndefValue( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAInstruction"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAInstruction( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsABinaryOperator"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsABinaryOperator( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsACallInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsACallInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAIntrinsicInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAIntrinsicInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsADbgInfoIntrinsic"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsADbgInfoIntrinsic( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsADbgVariableIntrinsic"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsADbgVariableIntrinsic( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsADbgDeclareInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsADbgDeclareInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsADbgLabelInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsADbgLabelInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAMemIntrinsic"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAMemIntrinsic( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAMemCpyInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAMemCpyInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAMemMoveInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAMemMoveInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAMemSetInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAMemSetInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsACmpInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsACmpInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAFCmpInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAFCmpInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAICmpInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAICmpInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAExtractElementInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAExtractElementInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAGetElementPtrInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAGetElementPtrInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAInsertElementInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAInsertElementInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAInsertValueInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAInsertValueInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsALandingPadInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsALandingPadInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAPHINode"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAPHINode( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsASelectInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsASelectInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAShuffleVectorInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAShuffleVectorInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAStoreInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAStoreInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsABranchInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsABranchInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAIndirectBrInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAIndirectBrInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAInvokeInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAInvokeInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAReturnInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAReturnInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsASwitchInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsASwitchInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAUnreachableInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAUnreachableInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAResumeInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAResumeInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsACleanupReturnInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsACleanupReturnInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsACatchReturnInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsACatchReturnInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAFuncletPadInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAFuncletPadInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsACatchPadInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsACatchPadInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsACleanupPadInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsACleanupPadInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAUnaryInstruction"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAUnaryInstruction( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAAllocaInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAAllocaInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsACastInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsACastInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAAddrSpaceCastInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAAddrSpaceCastInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsABitCastInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsABitCastInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAFPExtInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAFPExtInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAFPToSIInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAFPToSIInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAFPToUIInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAFPToUIInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAFPTruncInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAFPTruncInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAIntToPtrInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAIntToPtrInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAPtrToIntInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAPtrToIntInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsASExtInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsASExtInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsASIToFPInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsASIToFPInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsATruncInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsATruncInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAUIToFPInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAUIToFPInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAZExtInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAZExtInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAExtractValueInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAExtractValueInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsALoadInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsALoadInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAVAArgInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAVAArgInst( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAMDNode"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAMDNode( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAMDString"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsAMDString( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetFirstUse"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMUseRef LLVMGetFirstUse( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetNextUse"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMUseRef LLVMGetNextUse( LLVMUseRef U );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetUser"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetUser( LLVMUseRef U );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetUsedValue"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetUsedValue( LLVMUseRef U );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetOperand"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetOperand( LLVMValueRef Val, uint Index );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetOperandUse"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMUseRef LLVMGetOperandUse( LLVMValueRef Val, uint Index );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetOperand"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetOperand( LLVMValueRef User, uint Index, LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetNumOperands"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern int LLVMGetNumOperands( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstNull"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstNull( LLVMTypeRef Ty );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstAllOnes"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstAllOnes( LLVMTypeRef Ty );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetUndef"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetUndef( LLVMTypeRef Ty );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsNull"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMIsNull( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstPointerNull"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstPointerNull( LLVMTypeRef Ty );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstInt"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstInt( LLVMTypeRef IntTy, ulong N, [MarshalAs( UnmanagedType.Bool )]bool SignExtend );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstIntOfArbitraryPrecision"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstIntOfArbitraryPrecision( LLVMTypeRef IntTy, uint NumWords, System.UInt64[] Words );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstIntOfString"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstIntOfString( LLVMTypeRef IntTy, [MarshalAs( UnmanagedType.LPStr )]string Text, System.Byte Radix );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstIntOfStringAndSize"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstIntOfStringAndSize( LLVMTypeRef IntTy, [MarshalAs( UnmanagedType.LPStr )]string Text, uint SLen, System.Byte Radix );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstReal"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstReal( LLVMTypeRef RealTy, double N );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstRealOfString"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstRealOfString( LLVMTypeRef RealTy, [MarshalAs( UnmanagedType.LPStr )]string Text );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstRealOfStringAndSize"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstRealOfStringAndSize( LLVMTypeRef RealTy, [MarshalAs( UnmanagedType.LPStr )]string Text, uint SLen );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstIntGetZExtValue"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern ulong LLVMConstIntGetZExtValue( LLVMValueRef ConstantVal );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstIntGetSExtValue"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern long LLVMConstIntGetSExtValue( LLVMValueRef ConstantVal );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstRealGetDouble"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern double LLVMConstRealGetDouble( LLVMValueRef ConstantVal, out bool losesInfo );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstStringInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstStringInContext( LLVMContextRef C, [MarshalAs( UnmanagedType.LPStr )]string Str, uint Length, [MarshalAs( UnmanagedType.Bool )]bool DontNullTerminate );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstString"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstString( [MarshalAs( UnmanagedType.LPStr )]string Str, uint Length, [MarshalAs( UnmanagedType.Bool )]bool DontNullTerminate );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsConstantString"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMIsConstantString( LLVMValueRef c );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetAsString"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LLVMGetAsString( LLVMValueRef c, out size_t Length );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstStructInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstStructInContext( LLVMContextRef C, out LLVMValueRef ConstantVals, uint Count, [MarshalAs( UnmanagedType.Bool )]bool Packed );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstStruct"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstStruct( out LLVMValueRef ConstantVals, uint Count, [MarshalAs( UnmanagedType.Bool )]bool Packed );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstArray"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstArray( LLVMTypeRef ElementTy, out LLVMValueRef ConstantVals, uint Length );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstNamedStruct"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstNamedStruct( LLVMTypeRef StructTy, out LLVMValueRef ConstantVals, uint Count );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetElementAsConstant"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetElementAsConstant( LLVMValueRef C, uint idx );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstVector"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstVector( out LLVMValueRef ScalarConstantVals, uint Size );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetConstOpcode"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMOpcode LLVMGetConstOpcode( LLVMValueRef ConstantVal );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMAlignOf"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMAlignOf( LLVMTypeRef Ty );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSizeOf"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMSizeOf( LLVMTypeRef Ty );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstNeg"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstNeg( LLVMValueRef ConstantVal );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstNSWNeg"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstNSWNeg( LLVMValueRef ConstantVal );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstNUWNeg"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstNUWNeg( LLVMValueRef ConstantVal );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstFNeg"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstFNeg( LLVMValueRef ConstantVal );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstNot"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstNot( LLVMValueRef ConstantVal );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstAdd"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstAdd( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstNSWAdd"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstNSWAdd( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstNUWAdd"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstNUWAdd( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstFAdd"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstFAdd( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstSub"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstSub( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstNSWSub"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstNSWSub( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstNUWSub"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstNUWSub( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstFSub"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstFSub( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstMul"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstMul( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstNSWMul"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstNSWMul( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstNUWMul"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstNUWMul( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstFMul"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstFMul( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstUDiv"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstUDiv( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstExactUDiv"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstExactUDiv( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstSDiv"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstSDiv( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstExactSDiv"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstExactSDiv( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstFDiv"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstFDiv( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstURem"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstURem( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstSRem"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstSRem( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstFRem"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstFRem( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstAnd"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstAnd( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstOr"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstOr( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstXor"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstXor( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstICmp"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstICmp( LLVMIntPredicate Predicate, LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstFCmp"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstFCmp( LLVMRealPredicate Predicate, LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstShl"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstShl( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstLShr"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstLShr( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstAShr"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstAShr( LLVMValueRef LHSConstant, LLVMValueRef RHSConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstGEP"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstGEP( LLVMValueRef ConstantVal, [MarshalAs( UnmanagedType.LPArray, ArraySubType = UnmanagedType.SysInt )]LLVMValueRef[] ConstantIndices, uint NumIndices );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstInBoundsGEP"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstInBoundsGEP( LLVMValueRef ConstantVal, out LLVMValueRef ConstantIndices, uint NumIndices );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstTrunc"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstTrunc( LLVMValueRef ConstantVal, LLVMTypeRef ToType );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstSExt"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstSExt( LLVMValueRef ConstantVal, LLVMTypeRef ToType );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstZExt"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstZExt( LLVMValueRef ConstantVal, LLVMTypeRef ToType );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstFPTrunc"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstFPTrunc( LLVMValueRef ConstantVal, LLVMTypeRef ToType );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstFPExt"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstFPExt( LLVMValueRef ConstantVal, LLVMTypeRef ToType );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstUIToFP"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstUIToFP( LLVMValueRef ConstantVal, LLVMTypeRef ToType );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstSIToFP"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstSIToFP( LLVMValueRef ConstantVal, LLVMTypeRef ToType );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstFPToUI"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstFPToUI( LLVMValueRef ConstantVal, LLVMTypeRef ToType );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstFPToSI"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstFPToSI( LLVMValueRef ConstantVal, LLVMTypeRef ToType );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstPtrToInt"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstPtrToInt( LLVMValueRef ConstantVal, LLVMTypeRef ToType );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstIntToPtr"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstIntToPtr( LLVMValueRef ConstantVal, LLVMTypeRef ToType );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstBitCast"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstBitCast( LLVMValueRef ConstantVal, LLVMTypeRef ToType );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstAddrSpaceCast"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstAddrSpaceCast( LLVMValueRef ConstantVal, LLVMTypeRef ToType );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstZExtOrBitCast"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstZExtOrBitCast( LLVMValueRef ConstantVal, LLVMTypeRef ToType );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstSExtOrBitCast"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstSExtOrBitCast( LLVMValueRef ConstantVal, LLVMTypeRef ToType );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstTruncOrBitCast"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstTruncOrBitCast( LLVMValueRef ConstantVal, LLVMTypeRef ToType );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstPointerCast"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstPointerCast( LLVMValueRef ConstantVal, LLVMTypeRef ToType );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstIntCast"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstIntCast( LLVMValueRef ConstantVal, LLVMTypeRef ToType, [MarshalAs( UnmanagedType.Bool )]bool isSigned );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstFPCast"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstFPCast( LLVMValueRef ConstantVal, LLVMTypeRef ToType );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstSelect"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstSelect( LLVMValueRef ConstantCondition, LLVMValueRef ConstantIfTrue, LLVMValueRef ConstantIfFalse );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstExtractElement"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstExtractElement( LLVMValueRef VectorConstant, LLVMValueRef IndexConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstInsertElement"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstInsertElement( LLVMValueRef VectorConstant, LLVMValueRef ElementValueConstant, LLVMValueRef IndexConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstShuffleVector"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstShuffleVector( LLVMValueRef VectorAConstant, LLVMValueRef VectorBConstant, LLVMValueRef MaskConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstExtractValue"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstExtractValue( LLVMValueRef AggConstant, out uint IdxList, uint NumIdx );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMConstInsertValue"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMConstInsertValue( LLVMValueRef AggConstant, LLVMValueRef ElementValueConstant, out uint IdxList, uint NumIdx );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBlockAddress"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBlockAddress( LLVMValueRef F, LLVMBasicBlockRef BB );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetGlobalParent"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMModuleRef LLVMGetGlobalParent( LLVMValueRef Global );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsDeclaration"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMIsDeclaration( LLVMValueRef Global );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetLinkage"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMLinkage LLVMGetLinkage( LLVMValueRef Global );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetLinkage"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetLinkage( LLVMValueRef Global, LLVMLinkage Linkage );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetSection"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LLVMGetSection( LLVMValueRef Global );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetSection"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetSection( LLVMValueRef Global, [MarshalAs( UnmanagedType.LPStr )]string Section );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetVisibility"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMVisibility LLVMGetVisibility( LLVMValueRef Global );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetVisibility"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetVisibility( LLVMValueRef Global, LLVMVisibility Viz );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetDLLStorageClass"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMDLLStorageClass LLVMGetDLLStorageClass( LLVMValueRef Global );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetDLLStorageClass"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetDLLStorageClass( LLVMValueRef Global, LLVMDLLStorageClass Class );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetUnnamedAddress"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMUnnamedAddr LLVMGetUnnamedAddress( LLVMValueRef Global );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetUnnamedAddress"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetUnnamedAddress( LLVMValueRef Global, LLVMUnnamedAddr UnnamedAddr );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGlobalGetValueType"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMGlobalGetValueType( LLVMValueRef Global );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetAlignment"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetAlignment( LLVMValueRef V );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetAlignment"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetAlignment( LLVMValueRef V, uint Bytes );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGlobalSetMetadata"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMGlobalSetMetadata( LLVMValueRef Global, uint Kind, LLVMMetadataRef MD );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGlobalEraseMetadata"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMGlobalEraseMetadata( LLVMValueRef Global, uint Kind );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGlobalClearMetadata"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMGlobalClearMetadata( LLVMValueRef Global );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGlobalCopyAllMetadata"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueMetadataEntry LLVMGlobalCopyAllMetadata( LLVMValueRef Value, out size_t NumEntries );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMValueMetadataEntriesGetKind"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMValueMetadataEntriesGetKind( LLVMValueMetadataEntry Entries, uint Index );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMValueMetadataEntriesGetMetadata"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMValueMetadataEntriesGetMetadata( LLVMValueMetadataEntry Entries, uint Index );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMAddGlobal"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMAddGlobal( LLVMModuleRef M, LLVMTypeRef Ty, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMAddGlobalInAddressSpace"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMAddGlobalInAddressSpace( LLVMModuleRef M, LLVMTypeRef Ty, [MarshalAs( UnmanagedType.LPStr )]string Name, uint AddressSpace );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetNamedGlobal"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetNamedGlobal( LLVMModuleRef M, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetFirstGlobal"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetFirstGlobal( LLVMModuleRef M );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetLastGlobal"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetLastGlobal( LLVMModuleRef M );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetNextGlobal"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetNextGlobal( LLVMValueRef GlobalVar );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetPreviousGlobal"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetPreviousGlobal( LLVMValueRef GlobalVar );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMDeleteGlobal"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMDeleteGlobal( LLVMValueRef GlobalVar );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetInitializer"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetInitializer( LLVMValueRef GlobalVar );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetInitializer"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetInitializer( LLVMValueRef GlobalVar, LLVMValueRef ConstantVal );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsThreadLocal"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMIsThreadLocal( LLVMValueRef GlobalVar );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetThreadLocal"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetThreadLocal( LLVMValueRef GlobalVar, [MarshalAs( UnmanagedType.Bool )]bool IsThreadLocal );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsGlobalConstant"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMIsGlobalConstant( LLVMValueRef GlobalVar );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetGlobalConstant"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetGlobalConstant( LLVMValueRef GlobalVar, [MarshalAs( UnmanagedType.Bool )]bool IsConstant );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetThreadLocalMode"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMThreadLocalMode LLVMGetThreadLocalMode( LLVMValueRef GlobalVar );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetThreadLocalMode"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetThreadLocalMode( LLVMValueRef GlobalVar, LLVMThreadLocalMode Mode );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsExternallyInitialized"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMIsExternallyInitialized( LLVMValueRef GlobalVar );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetExternallyInitialized"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetExternallyInitialized( LLVMValueRef GlobalVar, [MarshalAs( UnmanagedType.Bool )]bool IsExtInit );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMAddAlias"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMAddAlias( LLVMModuleRef M, LLVMTypeRef Ty, LLVMValueRef Aliasee, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetNamedGlobalAlias"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetNamedGlobalAlias( LLVMModuleRef M, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetFirstGlobalAlias"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetFirstGlobalAlias( LLVMModuleRef M );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetLastGlobalAlias"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetLastGlobalAlias( LLVMModuleRef M );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetNextGlobalAlias"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetNextGlobalAlias( LLVMValueRef GA );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetPreviousGlobalAlias"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetPreviousGlobalAlias( LLVMValueRef GA );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMAliasGetAliasee"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMAliasGetAliasee( LLVMValueRef Alias );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMAliasSetAliasee"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMAliasSetAliasee( LLVMValueRef Alias, LLVMValueRef Aliasee );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMDeleteFunction"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMDeleteFunction( LLVMValueRef Fn );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMHasPersonalityFn"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMHasPersonalityFn( LLVMValueRef Fn );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetPersonalityFn"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetPersonalityFn( LLVMValueRef Fn );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetPersonalityFn"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetPersonalityFn( LLVMValueRef Fn, LLVMValueRef PersonalityFn );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetIntrinsicID"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetIntrinsicID( LLVMValueRef Fn );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetIntrinsicDeclaration"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetIntrinsicDeclaration( LLVMModuleRef Mod, uint ID, [MarshalAs( UnmanagedType.LPArray, ArraySubType = UnmanagedType.SysInt )]LLVMTypeRef[] ParamTypes, size_t ParamCount );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIntrinsicGetType"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMIntrinsicGetType( LLVMContextRef Ctx, uint ID, [MarshalAs( UnmanagedType.LPArray, ArraySubType = UnmanagedType.SysInt )]LLVMTypeRef[] ParamTypes, size_t ParamCount );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIntrinsicGetName"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LLVMIntrinsicGetName( uint ID, out size_t NameLength );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIntrinsicCopyOverloadedName"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LLVMIntrinsicCopyOverloadedName( uint ID, [MarshalAs( UnmanagedType.LPArray, ArraySubType = UnmanagedType.SysInt )]LLVMTypeRef[] ParamTypes, size_t ParamCount, out size_t NameLength );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIntrinsicIsOverloaded"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMIntrinsicIsOverloaded( uint ID );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetFunctionCallConv"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetFunctionCallConv( LLVMValueRef Fn );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetFunctionCallConv"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetFunctionCallConv( LLVMValueRef Fn, uint CC );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetGC"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LLVMGetGC( LLVMValueRef Fn );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetGC"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetGC( LLVMValueRef Fn, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMAddAttributeAtIndex"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMAddAttributeAtIndex( LLVMValueRef F, LLVMAttributeIndex Idx, LLVMAttributeRef A );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetAttributeCountAtIndex"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetAttributeCountAtIndex( LLVMValueRef F, LLVMAttributeIndex Idx );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetAttributesAtIndex"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMGetAttributesAtIndex( LLVMValueRef F, LLVMAttributeIndex Idx, out LLVMAttributeRef Attrs );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetEnumAttributeAtIndex"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMAttributeRef LLVMGetEnumAttributeAtIndex( LLVMValueRef F, LLVMAttributeIndex Idx, uint KindID );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetStringAttributeAtIndex"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMAttributeRef LLVMGetStringAttributeAtIndex( LLVMValueRef F, LLVMAttributeIndex Idx, [MarshalAs( UnmanagedType.LPStr )]string K, uint KLen );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMRemoveEnumAttributeAtIndex"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMRemoveEnumAttributeAtIndex( LLVMValueRef F, LLVMAttributeIndex Idx, uint KindID );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMRemoveStringAttributeAtIndex"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMRemoveStringAttributeAtIndex( LLVMValueRef F, LLVMAttributeIndex Idx, [MarshalAs( UnmanagedType.LPStr )]string K, uint KLen );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMAddTargetDependentFunctionAttr"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMAddTargetDependentFunctionAttr( LLVMValueRef Fn, [MarshalAs( UnmanagedType.LPStr )]string A, [MarshalAs( UnmanagedType.LPStr )]string V );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMCountParams"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMCountParams( LLVMValueRef Fn );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetParams"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMGetParams( LLVMValueRef Fn, out LLVMValueRef Params );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetParam"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetParam( LLVMValueRef Fn, uint Index );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetParamParent"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetParamParent( LLVMValueRef Inst );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetFirstParam"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetFirstParam( LLVMValueRef Fn );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetLastParam"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetLastParam( LLVMValueRef Fn );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetNextParam"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetNextParam( LLVMValueRef Arg );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetPreviousParam"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetPreviousParam( LLVMValueRef Arg );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetParamAlignment"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetParamAlignment( LLVMValueRef Arg, uint Align );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMMDStringInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMMDStringInContext( LLVMContextRef C, [MarshalAs( UnmanagedType.LPStr )]string Str, uint SLen );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMMDString"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMMDString( [MarshalAs( UnmanagedType.LPStr )]string Str, uint SLen );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMMDNodeInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMMDNodeInContext( LLVMContextRef C, out LLVMValueRef Vals, uint Count );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMMDNode"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMMDNode( out LLVMValueRef Vals, uint Count );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMMetadataAsValue"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMMetadataAsValue( LLVMContextRef C, LLVMMetadataRef MD );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMValueAsMetadata"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMValueAsMetadata( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetMDString"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LLVMGetMDString( LLVMValueRef V, out uint Length );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetMDNodeNumOperands"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetMDNodeNumOperands( LLVMValueRef V );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetMDNodeOperands"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMGetMDNodeOperands( LLVMValueRef V, out LLVMValueRef Dest );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBasicBlockAsValue"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBasicBlockAsValue( LLVMBasicBlockRef BB );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMValueIsBasicBlock"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMValueIsBasicBlock( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMValueAsBasicBlock"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMBasicBlockRef LLVMValueAsBasicBlock( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetBasicBlockName"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LLVMGetBasicBlockName( LLVMBasicBlockRef BB );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetBasicBlockParent"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetBasicBlockParent( LLVMBasicBlockRef BB );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetBasicBlockTerminator"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetBasicBlockTerminator( LLVMBasicBlockRef BB );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMCountBasicBlocks"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMCountBasicBlocks( LLVMValueRef Fn );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetBasicBlocks"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMGetBasicBlocks( LLVMValueRef Fn, out LLVMBasicBlockRef BasicBlocks );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetFirstBasicBlock"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMBasicBlockRef LLVMGetFirstBasicBlock( LLVMValueRef Fn );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetLastBasicBlock"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMBasicBlockRef LLVMGetLastBasicBlock( LLVMValueRef Fn );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetNextBasicBlock"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMBasicBlockRef LLVMGetNextBasicBlock( LLVMBasicBlockRef BB );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetPreviousBasicBlock"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMBasicBlockRef LLVMGetPreviousBasicBlock( LLVMBasicBlockRef BB );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetEntryBasicBlock"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMBasicBlockRef LLVMGetEntryBasicBlock( LLVMValueRef Fn );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMCreateBasicBlockInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMBasicBlockRef LLVMCreateBasicBlockInContext( LLVMContextRef C, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMAppendBasicBlockInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMBasicBlockRef LLVMAppendBasicBlockInContext( LLVMContextRef C, LLVMValueRef Fn, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMAppendBasicBlock"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMBasicBlockRef LLVMAppendBasicBlock( LLVMValueRef Fn, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMInsertBasicBlockInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMBasicBlockRef LLVMInsertBasicBlockInContext( LLVMContextRef C, LLVMBasicBlockRef BB, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMInsertBasicBlock"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMBasicBlockRef LLVMInsertBasicBlock( LLVMBasicBlockRef InsertBeforeBB, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMDeleteBasicBlock"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMDeleteBasicBlock( LLVMBasicBlockRef BB );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMRemoveBasicBlockFromParent"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMRemoveBasicBlockFromParent( LLVMBasicBlockRef BB );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMMoveBasicBlockBefore"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMMoveBasicBlockBefore( LLVMBasicBlockRef BB, LLVMBasicBlockRef MovePos );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMMoveBasicBlockAfter"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMMoveBasicBlockAfter( LLVMBasicBlockRef BB, LLVMBasicBlockRef MovePos );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetFirstInstruction"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetFirstInstruction( LLVMBasicBlockRef BB );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetLastInstruction"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetLastInstruction( LLVMBasicBlockRef BB );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMHasMetadata"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern int LLVMHasMetadata( LLVMValueRef Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetMetadata"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetMetadata( LLVMValueRef Val, uint KindID );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetMetadata"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetMetadata( LLVMValueRef Val, uint KindID, LLVMValueRef Node );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMInstructionGetAllMetadataOtherThanDebugLoc"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueMetadataEntry LLVMInstructionGetAllMetadataOtherThanDebugLoc( LLVMValueRef Instr, out size_t NumEntries );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetInstructionParent"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMBasicBlockRef LLVMGetInstructionParent( LLVMValueRef Inst );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetNextInstruction"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetNextInstruction( LLVMValueRef Inst );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetPreviousInstruction"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetPreviousInstruction( LLVMValueRef Inst );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMInstructionRemoveFromParent"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMInstructionRemoveFromParent( LLVMValueRef Inst );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMInstructionEraseFromParent"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMInstructionEraseFromParent( LLVMValueRef Inst );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetInstructionOpcode"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMOpcode LLVMGetInstructionOpcode( LLVMValueRef Inst );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetICmpPredicate"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMIntPredicate LLVMGetICmpPredicate( LLVMValueRef Inst );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetFCmpPredicate"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMRealPredicate LLVMGetFCmpPredicate( LLVMValueRef Inst );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMInstructionClone"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMInstructionClone( LLVMValueRef Inst );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsATerminatorInst"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMIsATerminatorInst( LLVMValueRef Inst );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetNumArgOperands"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetNumArgOperands( LLVMValueRef Instr );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetInstructionCallConv"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetInstructionCallConv( LLVMValueRef Instr, uint CC );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetInstructionCallConv"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetInstructionCallConv( LLVMValueRef Instr );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetInstrParamAlignment"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetInstrParamAlignment( LLVMValueRef Instr, uint index, uint Align );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMAddCallSiteAttribute"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMAddCallSiteAttribute( LLVMValueRef C, LLVMAttributeIndex Idx, LLVMAttributeRef A );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetCallSiteAttributeCount"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetCallSiteAttributeCount( LLVMValueRef C, LLVMAttributeIndex Idx );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetCallSiteAttributes"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMGetCallSiteAttributes( LLVMValueRef C, LLVMAttributeIndex Idx, out LLVMAttributeRef Attrs );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetCallSiteEnumAttribute"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMAttributeRef LLVMGetCallSiteEnumAttribute( LLVMValueRef C, LLVMAttributeIndex Idx, uint KindID );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetCallSiteStringAttribute"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMAttributeRef LLVMGetCallSiteStringAttribute( LLVMValueRef C, LLVMAttributeIndex Idx, [MarshalAs( UnmanagedType.LPStr )]string K, uint KLen );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMRemoveCallSiteEnumAttribute"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMRemoveCallSiteEnumAttribute( LLVMValueRef C, LLVMAttributeIndex Idx, uint KindID );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMRemoveCallSiteStringAttribute"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMRemoveCallSiteStringAttribute( LLVMValueRef C, LLVMAttributeIndex Idx, [MarshalAs( UnmanagedType.LPStr )]string K, uint KLen );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetCalledFunctionType"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMGetCalledFunctionType( LLVMValueRef C );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetCalledValue"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetCalledValue( LLVMValueRef Instr );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsTailCall"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMIsTailCall( LLVMValueRef CallInst );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetTailCall"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetTailCall( LLVMValueRef CallInst, [MarshalAs( UnmanagedType.Bool )]bool IsTailCall );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetNormalDest"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMBasicBlockRef LLVMGetNormalDest( LLVMValueRef InvokeInst );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetUnwindDest"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMBasicBlockRef LLVMGetUnwindDest( LLVMValueRef InvokeInst );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetNormalDest"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetNormalDest( LLVMValueRef InvokeInst, LLVMBasicBlockRef B );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetUnwindDest"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetUnwindDest( LLVMValueRef InvokeInst, LLVMBasicBlockRef B );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetNumSuccessors"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetNumSuccessors( LLVMValueRef Term );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetSuccessor"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMBasicBlockRef LLVMGetSuccessor( LLVMValueRef Term, uint i );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetSuccessor"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetSuccessor( LLVMValueRef Term, uint i, LLVMBasicBlockRef block );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsConditional"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMIsConditional( LLVMValueRef Branch );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetCondition"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetCondition( LLVMValueRef Branch );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetCondition"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetCondition( LLVMValueRef Branch, LLVMValueRef Cond );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetSwitchDefaultDest"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMBasicBlockRef LLVMGetSwitchDefaultDest( LLVMValueRef SwitchInstr );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetAllocatedType"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMTypeRef LLVMGetAllocatedType( LLVMValueRef Alloca );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsInBounds"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMIsInBounds( LLVMValueRef GEP );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetIsInBounds"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetIsInBounds( LLVMValueRef GEP, [MarshalAs( UnmanagedType.Bool )]bool InBounds );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMAddIncoming"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMAddIncoming( LLVMValueRef PhiNode, [MarshalAs( UnmanagedType.LPArray, ArraySubType = UnmanagedType.SysInt )]LLVMValueRef[] IncomingValues, [MarshalAs( UnmanagedType.LPArray, ArraySubType = UnmanagedType.SysInt )]LLVMBasicBlockRef[] IncomingBlocks, uint Count );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMCountIncoming"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMCountIncoming( LLVMValueRef PhiNode );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetIncomingValue"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetIncomingValue( LLVMValueRef PhiNode, uint Index );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetIncomingBlock"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMBasicBlockRef LLVMGetIncomingBlock( LLVMValueRef PhiNode, uint Index );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetNumIndices"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetNumIndices( LLVMValueRef Inst );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetIndices"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        unsafe public static extern uint* LLVMGetIndices( LLVMValueRef Inst );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMCreateBuilderInContext"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMBuilderRef LLVMCreateBuilderInContext( LLVMContextRef C );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMCreateBuilder"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMBuilderRef LLVMCreateBuilder(  );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMPositionBuilder"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMPositionBuilder( LLVMBuilderRef Builder, LLVMBasicBlockRef Block, LLVMValueRef Instr );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMPositionBuilderBefore"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMPositionBuilderBefore( LLVMBuilderRef Builder, LLVMValueRef Instr );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMPositionBuilderAtEnd"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMPositionBuilderAtEnd( LLVMBuilderRef Builder, LLVMBasicBlockRef Block );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetInsertBlock"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMBasicBlockRef LLVMGetInsertBlock( LLVMBuilderRef Builder );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMClearInsertionPosition"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMClearInsertionPosition( LLVMBuilderRef Builder );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMInsertIntoBuilder"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMInsertIntoBuilder( LLVMBuilderRef Builder, LLVMValueRef Instr );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMInsertIntoBuilderWithName"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMInsertIntoBuilderWithName( LLVMBuilderRef Builder, LLVMValueRef Instr, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetCurrentDebugLocation"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetCurrentDebugLocation( LLVMBuilderRef Builder, LLVMValueRef L );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetCurrentDebugLocation"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetCurrentDebugLocation( LLVMBuilderRef Builder );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetInstDebugLocation"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetInstDebugLocation( LLVMBuilderRef Builder, LLVMValueRef Inst );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildRetVoid"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildRetVoid( LLVMBuilderRef _0 );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildRet"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildRet( LLVMBuilderRef _0, LLVMValueRef V );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildAggregateRet"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildAggregateRet( LLVMBuilderRef _0, out LLVMValueRef RetVals, uint N );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildBr"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildBr( LLVMBuilderRef _0, LLVMBasicBlockRef Dest );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildCondBr"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildCondBr( LLVMBuilderRef _0, LLVMValueRef If, LLVMBasicBlockRef Then, LLVMBasicBlockRef Else );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildSwitch"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildSwitch( LLVMBuilderRef _0, LLVMValueRef V, LLVMBasicBlockRef Else, uint NumCases );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildIndirectBr"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildIndirectBr( LLVMBuilderRef B, LLVMValueRef Addr, uint NumDests );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildInvoke2"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildInvoke2( LLVMBuilderRef _0, LLVMTypeRef Ty, LLVMValueRef Fn, out LLVMValueRef Args, uint NumArgs, LLVMBasicBlockRef Then, LLVMBasicBlockRef Catch, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildUnreachable"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildUnreachable( LLVMBuilderRef _0 );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildResume"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildResume( LLVMBuilderRef B, LLVMValueRef Exn );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildLandingPad"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildLandingPad( LLVMBuilderRef B, LLVMTypeRef Ty, LLVMValueRef PersFn, uint NumClauses, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildCleanupRet"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildCleanupRet( LLVMBuilderRef B, LLVMValueRef CatchPad, LLVMBasicBlockRef BB );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildCatchRet"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildCatchRet( LLVMBuilderRef B, LLVMValueRef CatchPad, LLVMBasicBlockRef BB );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildCatchPad"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildCatchPad( LLVMBuilderRef B, LLVMValueRef ParentPad, out LLVMValueRef Args, uint NumArgs, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildCleanupPad"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildCleanupPad( LLVMBuilderRef B, LLVMValueRef ParentPad, out LLVMValueRef Args, uint NumArgs, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildCatchSwitch"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildCatchSwitch( LLVMBuilderRef B, LLVMValueRef ParentPad, LLVMBasicBlockRef UnwindBB, uint NumHandlers, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMAddCase"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMAddCase( LLVMValueRef Switch, LLVMValueRef OnVal, LLVMBasicBlockRef Dest );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMAddDestination"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMAddDestination( LLVMValueRef IndirectBr, LLVMBasicBlockRef Dest );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetNumClauses"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetNumClauses( LLVMValueRef LandingPad );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetClause"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetClause( LLVMValueRef LandingPad, uint Idx );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMAddClause"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMAddClause( LLVMValueRef LandingPad, LLVMValueRef ClauseVal );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsCleanup"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMIsCleanup( LLVMValueRef LandingPad );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetCleanup"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetCleanup( LLVMValueRef LandingPad, [MarshalAs( UnmanagedType.Bool )]bool Val );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMAddHandler"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMAddHandler( LLVMValueRef CatchSwitch, LLVMBasicBlockRef Dest );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetNumHandlers"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetNumHandlers( LLVMValueRef CatchSwitch );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetHandlers"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMGetHandlers( LLVMValueRef CatchSwitch, out LLVMBasicBlockRef Handlers );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetArgOperand"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetArgOperand( LLVMValueRef Funclet, uint i );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetArgOperand"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetArgOperand( LLVMValueRef Funclet, uint i, LLVMValueRef value );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetParentCatchSwitch"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMGetParentCatchSwitch( LLVMValueRef CatchPad );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetParentCatchSwitch"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetParentCatchSwitch( LLVMValueRef CatchPad, LLVMValueRef CatchSwitch );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildAdd"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildAdd( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildNSWAdd"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildNSWAdd( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildNUWAdd"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildNUWAdd( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildFAdd"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildFAdd( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildSub"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildSub( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildNSWSub"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildNSWSub( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildNUWSub"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildNUWSub( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildFSub"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildFSub( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildMul"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildMul( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildNSWMul"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildNSWMul( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildNUWMul"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildNUWMul( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildFMul"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildFMul( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildUDiv"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildUDiv( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildExactUDiv"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildExactUDiv( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildSDiv"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildSDiv( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildExactSDiv"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildExactSDiv( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildFDiv"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildFDiv( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildURem"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildURem( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildSRem"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildSRem( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildFRem"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildFRem( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildShl"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildShl( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildLShr"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildLShr( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildAShr"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildAShr( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildAnd"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildAnd( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildOr"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildOr( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildXor"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildXor( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildBinOp"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildBinOp( LLVMBuilderRef B, LLVMOpcode Op, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildNeg"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildNeg( LLVMBuilderRef _0, LLVMValueRef V, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildNSWNeg"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildNSWNeg( LLVMBuilderRef B, LLVMValueRef V, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildNUWNeg"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildNUWNeg( LLVMBuilderRef B, LLVMValueRef V, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildFNeg"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildFNeg( LLVMBuilderRef _0, LLVMValueRef V, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildNot"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildNot( LLVMBuilderRef _0, LLVMValueRef V, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildMalloc"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildMalloc( LLVMBuilderRef _0, LLVMTypeRef Ty, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildArrayMalloc"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildArrayMalloc( LLVMBuilderRef _0, LLVMTypeRef Ty, LLVMValueRef Val, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildMemSet"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildMemSet( LLVMBuilderRef B, LLVMValueRef Ptr, LLVMValueRef Val, LLVMValueRef Len, uint Align );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildMemCpy"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildMemCpy( LLVMBuilderRef B, LLVMValueRef Dst, uint DstAlign, LLVMValueRef Src, uint SrcAlign, LLVMValueRef Size );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildMemMove"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildMemMove( LLVMBuilderRef B, LLVMValueRef Dst, uint DstAlign, LLVMValueRef Src, uint SrcAlign, LLVMValueRef Size );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildAlloca"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildAlloca( LLVMBuilderRef _0, LLVMTypeRef Ty, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildArrayAlloca"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildArrayAlloca( LLVMBuilderRef _0, LLVMTypeRef Ty, LLVMValueRef Val, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildFree"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildFree( LLVMBuilderRef _0, LLVMValueRef PointerVal );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildLoad2"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildLoad2( LLVMBuilderRef _0, LLVMTypeRef Ty, LLVMValueRef PointerVal, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildStore"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildStore( LLVMBuilderRef _0, LLVMValueRef Val, LLVMValueRef Ptr );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildGEP2"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildGEP2( LLVMBuilderRef B, LLVMTypeRef Ty, LLVMValueRef Pointer, [MarshalAs( UnmanagedType.LPArray, ArraySubType = UnmanagedType.SysInt )]LLVMValueRef[] Indices, uint NumIndices, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildInBoundsGEP2"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildInBoundsGEP2( LLVMBuilderRef B, LLVMTypeRef Ty, LLVMValueRef Pointer, [MarshalAs( UnmanagedType.LPArray, ArraySubType = UnmanagedType.SysInt )]LLVMValueRef[] Indices, uint NumIndices, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildStructGEP2"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildStructGEP2( LLVMBuilderRef B, LLVMTypeRef Ty, LLVMValueRef Pointer, uint Idx, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildGlobalString"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildGlobalString( LLVMBuilderRef B, [MarshalAs( UnmanagedType.LPStr )]string Str, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildGlobalStringPtr"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildGlobalStringPtr( LLVMBuilderRef B, [MarshalAs( UnmanagedType.LPStr )]string Str, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetVolatile"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMGetVolatile( LLVMValueRef MemoryAccessInst );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetVolatile"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetVolatile( LLVMValueRef MemoryAccessInst, [MarshalAs( UnmanagedType.Bool )]bool IsVolatile );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetOrdering"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMAtomicOrdering LLVMGetOrdering( LLVMValueRef MemoryAccessInst );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetOrdering"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetOrdering( LLVMValueRef MemoryAccessInst, LLVMAtomicOrdering Ordering );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildTrunc"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildTrunc( LLVMBuilderRef _0, LLVMValueRef Val, LLVMTypeRef DestTy, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildZExt"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildZExt( LLVMBuilderRef _0, LLVMValueRef Val, LLVMTypeRef DestTy, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildSExt"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildSExt( LLVMBuilderRef _0, LLVMValueRef Val, LLVMTypeRef DestTy, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildFPToUI"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildFPToUI( LLVMBuilderRef _0, LLVMValueRef Val, LLVMTypeRef DestTy, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildFPToSI"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildFPToSI( LLVMBuilderRef _0, LLVMValueRef Val, LLVMTypeRef DestTy, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildUIToFP"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildUIToFP( LLVMBuilderRef _0, LLVMValueRef Val, LLVMTypeRef DestTy, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildSIToFP"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildSIToFP( LLVMBuilderRef _0, LLVMValueRef Val, LLVMTypeRef DestTy, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildFPTrunc"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildFPTrunc( LLVMBuilderRef _0, LLVMValueRef Val, LLVMTypeRef DestTy, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildFPExt"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildFPExt( LLVMBuilderRef _0, LLVMValueRef Val, LLVMTypeRef DestTy, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildPtrToInt"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildPtrToInt( LLVMBuilderRef _0, LLVMValueRef Val, LLVMTypeRef DestTy, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildIntToPtr"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildIntToPtr( LLVMBuilderRef _0, LLVMValueRef Val, LLVMTypeRef DestTy, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildBitCast"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildBitCast( LLVMBuilderRef _0, LLVMValueRef Val, LLVMTypeRef DestTy, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildAddrSpaceCast"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildAddrSpaceCast( LLVMBuilderRef _0, LLVMValueRef Val, LLVMTypeRef DestTy, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildZExtOrBitCast"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildZExtOrBitCast( LLVMBuilderRef _0, LLVMValueRef Val, LLVMTypeRef DestTy, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildSExtOrBitCast"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildSExtOrBitCast( LLVMBuilderRef _0, LLVMValueRef Val, LLVMTypeRef DestTy, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildTruncOrBitCast"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildTruncOrBitCast( LLVMBuilderRef _0, LLVMValueRef Val, LLVMTypeRef DestTy, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildCast"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildCast( LLVMBuilderRef B, LLVMOpcode Op, LLVMValueRef Val, LLVMTypeRef DestTy, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildPointerCast"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildPointerCast( LLVMBuilderRef _0, LLVMValueRef Val, LLVMTypeRef DestTy, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildIntCast2"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildIntCast2( LLVMBuilderRef _0, LLVMValueRef Val, LLVMTypeRef DestTy, [MarshalAs( UnmanagedType.Bool )]bool IsSigned, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildFPCast"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildFPCast( LLVMBuilderRef _0, LLVMValueRef Val, LLVMTypeRef DestTy, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildICmp"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildICmp( LLVMBuilderRef _0, LLVMIntPredicate Op, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildFCmp"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildFCmp( LLVMBuilderRef _0, LLVMRealPredicate Op, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildPhi"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildPhi( LLVMBuilderRef _0, LLVMTypeRef Ty, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildCall2"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildCall2( LLVMBuilderRef _0, LLVMTypeRef _1, LLVMValueRef Fn, [MarshalAs( UnmanagedType.LPArray, ArraySubType = UnmanagedType.SysInt )]LLVMValueRef[] Args, uint NumArgs, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildSelect"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildSelect( LLVMBuilderRef _0, LLVMValueRef If, LLVMValueRef Then, LLVMValueRef Else, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildVAArg"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildVAArg( LLVMBuilderRef _0, LLVMValueRef List, LLVMTypeRef Ty, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildExtractElement"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildExtractElement( LLVMBuilderRef _0, LLVMValueRef VecVal, LLVMValueRef Index, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildInsertElement"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildInsertElement( LLVMBuilderRef _0, LLVMValueRef VecVal, LLVMValueRef EltVal, LLVMValueRef Index, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildShuffleVector"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildShuffleVector( LLVMBuilderRef _0, LLVMValueRef V1, LLVMValueRef V2, LLVMValueRef Mask, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildExtractValue"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildExtractValue( LLVMBuilderRef _0, LLVMValueRef AggVal, uint Index, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildInsertValue"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildInsertValue( LLVMBuilderRef _0, LLVMValueRef AggVal, LLVMValueRef EltVal, uint Index, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildIsNull"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildIsNull( LLVMBuilderRef _0, LLVMValueRef Val, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildIsNotNull"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildIsNotNull( LLVMBuilderRef _0, LLVMValueRef Val, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildPtrDiff"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildPtrDiff( LLVMBuilderRef _0, LLVMValueRef LHS, LLVMValueRef RHS, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildFence"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildFence( LLVMBuilderRef B, LLVMAtomicOrdering ordering, [MarshalAs( UnmanagedType.Bool )]bool singleThread, [MarshalAs( UnmanagedType.LPStr )]string Name );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildAtomicRMW"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildAtomicRMW( LLVMBuilderRef B, LLVMAtomicRMWBinOp op, LLVMValueRef PTR, LLVMValueRef Val, LLVMAtomicOrdering ordering, [MarshalAs( UnmanagedType.Bool )]bool singleThread );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMBuildAtomicCmpXchg"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMBuildAtomicCmpXchg( LLVMBuilderRef B, LLVMValueRef Ptr, LLVMValueRef Cmp, LLVMValueRef New, LLVMAtomicOrdering SuccessOrdering, LLVMAtomicOrdering FailureOrdering, [MarshalAs( UnmanagedType.Bool )]bool SingleThread );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsAtomicSingleThread"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMIsAtomicSingleThread( LLVMValueRef AtomicInst );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetAtomicSingleThread"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetAtomicSingleThread( LLVMValueRef AtomicInst, [MarshalAs( UnmanagedType.Bool )]bool SingleThread );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetCmpXchgSuccessOrdering"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMAtomicOrdering LLVMGetCmpXchgSuccessOrdering( LLVMValueRef CmpXchgInst );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetCmpXchgSuccessOrdering"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetCmpXchgSuccessOrdering( LLVMValueRef CmpXchgInst, LLVMAtomicOrdering Ordering );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetCmpXchgFailureOrdering"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMAtomicOrdering LLVMGetCmpXchgFailureOrdering( LLVMValueRef CmpXchgInst );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMSetCmpXchgFailureOrdering"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetCmpXchgFailureOrdering( LLVMValueRef CmpXchgInst, LLVMAtomicOrdering Ordering );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMCreateModuleProviderForExistingModule"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMModuleProviderRef LLVMCreateModuleProviderForExistingModule( LLVMModuleRef M );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMCreateMemoryBufferWithContentsOfFile"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMStatus LLVMCreateMemoryBufferWithContentsOfFile( [MarshalAs( UnmanagedType.LPStr )]string Path, out LLVMMemoryBufferRef OutMemBuf, [MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( DisposeMessageMarshaler ) )]out string OutMessage );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMCreateMemoryBufferWithSTDIN"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMStatus LLVMCreateMemoryBufferWithSTDIN( out LLVMMemoryBufferRef OutMemBuf, [MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( DisposeMessageMarshaler ) )]out string OutMessage );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMCreateMemoryBufferWithMemoryRange"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMemoryBufferRef LLVMCreateMemoryBufferWithMemoryRange( [MarshalAs( UnmanagedType.LPStr )]string InputData, size_t InputDataLength, [MarshalAs( UnmanagedType.LPStr )]string BufferName, [MarshalAs( UnmanagedType.Bool )]bool RequiresNullTerminator );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMCreateMemoryBufferWithMemoryRangeCopy"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMemoryBufferRef LLVMCreateMemoryBufferWithMemoryRangeCopy( [MarshalAs( UnmanagedType.LPStr )]string InputData, size_t InputDataLength, [MarshalAs( UnmanagedType.LPStr )]string BufferName );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetBufferStart"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern global::System.IntPtr LLVMGetBufferStart( LLVMMemoryBufferRef MemBuf );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetBufferSize"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern size_t LLVMGetBufferSize( LLVMMemoryBufferRef MemBuf );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMGetGlobalPassRegistry"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMPassRegistryRef LLVMGetGlobalPassRegistry(  );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMCreatePassManager"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMPassManagerRef LLVMCreatePassManager(  );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMCreateFunctionPassManagerForModule"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMPassManagerRef LLVMCreateFunctionPassManagerForModule( LLVMModuleRef M );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMRunPassManager"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMRunPassManager( LLVMPassManagerRef PM, LLVMModuleRef M );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMInitializeFunctionPassManager"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMInitializeFunctionPassManager( LLVMPassManagerRef FPM );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMRunFunctionPassManager"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMRunFunctionPassManager( LLVMPassManagerRef FPM, LLVMValueRef F );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMFinalizeFunctionPassManager"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMFinalizeFunctionPassManager( LLVMPassManagerRef FPM );

        /// <include file="Core.xml" path='LibLLVMAPI/Function[@name="LLVMIsMultithreaded"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMIsMultithreaded(  );

    }
}
