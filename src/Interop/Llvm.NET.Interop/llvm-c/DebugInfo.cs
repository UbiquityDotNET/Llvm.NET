// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 2.17941.31104.49410
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.CodeDom.Compiler;
using System.Runtime.InteropServices;
using System.Security;

namespace Llvm.NET.Interop
{
    /**
     * Debug info flags.
     */
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public enum LLVMDIFlags : global::System.Int32
    {
        LLVMDIFlagZero = 0,
        LLVMDIFlagPrivate = 1,
        LLVMDIFlagProtected = 2,
        LLVMDIFlagPublic = 3,
        LLVMDIFlagFwdDecl = 4,
        LLVMDIFlagAppleBlock = 8,
        LLVMDIFlagBlockByrefStruct = 16,
        LLVMDIFlagVirtual = 32,
        LLVMDIFlagArtificial = 64,
        LLVMDIFlagExplicit = 128,
        LLVMDIFlagPrototyped = 256,
        LLVMDIFlagObjcClassComplete = 512,
        LLVMDIFlagObjectPointer = 1024,
        LLVMDIFlagVector = 2048,
        LLVMDIFlagStaticMember = 4096,
        LLVMDIFlagLValueReference = 8192,
        LLVMDIFlagRValueReference = 16384,
        LLVMDIFlagReserved = 32768,
        LLVMDIFlagSingleInheritance = 65536,
        LLVMDIFlagMultipleInheritance = 131072,
        LLVMDIFlagVirtualInheritance = 196608,
        LLVMDIFlagIntroducedVirtual = 262144,
        LLVMDIFlagBitField = 524288,
        LLVMDIFlagNoReturn = 1048576,
        LLVMDIFlagMainSubprogram = 2097152,
        LLVMDIFlagTypePassByValue = 4194304,
        LLVMDIFlagTypePassByReference = 8388608,
        LLVMDIFlagEnumClass = 16777216,
        LLVMDIFlagFixedEnum = 16777216,
        LLVMDIFlagThunk = 33554432,
        LLVMDIFlagTrivial = 67108864,
        LLVMDIFlagBigEndian = 134217728,
        LLVMDIFlagLittleEndian = 268435456,
        LLVMDIFlagIndirectVirtualBase = 36,
        LLVMDIFlagAccessibility = 3,
        LLVMDIFlagPtrToMemberRep = 196608,
    }

    /**
     * Source languages known by DWARF.
     */
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public enum LLVMDWARFSourceLanguage : global::System.Int32
    {
        LLVMDWARFSourceLanguageC89 = 0,
        LLVMDWARFSourceLanguageC = 1,
        LLVMDWARFSourceLanguageAda83 = 2,
        LLVMDWARFSourceLanguageC_plus_plus = 3,
        LLVMDWARFSourceLanguageCobol74 = 4,
        LLVMDWARFSourceLanguageCobol85 = 5,
        LLVMDWARFSourceLanguageFortran77 = 6,
        LLVMDWARFSourceLanguageFortran90 = 7,
        LLVMDWARFSourceLanguagePascal83 = 8,
        LLVMDWARFSourceLanguageModula2 = 9,
        LLVMDWARFSourceLanguageJava = 10,
        LLVMDWARFSourceLanguageC99 = 11,
        LLVMDWARFSourceLanguageAda95 = 12,
        LLVMDWARFSourceLanguageFortran95 = 13,
        LLVMDWARFSourceLanguagePLI = 14,
        LLVMDWARFSourceLanguageObjC = 15,
        LLVMDWARFSourceLanguageObjC_plus_plus = 16,
        LLVMDWARFSourceLanguageUPC = 17,
        LLVMDWARFSourceLanguageD = 18,
        LLVMDWARFSourceLanguagePython = 19,
        LLVMDWARFSourceLanguageOpenCL = 20,
        LLVMDWARFSourceLanguageGo = 21,
        LLVMDWARFSourceLanguageModula3 = 22,
        LLVMDWARFSourceLanguageHaskell = 23,
        LLVMDWARFSourceLanguageC_plus_plus_03 = 24,
        LLVMDWARFSourceLanguageC_plus_plus_11 = 25,
        LLVMDWARFSourceLanguageOCaml = 26,
        LLVMDWARFSourceLanguageRust = 27,
        LLVMDWARFSourceLanguageC11 = 28,
        LLVMDWARFSourceLanguageSwift = 29,
        LLVMDWARFSourceLanguageJulia = 30,
        LLVMDWARFSourceLanguageDylan = 31,
        LLVMDWARFSourceLanguageC_plus_plus_14 = 32,
        LLVMDWARFSourceLanguageFortran03 = 33,
        LLVMDWARFSourceLanguageFortran08 = 34,
        LLVMDWARFSourceLanguageRenderScript = 35,
        LLVMDWARFSourceLanguageBLISS = 36,
        LLVMDWARFSourceLanguageMips_Assembler = 37,
        LLVMDWARFSourceLanguageGOOGLE_RenderScript = 38,
        LLVMDWARFSourceLanguageBORLAND_Delphi = 39,
    }

    /**
     * The amount of debug information to emit.
     */
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public enum LLVMDWARFEmissionKind : global::System.Int32
    {
        LLVMDWARFEmissionNone = 0,
        LLVMDWARFEmissionFull = 1,
        LLVMDWARFEmissionLineTablesOnly = 2,
    }

    /**
     * The kind of metadata nodes.
     */
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public enum LLVMMetadataKind : global::System.Int32
    {
        LLVMMDStringMetadataKind = 0,
        LLVMConstantAsMetadataMetadataKind = 1,
        LLVMLocalAsMetadataMetadataKind = 2,
        LLVMDistinctMDOperandPlaceholderMetadataKind = 3,
        LLVMMDTupleMetadataKind = 4,
        LLVMDILocationMetadataKind = 5,
        LLVMDIExpressionMetadataKind = 6,
        LLVMDIGlobalVariableExpressionMetadataKind = 7,
        LLVMGenericDINodeMetadataKind = 8,
        LLVMDISubrangeMetadataKind = 9,
        LLVMDIEnumeratorMetadataKind = 10,
        LLVMDIBasicTypeMetadataKind = 11,
        LLVMDIDerivedTypeMetadataKind = 12,
        LLVMDICompositeTypeMetadataKind = 13,
        LLVMDISubroutineTypeMetadataKind = 14,
        LLVMDIFileMetadataKind = 15,
        LLVMDICompileUnitMetadataKind = 16,
        LLVMDISubprogramMetadataKind = 17,
        LLVMDILexicalBlockMetadataKind = 18,
        LLVMDILexicalBlockFileMetadataKind = 19,
        LLVMDINamespaceMetadataKind = 20,
        LLVMDIModuleMetadataKind = 21,
        LLVMDITemplateTypeParameterMetadataKind = 22,
        LLVMDITemplateValueParameterMetadataKind = 23,
        LLVMDIGlobalVariableMetadataKind = 24,
        LLVMDILocalVariableMetadataKind = 25,
        LLVMDILabelMetadataKind = 26,
        LLVMDIObjCPropertyMetadataKind = 27,
        LLVMDIImportedEntityMetadataKind = 28,
        LLVMDIMacroMetadataKind = 29,
        LLVMDIMacroFileMetadataKind = 30,
    }

    public static partial class NativeMethods
    {
        /**
         * The current debug metadata version number.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMDebugMetadataVersion(  );

        /**
         * The version of debug metadata that's present in the provided \c Module.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMGetModuleDebugMetadataVersion( LLVMModuleRef Module );

        /**
         * Strip debug info in the module if it exists.
         * To do this, we remove all calls to the debugger intrinsics and any named
         * metadata for debugging. We also remove debug locations for instructions.
         * Return true if module is modified.
         */
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMStripModuleDebugInfo( LLVMModuleRef Module );

        /**
         * Construct a builder for a module, and do not allow for unresolved nodes
         * attached to the module.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMDIBuilderRef LLVMCreateDIBuilderDisallowUnresolved( LLVMModuleRef M );

        /**
         * Construct a builder for a module and collect unresolved nodes attached
         * to the module in order to resolve cycles during a call to
         * \c LLVMDIBuilderFinalize.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMDIBuilderRef LLVMCreateDIBuilder( LLVMModuleRef M );

        /**
         * Construct any deferred debug info descriptors.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMDIBuilderFinalize( LLVMDIBuilderRef Builder );

        /**
         * A CompileUnit provides an anchor for all debugging
         * information generated during this instance of compilation.
         * \param Lang          Source programming language, eg.
         *                      \c LLVMDWARFSourceLanguageC99
         * \param FileRef       File info.
         * \param Producer      Identify the producer of debugging information
         *                      and code.  Usually this is a compiler
         *                      version string.
         * \param ProducerLen   The length of the C string passed to \c Producer.
         * \param isOptimized   A boolean flag which indicates whether optimization
         *                      is enabled or not.
         * \param Flags         This string lists command line options. This
         *                      string is directly embedded in debug info
         *                      output which may be used by a tool
         *                      analyzing generated debugging information.
         * \param FlagsLen      The length of the C string passed to \c Flags.
         * \param RuntimeVer    This indicates runtime version for languages like
         *                      Objective-C.
         * \param SplitName     The name of the file that we'll split debug info
         *                      out into.
         * \param SplitNameLen  The length of the C string passed to \c SplitName.
         * \param Kind          The kind of debug information to generate.
         * \param DWOId         The DWOId if this is a split skeleton compile unit.
         * \param SplitDebugInlining    Whether to emit inline debug info.
         * \param DebugInfoForProfiling Whether to emit extra debug info for
         *                              profile collection.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateCompileUnit( LLVMDIBuilderRef Builder, LLVMDWARFSourceLanguage Lang, LLVMMetadataRef FileRef, [MarshalAs( UnmanagedType.LPStr )]string Producer, size_t ProducerLen, [MarshalAs( UnmanagedType.Bool )]bool isOptimized, [MarshalAs( UnmanagedType.LPStr )]string Flags, size_t FlagsLen, uint RuntimeVer, [MarshalAs( UnmanagedType.LPStr )]string SplitName, size_t SplitNameLen, LLVMDWARFEmissionKind Kind, uint DWOId, [MarshalAs( UnmanagedType.Bool )]bool SplitDebugInlining, [MarshalAs( UnmanagedType.Bool )]bool DebugInfoForProfiling );

        /**
         * Create a file descriptor to hold debugging information for a file.
         * \param Builder      The \c DIBuilder.
         * \param Filename     File name.
         * \param FilenameLen  The length of the C string passed to \c Filename.
         * \param Directory    Directory.
         * \param DirectoryLen The length of the C string passed to \c Directory.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateFile( LLVMDIBuilderRef Builder, [MarshalAs( UnmanagedType.LPStr )]string Filename, size_t FilenameLen, [MarshalAs( UnmanagedType.LPStr )]string Directory, size_t DirectoryLen );

        /**
         * Creates a new descriptor for a module with the specified parent scope.
         * \param Builder         The \c DIBuilder.
         * \param ParentScope     The parent scope containing this module declaration.
         * \param Name            Module name.
         * \param NameLen         The length of the C string passed to \c Name.
         * \param ConfigMacros    A space-separated shell-quoted list of -D macro
                                  definitions as they would appear on a command line.
         * \param ConfigMacrosLen The length of the C string passed to \c ConfigMacros.
         * \param IncludePath     The path to the module map file.
         * \param IncludePathLen  The length of the C string passed to \c IncludePath.
         * \param ISysRoot        The Clang system root (value of -isysroot).
         * \param ISysRootLen     The length of the C string passed to \c ISysRoot.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateModule( LLVMDIBuilderRef Builder, LLVMMetadataRef ParentScope, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen, [MarshalAs( UnmanagedType.LPStr )]string ConfigMacros, size_t ConfigMacrosLen, [MarshalAs( UnmanagedType.LPStr )]string IncludePath, size_t IncludePathLen, [MarshalAs( UnmanagedType.LPStr )]string ISysRoot, size_t ISysRootLen );

        /**
         * Creates a new descriptor for a namespace with the specified parent scope.
         * \param Builder          The \c DIBuilder.
         * \param ParentScope      The parent scope containing this module declaration.
         * \param Name             NameSpace name.
         * \param NameLen          The length of the C string passed to \c Name.
         * \param ExportSymbols    Whether or not the namespace exports symbols, e.g.
         *                         this is true of C++ inline namespaces.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateNameSpace( LLVMDIBuilderRef Builder, LLVMMetadataRef ParentScope, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen, [MarshalAs( UnmanagedType.Bool )]bool ExportSymbols );

        /**
         * Create a new descriptor for the specified subprogram.
         * \param Builder         The \c DIBuilder.
         * \param Scope           Function scope.
         * \param Name            Function name.
         * \param NameLen         Length of enumeration name.
         * \param LinkageName     Mangled function name.
         * \param LinkageNameLen  Length of linkage name.
         * \param File            File where this variable is defined.
         * \param LineNo          Line number.
         * \param Ty              Function type.
         * \param IsLocalToUnit   True if this function is not externally visible.
         * \param IsDefinition    True if this is a function definition.
         * \param ScopeLine       Set to the beginning of the scope this starts
         * \param Flags           E.g.: \c LLVMDIFlagLValueReference. These flags are
         *                        used to emit dwarf attributes.
         * \param IsOptimized     True if optimization is ON.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateFunction( LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen, [MarshalAs( UnmanagedType.LPStr )]string LinkageName, size_t LinkageNameLen, LLVMMetadataRef File, uint LineNo, LLVMMetadataRef Ty, [MarshalAs( UnmanagedType.Bool )]bool IsLocalToUnit, [MarshalAs( UnmanagedType.Bool )]bool IsDefinition, uint ScopeLine, LLVMDIFlags Flags, [MarshalAs( UnmanagedType.Bool )]bool IsOptimized );

        /**
         * Create a descriptor for a lexical block with the specified parent context.
         * \param Builder      The \c DIBuilder.
         * \param Scope        Parent lexical block.
         * \param File         Source file.
         * \param Line         The line in the source file.
         * \param Column       The column in the source file.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateLexicalBlock( LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, LLVMMetadataRef File, uint Line, uint Column );

        /**
         * Create a descriptor for a lexical block with a new file attached.
         * \param Builder        The \c DIBuilder.
         * \param Scope          Lexical block.
         * \param File           Source file.
         * \param Discriminator  DWARF path discriminator value.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateLexicalBlockFile( LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, LLVMMetadataRef File, uint Discriminator );

        /**
         * Create a descriptor for an imported namespace. Suitable for e.g. C++
         * using declarations.
         * \param Builder    The \c DIBuilder.
         * \param Scope      The scope this module is imported into
         * \param File       File where the declaration is located.
         * \param Line       Line number of the declaration.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateImportedModuleFromNamespace( LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, LLVMMetadataRef NS, LLVMMetadataRef File, uint Line );

        /**
         * Create a descriptor for an imported module that aliases another
         * imported entity descriptor.
         * \param Builder        The \c DIBuilder.
         * \param Scope          The scope this module is imported into
         * \param ImportedEntity Previous imported entity to alias.
         * \param File           File where the declaration is located.
         * \param Line           Line number of the declaration.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateImportedModuleFromAlias( LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, LLVMMetadataRef ImportedEntity, LLVMMetadataRef File, uint Line );

        /**
         * Create a descriptor for an imported module.
         * \param Builder    The \c DIBuilder.
         * \param Scope      The scope this module is imported into
         * \param M          The module being imported here
         * \param File       File where the declaration is located.
         * \param Line       Line number of the declaration.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateImportedModuleFromModule( LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, LLVMMetadataRef M, LLVMMetadataRef File, uint Line );

        /**
         * Create a descriptor for an imported function, type, or variable.  Suitable
         * for e.g. FORTRAN-style USE declarations.
         * \param Builder    The DIBuilder.
         * \param Scope      The scope this module is imported into.
         * \param Decl       The declaration (or definition) of a function, type,
                             or variable.
         * \param File       File where the declaration is located.
         * \param Line       Line number of the declaration.
         * \param Name       A name that uniquely identifies this imported declaration.
         * \param NameLen    The length of the C string passed to \c Name.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateImportedDeclaration( LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, LLVMMetadataRef Decl, LLVMMetadataRef File, uint Line, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen );

        /**
         * Creates a new DebugLocation that describes a source location.
         * \param Line The line in the source file.
         * \param Column The column in the source file.
         * \param Scope The scope in which the location resides.
         * \param InlinedAt The scope where this location was inlined, if at all.
         *                  (optional).
         * \note If the item to which this location is attached cannot be
         *       attributed to a source line, pass 0 for the line and column.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateDebugLocation( LLVMContextRef Ctx, uint Line, uint Column, LLVMMetadataRef Scope, LLVMMetadataRef InlinedAt );

        /**
         * Get the line number of this debug location.
         * \param Location     The debug location.
         *
         * @see DILocation::getLine()
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMDILocationGetLine( LLVMMetadataRef Location );

        /**
         * Get the column number of this debug location.
         * \param Location     The debug location.
         *
         * @see DILocation::getColumn()
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMDILocationGetColumn( LLVMMetadataRef Location );

        /**
         * Get the local scope associated with this debug location.
         * \param Location     The debug location.
         *
         * @see DILocation::getScope()
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDILocationGetScope( LLVMMetadataRef Location );

        /**
         * Create a type array.
         * \param Builder        The DIBuilder.
         * \param Data           The type elements.
         * \param NumElements    Number of type elements.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderGetOrCreateTypeArray( LLVMDIBuilderRef Builder, out LLVMMetadataRef Data, size_t NumElements );

        /**
         * Create subroutine type.
         * \param Builder        The DIBuilder.
         * \param File            The file in which the subroutine resides.
         * \param ParameterTypes  An array of subroutine parameter types. This
         *                        includes return type at 0th index.
         * \param NumParameterTypes The number of parameter types in \c ParameterTypes
         * \param Flags           E.g.: \c LLVMDIFlagLValueReference.
         *                        These flags are used to emit dwarf attributes.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateSubroutineType( LLVMDIBuilderRef Builder, LLVMMetadataRef File, [MarshalAs( UnmanagedType.LPArray, ArraySubType = UnmanagedType.SysInt )]LLVMMetadataRef[] ParameterTypes, uint NumParameterTypes, LLVMDIFlags Flags );

        /**
         * Create debugging information entry for an enumeration.
         * \param Builder        The DIBuilder.
         * \param Scope          Scope in which this enumeration is defined.
         * \param Name           Enumeration name.
         * \param NameLen        Length of enumeration name.
         * \param File           File where this member is defined.
         * \param LineNumber     Line number.
         * \param SizeInBits     Member size.
         * \param AlignInBits    Member alignment.
         * \param Elements       Enumeration elements.
         * \param NumElements    Number of enumeration elements.
         * \param ClassTy        Underlying type of a C++11/ObjC fixed enum.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateEnumerationType( LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen, LLVMMetadataRef File, uint LineNumber, System.UInt64 SizeInBits, System.UInt32 AlignInBits, [MarshalAs( UnmanagedType.LPArray, ArraySubType = UnmanagedType.SysInt )]LLVMMetadataRef[] Elements, uint NumElements, LLVMMetadataRef ClassTy );

        /**
         * Create debugging information entry for a union.
         * \param Builder      The DIBuilder.
         * \param Scope        Scope in which this union is defined.
         * \param Name         Union name.
         * \param NameLen      Length of union name.
         * \param File         File where this member is defined.
         * \param LineNumber   Line number.
         * \param SizeInBits   Member size.
         * \param AlignInBits  Member alignment.
         * \param Flags        Flags to encode member attribute, e.g. private
         * \param Elements     Union elements.
         * \param NumElements  Number of union elements.
         * \param RunTimeLang  Optional parameter, Objective-C runtime version.
         * \param UniqueId     A unique identifier for the union.
         * \param UniqueIdLen  Length of unique identifier.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateUnionType( LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen, LLVMMetadataRef File, uint LineNumber, System.UInt64 SizeInBits, System.UInt32 AlignInBits, LLVMDIFlags Flags, [MarshalAs( UnmanagedType.LPArray, ArraySubType = UnmanagedType.SysInt )]LLVMMetadataRef[] Elements, uint NumElements, uint RunTimeLang, [MarshalAs( UnmanagedType.LPStr )]string UniqueId, size_t UniqueIdLen );

        /**
         * Create debugging information entry for an array.
         * \param Builder      The DIBuilder.
         * \param Size         Array size.
         * \param AlignInBits  Alignment.
         * \param Ty           Element type.
         * \param Subscripts   Subscripts.
         * \param NumSubscripts Number of subscripts.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateArrayType( LLVMDIBuilderRef Builder, System.UInt64 Size, System.UInt32 AlignInBits, LLVMMetadataRef Ty, [MarshalAs( UnmanagedType.LPArray, ArraySubType = UnmanagedType.SysInt )]LLVMMetadataRef[] Subscripts, uint NumSubscripts );

        /**
         * Create debugging information entry for a vector type.
         * \param Builder      The DIBuilder.
         * \param Size         Vector size.
         * \param AlignInBits  Alignment.
         * \param Ty           Element type.
         * \param Subscripts   Subscripts.
         * \param NumSubscripts Number of subscripts.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateVectorType( LLVMDIBuilderRef Builder, System.UInt64 Size, System.UInt32 AlignInBits, LLVMMetadataRef Ty, [MarshalAs( UnmanagedType.LPArray, ArraySubType = UnmanagedType.SysInt )]LLVMMetadataRef[] Subscripts, uint NumSubscripts );

        /**
         * Create a DWARF unspecified type.
         * \param Builder   The DIBuilder.
         * \param Name      The unspecified type's name.
         * \param NameLen   Length of type name.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateUnspecifiedType( LLVMDIBuilderRef Builder, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen );

        /**
         * Create debugging information entry for a basic
         * type.
         * \param Builder     The DIBuilder.
         * \param Name        Type name.
         * \param NameLen     Length of type name.
         * \param SizeInBits  Size of the type.
         * \param Encoding    DWARF encoding code, e.g. \c LLVMDWARFTypeEncoding_float.
         * \param Flags       Flags to encode optional attribute like endianity
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateBasicType( LLVMDIBuilderRef Builder, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen, System.UInt64 SizeInBits, System.UInt32 Encoding, LLVMDIFlags Flags );

        /**
         * Create debugging information entry for a pointer.
         * \param Builder     The DIBuilder.
         * \param PointeeTy         Type pointed by this pointer.
         * \param SizeInBits        Size.
         * \param AlignInBits       Alignment. (optional, pass 0 to ignore)
         * \param AddressSpace      DWARF address space. (optional, pass 0 to ignore)
         * \param Name              Pointer type name. (optional)
         * \param NameLen           Length of pointer type name. (optional)
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreatePointerType( LLVMDIBuilderRef Builder, LLVMMetadataRef PointeeTy, System.UInt64 SizeInBits, System.UInt32 AlignInBits, uint AddressSpace, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen );

        /**
         * Create debugging information entry for a struct.
         * \param Builder     The DIBuilder.
         * \param Scope        Scope in which this struct is defined.
         * \param Name         Struct name.
         * \param NameLen      Struct name length.
         * \param File         File where this member is defined.
         * \param LineNumber   Line number.
         * \param SizeInBits   Member size.
         * \param AlignInBits  Member alignment.
         * \param Flags        Flags to encode member attribute, e.g. private
         * \param Elements     Struct elements.
         * \param NumElements  Number of struct elements.
         * \param RunTimeLang  Optional parameter, Objective-C runtime version.
         * \param VTableHolder The object containing the vtable for the struct.
         * \param UniqueId     A unique identifier for the struct.
         * \param UniqueIdLen  Length of the unique identifier for the struct.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateStructType( LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen, LLVMMetadataRef File, uint LineNumber, System.UInt64 SizeInBits, System.UInt32 AlignInBits, LLVMDIFlags Flags, LLVMMetadataRef DerivedFrom, [MarshalAs( UnmanagedType.LPArray, ArraySubType = UnmanagedType.SysInt )]LLVMMetadataRef[] Elements, uint NumElements, uint RunTimeLang, LLVMMetadataRef VTableHolder, [MarshalAs( UnmanagedType.LPStr )]string UniqueId, size_t UniqueIdLen );

        /**
         * Create debugging information entry for a member.
         * \param Builder      The DIBuilder.
         * \param Scope        Member scope.
         * \param Name         Member name.
         * \param NameLen      Length of member name.
         * \param File         File where this member is defined.
         * \param LineNo       Line number.
         * \param SizeInBits   Member size.
         * \param AlignInBits  Member alignment.
         * \param OffsetInBits Member offset.
         * \param Flags        Flags to encode member attribute, e.g. private
         * \param Ty           Parent type.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateMemberType( LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen, LLVMMetadataRef File, uint LineNo, System.UInt64 SizeInBits, System.UInt32 AlignInBits, System.UInt64 OffsetInBits, LLVMDIFlags Flags, LLVMMetadataRef Ty );

        /**
         * Create debugging information entry for a
         * C++ static data member.
         * \param Builder      The DIBuilder.
         * \param Scope        Member scope.
         * \param Name         Member name.
         * \param NameLen      Length of member name.
         * \param File         File where this member is declared.
         * \param LineNumber   Line number.
         * \param Type         Type of the static member.
         * \param Flags        Flags to encode member attribute, e.g. private.
         * \param ConstantVal  Const initializer of the member.
         * \param AlignInBits  Member alignment.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateStaticMemberType( LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen, LLVMMetadataRef File, uint LineNumber, LLVMMetadataRef Type, LLVMDIFlags Flags, LLVMValueRef ConstantVal, System.UInt32 AlignInBits );

        /**
         * Create debugging information entry for a pointer to member.
         * \param Builder      The DIBuilder.
         * \param PointeeType  Type pointed to by this pointer.
         * \param ClassType    Type for which this pointer points to members of.
         * \param SizeInBits   Size.
         * \param AlignInBits  Alignment.
         * \param Flags        Flags.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateMemberPointerType( LLVMDIBuilderRef Builder, LLVMMetadataRef PointeeType, LLVMMetadataRef ClassType, System.UInt64 SizeInBits, System.UInt32 AlignInBits, LLVMDIFlags Flags );

        /**
         * Create debugging information entry for Objective-C instance variable.
         * \param Builder      The DIBuilder.
         * \param Name         Member name.
         * \param NameLen      The length of the C string passed to \c Name.
         * \param File         File where this member is defined.
         * \param LineNo       Line number.
         * \param SizeInBits   Member size.
         * \param AlignInBits  Member alignment.
         * \param OffsetInBits Member offset.
         * \param Flags        Flags to encode member attribute, e.g. private
         * \param Ty           Parent type.
         * \param PropertyNode Property associated with this ivar.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateObjCIVar( LLVMDIBuilderRef Builder, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen, LLVMMetadataRef File, uint LineNo, System.UInt64 SizeInBits, System.UInt32 AlignInBits, System.UInt64 OffsetInBits, LLVMDIFlags Flags, LLVMMetadataRef Ty, LLVMMetadataRef PropertyNode );

        /**
         * Create debugging information entry for Objective-C property.
         * \param Builder            The DIBuilder.
         * \param Name               Property name.
         * \param NameLen            The length of the C string passed to \c Name.
         * \param File               File where this property is defined.
         * \param LineNo             Line number.
         * \param GetterName         Name of the Objective C property getter selector.
         * \param GetterNameLen      The length of the C string passed to \c GetterName.
         * \param SetterName         Name of the Objective C property setter selector.
         * \param SetterNameLen      The length of the C string passed to \c SetterName.
         * \param PropertyAttributes Objective C property attributes.
         * \param Ty                 Type.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateObjCProperty( LLVMDIBuilderRef Builder, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen, LLVMMetadataRef File, uint LineNo, [MarshalAs( UnmanagedType.LPStr )]string GetterName, size_t GetterNameLen, [MarshalAs( UnmanagedType.LPStr )]string SetterName, size_t SetterNameLen, uint PropertyAttributes, LLVMMetadataRef Ty );

        /**
         * Create a uniqued DIType* clone with FlagObjectPointer and FlagArtificial set.
         * \param Builder   The DIBuilder.
         * \param Type      The underlying type to which this pointer points.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateObjectPointerType( LLVMDIBuilderRef Builder, LLVMMetadataRef Type );

        /**
         * Create debugging information entry for a qualified
         * type, e.g. 'const int'.
         * \param Builder     The DIBuilder.
         * \param Tag         Tag identifying type,
         *                    e.g. LLVMDWARFTypeQualifier_volatile_type
         * \param Type        Base Type.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateQualifiedType( LLVMDIBuilderRef Builder, uint Tag, LLVMMetadataRef Type );

        /**
         * Create debugging information entry for a c++
         * style reference or rvalue reference type.
         * \param Builder   The DIBuilder.
         * \param Tag       Tag identifying type,
         * \param Type      Base Type.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateReferenceType( LLVMDIBuilderRef Builder, uint Tag, LLVMMetadataRef Type );

        /**
         * Create C++11 nullptr type.
         * \param Builder   The DIBuilder.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateNullPtrType( LLVMDIBuilderRef Builder );

        /**
         * Create debugging information entry for a typedef.
         * \param Builder    The DIBuilder.
         * \param Type       Original type.
         * \param Name       Typedef name.
         * \param File       File where this type is defined.
         * \param LineNo     Line number.
         * \param Scope      The surrounding context for the typedef.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateTypedef( LLVMDIBuilderRef Builder, LLVMMetadataRef Type, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen, LLVMMetadataRef File, uint LineNo, LLVMMetadataRef Scope );

        /**
         * Create debugging information entry to establish inheritance relationship
         * between two types.
         * \param Builder       The DIBuilder.
         * \param Ty            Original type.
         * \param BaseTy        Base type. Ty is inherits from base.
         * \param BaseOffset    Base offset.
         * \param VBPtrOffset  Virtual base pointer offset.
         * \param Flags         Flags to describe inheritance attribute, e.g. private
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateInheritance( LLVMDIBuilderRef Builder, LLVMMetadataRef Ty, LLVMMetadataRef BaseTy, System.UInt64 BaseOffset, System.UInt32 VBPtrOffset, LLVMDIFlags Flags );

        /**
         * Create a permanent forward-declared type.
         * \param Builder             The DIBuilder.
         * \param Tag                 A unique tag for this type.
         * \param Name                Type name.
         * \param NameLen             Length of type name.
         * \param Scope               Type scope.
         * \param File                File where this type is defined.
         * \param Line                Line number where this type is defined.
         * \param RuntimeLang         Indicates runtime version for languages like
         *                            Objective-C.
         * \param SizeInBits          Member size.
         * \param AlignInBits         Member alignment.
         * \param UniqueIdentifier    A unique identifier for the type.
         * \param UniqueIdentifierLen Length of the unique identifier.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateForwardDecl( LLVMDIBuilderRef Builder, uint Tag, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen, LLVMMetadataRef Scope, LLVMMetadataRef File, uint Line, uint RuntimeLang, System.UInt64 SizeInBits, System.UInt32 AlignInBits, [MarshalAs( UnmanagedType.LPStr )]string UniqueIdentifier, size_t UniqueIdentifierLen );

        /**
         * Create a temporary forward-declared type.
         * \param Builder             The DIBuilder.
         * \param Tag                 A unique tag for this type.
         * \param Name                Type name.
         * \param NameLen             Length of type name.
         * \param Scope               Type scope.
         * \param File                File where this type is defined.
         * \param Line                Line number where this type is defined.
         * \param RuntimeLang         Indicates runtime version for languages like
         *                            Objective-C.
         * \param SizeInBits          Member size.
         * \param AlignInBits         Member alignment.
         * \param Flags               Flags.
         * \param UniqueIdentifier    A unique identifier for the type.
         * \param UniqueIdentifierLen Length of the unique identifier.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateReplaceableCompositeType( LLVMDIBuilderRef Builder, uint Tag, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen, LLVMMetadataRef Scope, LLVMMetadataRef File, uint Line, uint RuntimeLang, System.UInt64 SizeInBits, System.UInt32 AlignInBits, LLVMDIFlags Flags, [MarshalAs( UnmanagedType.LPStr )]string UniqueIdentifier, size_t UniqueIdentifierLen );

        /**
         * Create debugging information entry for a bit field member.
         * \param Builder             The DIBuilder.
         * \param Scope               Member scope.
         * \param Name                Member name.
         * \param NameLen             Length of member name.
         * \param File                File where this member is defined.
         * \param LineNumber          Line number.
         * \param SizeInBits          Member size.
         * \param OffsetInBits        Member offset.
         * \param StorageOffsetInBits Member storage offset.
         * \param Flags               Flags to encode member attribute.
         * \param Type                Parent type.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateBitFieldMemberType( LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen, LLVMMetadataRef File, uint LineNumber, System.UInt64 SizeInBits, System.UInt64 OffsetInBits, System.UInt64 StorageOffsetInBits, LLVMDIFlags Flags, LLVMMetadataRef Type );

        /**
         * Create debugging information entry for a class.
         * \param Scope               Scope in which this class is defined.
         * \param Name                Class name.
         * \param NameLen             The length of the C string passed to \c Name.
         * \param File                File where this member is defined.
         * \param LineNumber          Line number.
         * \param SizeInBits          Member size.
         * \param AlignInBits         Member alignment.
         * \param OffsetInBits        Member offset.
         * \param Flags               Flags to encode member attribute, e.g. private.
         * \param DerivedFrom         Debug info of the base class of this type.
         * \param Elements            Class members.
         * \param NumElements         Number of class elements.
         * \param VTableHolder        Debug info of the base class that contains vtable
         *                            for this type. This is used in
         *                            DW_AT_containing_type. See DWARF documentation
         *                            for more info.
         * \param TemplateParamsNode  Template type parameters.
         * \param UniqueIdentifier    A unique identifier for the type.
         * \param UniqueIdentifierLen Length of the unique identifier.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateClassType( LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen, LLVMMetadataRef File, uint LineNumber, System.UInt64 SizeInBits, System.UInt32 AlignInBits, System.UInt64 OffsetInBits, LLVMDIFlags Flags, LLVMMetadataRef DerivedFrom, out LLVMMetadataRef Elements, uint NumElements, LLVMMetadataRef VTableHolder, LLVMMetadataRef TemplateParamsNode, [MarshalAs( UnmanagedType.LPStr )]string UniqueIdentifier, size_t UniqueIdentifierLen );

        /**
         * Create a uniqued DIType* clone with FlagArtificial set.
         * \param Builder     The DIBuilder.
         * \param Type        The underlying type.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateArtificialType( LLVMDIBuilderRef Builder, LLVMMetadataRef Type );

        /**
         * Get the name of this DIType.
         * \param DType     The DIType.
         * \param Length    The length of the returned string.
         *
         * @see DIType::getName()
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LLVMDITypeGetName( LLVMMetadataRef DType, out size_t Length );

        /**
         * Get the size of this DIType in bits.
         * \param DType     The DIType.
         *
         * @see DIType::getSizeInBits()
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern System.UInt64 LLVMDITypeGetSizeInBits( LLVMMetadataRef DType );

        /**
         * Get the offset of this DIType in bits.
         * \param DType     The DIType.
         *
         * @see DIType::getOffsetInBits()
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern System.UInt64 LLVMDITypeGetOffsetInBits( LLVMMetadataRef DType );

        /**
         * Get the alignment of this DIType in bits.
         * \param DType     The DIType.
         *
         * @see DIType::getAlignInBits()
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern System.UInt32 LLVMDITypeGetAlignInBits( LLVMMetadataRef DType );

        /**
         * Get the source line where this DIType is declared.
         * \param DType     The DIType.
         *
         * @see DIType::getLine()
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMDITypeGetLine( LLVMMetadataRef DType );

        /**
         * Get the flags associated with this DIType.
         * \param DType     The DIType.
         *
         * @see DIType::getFlags()
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMDIFlags LLVMDITypeGetFlags( LLVMMetadataRef DType );

        /**
         * Create a descriptor for a value range.
         * \param Builder    The DIBuilder.
         * \param LowerBound Lower bound of the subrange, e.g. 0 for C, 1 for Fortran.
         * \param Count      Count of elements in the subrange.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderGetOrCreateSubrange( LLVMDIBuilderRef Builder, System.Int64 LowerBound, System.Int64 Count );

        /**
         * Create an array of DI Nodes.
         * \param Builder        The DIBuilder.
         * \param Data           The DI Node elements.
         * \param NumElements    Number of DI Node elements.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderGetOrCreateArray( LLVMDIBuilderRef Builder, out LLVMMetadataRef Data, size_t NumElements );

        /**
         * Create a new descriptor for the specified variable which has a complex
         * address expression for its address.
         * \param Builder     The DIBuilder.
         * \param Addr        An array of complex address operations.
         * \param Length      Length of the address operation array.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateExpression( LLVMDIBuilderRef Builder, out System.Int64 Addr, size_t Length );

        /**
         * Create a new descriptor for the specified variable that does not have an
         * address, but does have a constant value.
         * \param Builder     The DIBuilder.
         * \param Value       The constant value.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateConstantValueExpression( LLVMDIBuilderRef Builder, System.Int64 Value );

        /**
         * Create a new descriptor for the specified variable.
         * \param Scope       Variable scope.
         * \param Name        Name of the variable.
         * \param NameLen     The length of the C string passed to \c Name.
         * \param Linkage     Mangled  name of the variable.
         * \param LinkLen     The length of the C string passed to \c Linkage.
         * \param File        File where this variable is defined.
         * \param LineNo      Line number.
         * \param Ty          Variable Type.
         * \param LocalToUnit Boolean flag indicate whether this variable is
         *                    externally visible or not.
         * \param Expr        The location of the global relative to the attached
         *                    GlobalVariable.
         * \param Decl        Reference to the corresponding declaration.
         *                    variables.
         * \param AlignInBits Variable alignment(or 0 if no alignment attr was
         *                    specified)
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateGlobalVariableExpression( LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen, [MarshalAs( UnmanagedType.LPStr )]string Linkage, size_t LinkLen, LLVMMetadataRef File, uint LineNo, LLVMMetadataRef Ty, [MarshalAs( UnmanagedType.Bool )]bool LocalToUnit, LLVMMetadataRef Expr, LLVMMetadataRef Decl, System.UInt32 AlignInBits );

        /**
         * Create a new temporary \c MDNode.  Suitable for use in constructing cyclic
         * \c MDNode structures. A temporary \c MDNode is not uniqued, may be RAUW'd,
         * and must be manually deleted with \c LLVMDisposeTemporaryMDNode.
         * \param Ctx            The context in which to construct the temporary node.
         * \param Data           The metadata elements.
         * \param NumElements    Number of metadata elements.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMTemporaryMDNode( LLVMContextRef Ctx, out LLVMMetadataRef Data, size_t NumElements );

        /**
         * Deallocate a temporary node.
         *
         * Calls \c replaceAllUsesWith(nullptr) before deleting, so any remaining
         * references will be reset.
         * \param TempNode    The temporary metadata node.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMDisposeTemporaryMDNode( LLVMMetadataRef TempNode );

        /**
         * Replace all uses of temporary metadata.
         * \param TempTargetMetadata    The temporary metadata node.
         * \param Replacement           The replacement metadata node.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMMetadataReplaceAllUsesWith( LLVMMetadataRef TempTargetMetadata, LLVMMetadataRef Replacement );

        /**
         * Create a new descriptor for the specified global variable that is temporary
         * and meant to be RAUWed.
         * \param Scope       Variable scope.
         * \param Name        Name of the variable.
         * \param NameLen     The length of the C string passed to \c Name.
         * \param Linkage     Mangled  name of the variable.
         * \param LnkLen      The length of the C string passed to \c Linkage.
         * \param File        File where this variable is defined.
         * \param LineNo      Line number.
         * \param Ty          Variable Type.
         * \param LocalToUnit Boolean flag indicate whether this variable is
         *                    externally visible or not.
         * \param Decl        Reference to the corresponding declaration.
         * \param AlignInBits Variable alignment(or 0 if no alignment attr was
         *                    specified)
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateTempGlobalVariableFwdDecl( LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen, [MarshalAs( UnmanagedType.LPStr )]string Linkage, size_t LnkLen, LLVMMetadataRef File, uint LineNo, LLVMMetadataRef Ty, [MarshalAs( UnmanagedType.Bool )]bool LocalToUnit, LLVMMetadataRef Decl, System.UInt32 AlignInBits );

        /**
         * Insert a new llvm.dbg.declare intrinsic call before the given instruction.
         * \param Builder     The DIBuilder.
         * \param Storage     The storage of the variable to declare.
         * \param VarInfo     The variable's debug info descriptor.
         * \param Expr        A complex location expression for the variable.
         * \param DebugLoc    Debug info location.
         * \param Instr       Instruction acting as a location for the new intrinsic.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMDIBuilderInsertDeclareBefore( LLVMDIBuilderRef Builder, LLVMValueRef Storage, LLVMMetadataRef VarInfo, LLVMMetadataRef Expr, LLVMMetadataRef DebugLoc, LLVMValueRef Instr );

        /**
         * Insert a new llvm.dbg.declare intrinsic call at the end of the given basic
         * block. If the basic block has a terminator instruction, the intrinsic is
         * inserted before that terminator instruction.
         * \param Builder     The DIBuilder.
         * \param Storage     The storage of the variable to declare.
         * \param VarInfo     The variable's debug info descriptor.
         * \param Expr        A complex location expression for the variable.
         * \param DebugLoc    Debug info location.
         * \param Block       Basic block acting as a location for the new intrinsic.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMDIBuilderInsertDeclareAtEnd( LLVMDIBuilderRef Builder, LLVMValueRef Storage, LLVMMetadataRef VarInfo, LLVMMetadataRef Expr, LLVMMetadataRef DebugLoc, LLVMBasicBlockRef Block );

        /**
         * Insert a new llvm.dbg.value intrinsic call before the given instruction.
         * \param Builder     The DIBuilder.
         * \param Val         The value of the variable.
         * \param VarInfo     The variable's debug info descriptor.
         * \param Expr        A complex location expression for the variable.
         * \param DebugLoc    Debug info location.
         * \param Instr       Instruction acting as a location for the new intrinsic.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMDIBuilderInsertDbgValueBefore( LLVMDIBuilderRef Builder, LLVMValueRef Val, LLVMMetadataRef VarInfo, LLVMMetadataRef Expr, LLVMMetadataRef DebugLoc, LLVMValueRef Instr );

        /**
         * Insert a new llvm.dbg.value intrinsic call at the end of the given basic
         * block. If the basic block has a terminator instruction, the intrinsic is
         * inserted before that terminator instruction.
         * \param Builder     The DIBuilder.
         * \param Val         The value of the variable.
         * \param VarInfo     The variable's debug info descriptor.
         * \param Expr        A complex location expression for the variable.
         * \param DebugLoc    Debug info location.
         * \param Block       Basic block acting as a location for the new intrinsic.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LLVMDIBuilderInsertDbgValueAtEnd( LLVMDIBuilderRef Builder, LLVMValueRef Val, LLVMMetadataRef VarInfo, LLVMMetadataRef Expr, LLVMMetadataRef DebugLoc, LLVMBasicBlockRef Block );

        /**
         * Create a new descriptor for a local auto variable.
         * \param Builder         The DIBuilder.
         * \param Scope           The local scope the variable is declared in.
         * \param Name            Variable name.
         * \param NameLen         Length of variable name.
         * \param File            File where this variable is defined.
         * \param LineNo          Line number.
         * \param Ty              Metadata describing the type of the variable.
         * \param AlwaysPreserve  If true, this descriptor will survive optimizations.
         * \param Flags           Flags.
         * \param AlignInBits     Variable alignment.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateAutoVariable( LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen, LLVMMetadataRef File, uint LineNo, LLVMMetadataRef Ty, [MarshalAs( UnmanagedType.Bool )]bool AlwaysPreserve, LLVMDIFlags Flags, System.UInt32 AlignInBits );

        /**
         * Create a new descriptor for a function parameter variable.
         * \param Builder         The DIBuilder.
         * \param Scope           The local scope the variable is declared in.
         * \param Name            Variable name.
         * \param NameLen         Length of variable name.
         * \param ArgNo           Unique argument number for this variable; starts at 1.
         * \param File            File where this variable is defined.
         * \param LineNo          Line number.
         * \param Ty              Metadata describing the type of the variable.
         * \param AlwaysPreserve  If true, this descriptor will survive optimizations.
         * \param Flags           Flags.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateParameterVariable( LLVMDIBuilderRef Builder, LLVMMetadataRef Scope, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen, uint ArgNo, LLVMMetadataRef File, uint LineNo, LLVMMetadataRef Ty, [MarshalAs( UnmanagedType.Bool )]bool AlwaysPreserve, LLVMDIFlags Flags );

        /**
         * Get the metadata of the subprogram attached to a function.
         *
         * @see llvm::Function::getSubprogram()
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMGetSubprogram( LLVMValueRef Func );

        /**
         * Set the subprogram attached to a function.
         *
         * @see llvm::Function::setSubprogram()
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMSetSubprogram( LLVMValueRef Func, LLVMMetadataRef SP );

        /**
         * Obtain the enumerated type of a Metadata instance.
         *
         * @see llvm::Metadata::getMetadataID()
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataKind LLVMGetMetadataKind( LLVMMetadataRef Metadata );

    }
}
