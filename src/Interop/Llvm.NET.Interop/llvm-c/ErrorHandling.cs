// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 2.17941.31104.49410
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.CodeDom.Compiler;
using System.Runtime.InteropServices;
using System.Security;

namespace Llvm.NET.Interop
{
    [UnmanagedFunctionPointer( global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
    public delegate void LLVMFatalErrorHandler( [MarshalAs( UnmanagedType.LPStr )]string Reason );

    public static partial class NativeMethods
    {
        /**
         * Install a fatal error handler. By default, if LLVM detects a fatal error, it
         * will call exit(1). This may not be appropriate in many contexts. For example,
         * doing exit(1) will bypass many crash reporting/tracing system tools. This
         * function allows you to install a callback that will be invoked prior to the
         * call to exit(1).
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMInstallFatalErrorHandler( LLVMFatalErrorHandler Handler );

        /**
         * Reset the fatal error handler. This resets LLVM's fatal error handling
         * behavior to the default.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMResetFatalErrorHandler(  );

        /**
         * Enable LLVM's built-in stack trace code. This intercepts the OS's crash
         * signals and prints which component of LLVM you were in at the time if the
         * crash.
         */
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMEnablePrettyStackTrace(  );

    }
}
