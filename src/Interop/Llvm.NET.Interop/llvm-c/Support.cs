// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 2.17941.31104.49410
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.CodeDom.Compiler;
using System.Runtime.InteropServices;
using System.Security;

namespace Llvm.NET.Interop
{
    public static partial class NativeMethods
    {
        /// <include file="Support.xml" path='LibLLVMAPI/Function[@name="LLVMLoadLibraryPermanently"]/*' />
        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMLoadLibraryPermanently( [MarshalAs( UnmanagedType.LPStr )]string Filename );

        /// <include file="Support.xml" path='LibLLVMAPI/Function[@name="LLVMParseCommandLineOptions"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMParseCommandLineOptions( int argc, [MarshalAs( UnmanagedType.LPStr, ArraySubType = UnmanagedType.LPStr )]global::System.String[] argv, [MarshalAs( UnmanagedType.LPStr )]string Overview );

        /// <include file="Support.xml" path='LibLLVMAPI/Function[@name="LLVMSearchForAddressOfSymbol"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern global::System.IntPtr LLVMSearchForAddressOfSymbol( [MarshalAs( UnmanagedType.LPStr )]string symbolName );

        /// <include file="Support.xml" path='LibLLVMAPI/Function[@name="LLVMAddSymbol"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMAddSymbol( [MarshalAs( UnmanagedType.LPStr )]string symbolName, global::System.IntPtr symbolValue );

    }
}
