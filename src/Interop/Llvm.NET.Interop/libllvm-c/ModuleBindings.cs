// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 2.17941.31104.49410
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.CodeDom.Compiler;
using System.Runtime.InteropServices;
using System.Security;

namespace Llvm.NET.Interop
{
    /// <include file="ModuleBindings.xml" path='LibLLVMAPI/Delegate[@name="LibLLVMComdatIteratorCallback"]/*' />
    [UnmanagedFunctionPointer( global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
    public delegate bool LibLLVMComdatIteratorCallback( LLVMComdatRef comdatRef );

    public static partial class NativeMethods
    {
        /// <include file="ModuleBindings.xml" path='LibLLVMAPI/Function[@name="LibLLVMGetOrInsertFunction"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LibLLVMGetOrInsertFunction( LLVMModuleRef module, [MarshalAs( UnmanagedType.LPStr )]string name, LLVMTypeRef functionType );

        /// <include file="ModuleBindings.xml" path='LibLLVMAPI/Function[@name="LibLLVMGetModuleSourceFileName"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LibLLVMGetModuleSourceFileName( LLVMModuleRef module );

        /// <include file="ModuleBindings.xml" path='LibLLVMAPI/Function[@name="LibLLVMSetModuleSourceFileName"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LibLLVMSetModuleSourceFileName( LLVMModuleRef module, [MarshalAs( UnmanagedType.LPStr )]string name );

        /// <include file="ModuleBindings.xml" path='LibLLVMAPI/Function[@name="LibLLVMGetModuleName"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( AliasStringMarshaler ) )]
        public static extern string LibLLVMGetModuleName( LLVMModuleRef module );

        /// <include file="ModuleBindings.xml" path='LibLLVMAPI/Function[@name="LibLLVMGetGlobalAlias"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LibLLVMGetGlobalAlias( LLVMModuleRef module, [MarshalAs( UnmanagedType.LPStr )]string name );

        /// <include file="ModuleBindings.xml" path='LibLLVMAPI/Function[@name="LibLLVMModuleEnumerateComdats"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LibLLVMModuleEnumerateComdats( LLVMModuleRef module, LibLLVMComdatIteratorCallback callback );

        /// <include file="ModuleBindings.xml" path='LibLLVMAPI/Function[@name="LibLLVMModuleInsertOrUpdateComdat"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMComdatRef LibLLVMModuleInsertOrUpdateComdat( LLVMModuleRef module, [MarshalAs( UnmanagedType.LPStr )]string name, LLVMComdatSelectionKind kind );

        /// <include file="ModuleBindings.xml" path='LibLLVMAPI/Function[@name="LibLLVMModuleComdatRemove"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LibLLVMModuleComdatRemove( LLVMModuleRef module, LLVMComdatRef comdatRef );

        /// <include file="ModuleBindings.xml" path='LibLLVMAPI/Function[@name="LibLLVMModuleComdatClear"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LibLLVMModuleComdatClear( LLVMModuleRef module );

        /// <include file="ModuleBindings.xml" path='LibLLVMAPI/Function[@name="LibLLVMComdatGetName"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( ErrorMessageMarshaler ) )]
        public static extern string LibLLVMComdatGetName( LLVMComdatRef comdatRef );

        /// <include file="ModuleBindings.xml" path='LibLLVMAPI/Function[@name="LibLLVMModuleGetFirstGlobalAlias"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LibLLVMModuleGetFirstGlobalAlias( LLVMModuleRef M );

        /// <include file="ModuleBindings.xml" path='LibLLVMAPI/Function[@name="LibLLVMModuleGetNextGlobalAlias"]/*' />
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMValueRef LibLLVMModuleGetNextGlobalAlias( LLVMValueRef valueRef );

    }
}
