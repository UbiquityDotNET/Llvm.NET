// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 2.17941.31104.49410
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.CodeDom.Compiler;
using System.Runtime.InteropServices;
using System.Security;

namespace Llvm.NET.Interop
{
    [GeneratedCode("LlvmBindingsGenerator","2.17941.31104.49410")]
    public enum LLVMDwarfTag : global::System.Int32
    {
        LLVMDwarfTagArrayType = 1,
        LLVMDwarfTagClassType = 2,
        LLVMDwarfTagEntryPoint = 3,
        LLVMDwarfTagEnumerationType = 4,
        LLVMDwarfTagFormalParameter = 5,
        LLVMDwarfTagImportedDeclaration = 8,
        LLVMDwarfTagLabel = 10,
        LLVMDwarfTagLexicalBlock = 11,
        LLVMDwarfTagMember = 13,
        LLVMDwarfTagPointerType = 15,
        LLVMDwarfTagReferenceType = 16,
        LLVMDwarfTagCompileUnit = 17,
        LLVMDwarfTagStringType = 18,
        LLVMDwarfTagStructureType = 19,
        LLVMDwarfTagSubroutineType = 21,
        LLVMDwarfTagTypeDef = 22,
        LLVMDwarfTagUnionType = 23,
        LLVMDwarfTagUnspecifiedParameters = 24,
        LLVMDwarfTagVariant = 25,
        LLVMDwarfTagCommonBlock = 26,
        LLVMDwarfTagCommonInclusion = 27,
        LLVMDwarfTagInheritance = 28,
        LLVMDwarfTagInlinedSubroutine = 29,
        LLVMDwarfTagModule = 30,
        LLVMDwarfTagPtrToMemberType = 31,
        LLVMDwarfTagSetType = 32,
        LLVMDwarfTagSubrangeType = 33,
        LLVMDwarfTagWithStatement = 34,
        LLVMDwarfTagAccessDeclaration = 35,
        LLVMDwarfTagBaseType = 36,
        LLVMDwarfTagCatchBlock = 37,
        LLVMDwarfTagConstType = 38,
        LLVMDwarfTagConstant = 39,
        LLVMDwarfTagEnumerator = 40,
        LLVMDwarfTagFileType = 41,
        LLVMDwarfTagFriend = 42,
        LLVMDwarfTagNameList = 43,
        LLVMDwarfTagNameListItem = 44,
        LLVMDwarfTagPackedType = 45,
        LLVMDwarfTagSubProgram = 46,
        LLVMDwarfTagTemplateTypeParameter = 47,
        LLVMDwarfTagTemplateValueParameter = 48,
        LLVMDwarfTagThrownType = 49,
        LLVMDwarfTagTryBlock = 50,
        LLVMDwarfTagVariantPart = 51,
        LLVMDwarfTagVariable = 52,
        LLVMDwarfTagVolatileType = 53,
        LLVMDwarfTagDwarfProcedure = 54,
        LLVMDwarfTagRestrictType = 55,
        LLVMDwarfTagInterfaceType = 56,
        LLVMDwarfTagNamespace = 57,
        LLVMDwarfTagImportedModule = 58,
        LLVMDwarfTagUnspecifiedType = 59,
        LLVMDwarfTagPartialUnit = 60,
        LLVMDwarfTagImportedUnit = 61,
        LLVMDwarfTagCondition = 63,
        LLVMDwarfTagSharedType = 64,
        LLVMDwarfTagTypeUnit = 65,
        LLVMDwarfTagRValueReferenceType = 66,
        LLVMDwarfTagTemplateAlias = 67,
        LLVMDwarfTagCoArrayType = 68,
        LLVMDwarfTagGenericSubrange = 69,
        LLVMDwarfTagDynamicType = 70,
        LLVMDwarfTagMipsLoop = 16513,
        LLVMDwarfTagFormatLabel = 16641,
        LLVMDwarfTagFunctionTemplate = 16642,
        LLVMDwarfTagClassTemplate = 16643,
        LLVMDwarfTagGnuTemplateTemplateParam = 16646,
        LLVMDwarfTagGnuTemplateParameterPack = 16647,
        LLVMDwarfTagGnuFormalParameterPack = 16648,
        LLVMDwarfTagLoUser = 16512,
        LLVMDwarfTagAppleProperty = 16896,
        LLVMDwarfTagHiUser = 65535,
    }

    public static partial class NativeMethods
    {
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMDIBasicTypeGetEncoding( LLVMMetadataRef basicType );

        [return: MarshalAs( UnmanagedType.Bool )]
        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern bool LLVMSubProgramDescribes( LLVMMetadataRef subProgram, LLVMValueRef F );

        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMContextRefAlias LLVMGetNodeContext( LLVMMetadataRef node );

        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDIBuilderCreateTempFunctionFwdDecl( LLVMDIBuilderRef D, LLVMMetadataRef Scope, [MarshalAs( UnmanagedType.LPStr )]string Name, size_t NameLen, [MarshalAs( UnmanagedType.LPStr )]string LinkageName, size_t LinakgeNameLen, LLVMMetadataRef File, uint LineNo, LLVMMetadataRef Ty, [MarshalAs( UnmanagedType.Bool )]bool isLocalToUnit, [MarshalAs( UnmanagedType.Bool )]bool isDefinition, uint ScopeLine, LLVMDIFlags Flags, [MarshalAs( UnmanagedType.Bool )]bool isOptimized );

        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMDIBuilderFinalizeSubProgram( LLVMDIBuilderRef dref, LLVMMetadataRef subProgram );

        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDILocation( LLVMContextRef context, uint Line, uint Column, LLVMMetadataRef scope, LLVMMetadataRef InlinedAt );

        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern global::Llvm.NET.Interop.LLVMDwarfTag LLVMDIDescriptorGetTag( LLVMMetadataRef descriptor );

        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDILocationGetInlinedAt( LLVMMetadataRef location );

        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMDILocationGetInlinedAtScope( LLVMMetadataRef location );

        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        [return: MarshalAs( UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof( DisposeMessageMarshaler ) )]
        public static extern string LLVMMetadataAsString( LLVMMetadataRef descriptor );

        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern System.UInt32 LLVMMDNodeGetNumOperands( LLVMMetadataRef node );

        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMDOperandRef LLVMMDNodeGetOperand( LLVMMetadataRef node, System.UInt32 index );

        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMMDNodeReplaceOperand( LLVMMetadataRef node, System.UInt32 index, LLVMMetadataRef operand );

        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMGetOperandNode( LLVMMDOperandRef operand );

        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMModuleRef LLVMNamedMetadataGetParentModule( LLVMNamedMDNodeRef namedMDNode );

        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMNamedMetadataEraseFromParent( LLVMNamedMDNodeRef namedMDNode );

        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataKind LLVMGetMetadataID( LLVMMetadataRef md );

        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern uint LLVMNamedMDNodeGetNumOperands( LLVMNamedMDNodeRef namedMDNode );

        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern LLVMMetadataRef LLVMNamedMDNodeGetOperand( LLVMNamedMDNodeRef namedMDNode, uint index );

        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMNamedMDNodeSetOperand( LLVMNamedMDNodeRef namedMDNode, uint index, LLVMMetadataRef node );

        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMNamedMDNodeAddOperand( LLVMNamedMDNodeRef namedMDNode, LLVMMetadataRef node );

        [SuppressUnmanagedCodeSecurity]
        [DllImport( LibraryPath, CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl )]
        public static extern void LLVMNamedMDNodeClearOperands( LLVMNamedMDNodeRef namedMDNode );

    }
}
