<Project InitialTargets="VerifyProjectSettings;SetProjectSpecficVersionDependentProperties;ShowBuildParameters">
    <!--
    It is tempting to place the SDK ref here so that all the projects benefit from it
    However, since this repo has C++ VCXPROJ projects, that doesn't work. It will pull
    in requirements that break a VCXPROJ (or anything still stuck in the dark ages with Packages.config)
    <Sdk Name="Microsoft.Build.CentralPackageVersions"/>
    -->
    <!--
    Since Nuget.config is configured to include the build output location this
    will ensure the folder exists during restore so that it won't fail.
    -->
    <Target Name="CreateBuildOutputNuget" BeforeTargets="Restore;Build;Rebuild">
        <MakeDir Directories="$(MSBuildThisFileDirectory)BuildOutput\NuGet" />
    </Target>

    <Target Name="SetProjectSpecficVersionDependentProperties">
        <PropertyGroup>
            <LlvmVersion Condition="'$(LlvmVersion)'==''">$(LlvmVersionMajor).$(LlvmVersionMinor).$(LlvmVersionPatch)</LlvmVersion>
            <NuspecProperties Condition="'$(NuspecFile)'!=''" >version=$(PackageVersion);llvmversion=$(LlvmVersion);buildbinoutput=$(BaseOutputPath);configuration=$(Configuration);$(NuspecProperties)</NuspecProperties>
        </PropertyGroup>
    </Target>

    <!-- Download nuget.exe if it isn't found-->
    <Target Name="_DownloadNugetExe" >
        <MakeDir Directories="$(PackageOutputPath)" Condition="!EXISTS('$(PackageOutputPath')" />
        <DownloadFile Condition="!EXISTS('$(PackageOutputPath)\NuGet.exe')"
                      SourceUrl="https://dist.nuget.org/win-x86-commandline/latest/nuget.exe"
                      DestinationPath="$(PackageOutputPath)\NuGet.exe"
                  />
    </Target>

    <!--
    Version numbers are computed at build time after any declarative properties are evaluated
    so this is needed to update the NuSpec properties with the dynamically generated values
    NOTE: This can't use NuspecProperties as that is only applicable when using a NuSpec file.
          Worse, it can cause a NullReferenceException (See: https://github.com/NuGet/Home/issues/4649 )
    -->
    <Target Name="_SetNuSpecPropertiesWithBuildInfo"
            BeforeTargets="GenerateNuspec"
            Condition="'$(MSBuildProjectExtension)'=='.csproj' AND $(GeneratePackageOnBuild)=='true'"
            >
        <PropertyGroup>
            <Description>$(Description) $(llvmVersion)</Description>
        </PropertyGroup>
        <Message Importance="high" Text="llvmVersion=$(llvmVersion)" />
    </Target>

    <Target Name="EnsureLocalNugetFolder" Condition="!EXISTS($(PackageOutputPath))" BeforeTargets="Restore">
        <MakeDir Directories="$(PackageOutputPath)" />
    </Target>

    <!-- Custom task to download a file from a web URL -->
    <UsingTask TaskName="DownloadFile"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll"
           >
        <ParameterGroup>
            <SourceUrl ParameterType="System.String" Required="true"/>
            <DestinationPath ParameterType="System.String" Required="true"/>
        </ParameterGroup>
        <Task>
            <Using Namespace="System.Net"/>
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                    var client = new WebClient();
                    client.DownloadFile( SourceUrl, DestinationPath );
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <!-- Create NuGet packages for NuSpec property in VCXPROJ projects -->
    <Target Name="Pack" DependsOnTargets="_DownloadNugetExe;SetProjectSpecficVersionDependentProperties" Condition="'$(MSBuildProjectExtension)'=='.vcxproj'">
        <Exec Condition="exists('$(NuSpecFile)')"
              Command='"$(PackageOutputPath)NuGet.exe" pack $(NuSpecFile) -OutputDirectory $(PackageOutputPath) -Properties $(NuspecProperties) -NoPackageAnalysis' />
    </Target>

    <Target Name="EnsureBuildOutputPaths" BeforeTargets="Build;Restore">
        <MakeDir Directories="$(PackageOutputPath)"/>
    </Target>

    <Target Name="ShowBuildParameters">
        <Message Importance="normal" Text="              BuildRootDir: $(BuildRootDir)" />
        <Message Importance="normal" Text="       BaseBuildOutputPath: $(BaseBuildOutputPath)" />
        <Message Importance="normal" Text="    BaseBuildOutputBinPath: $(BaseBuildOutputBinPath)" />
        <Message Importance="normal" Text="BaseIntermediateOutputPath: $(BaseIntermediateOutputPath)" />
        <Message Importance="normal" Text="                    IntDir: $(IntDir)" />
        <Message Importance="normal" Text="            BaseOutputPath: $(BaseOutputPath)" />
        <Message Importance="normal" Text="           FullBuildNumber: $(FullBuildNumber)"/>
        <Message Importance="normal" Text="            PackageVersion: $(PackageVersion)"/>
        <Message Importance="normal" Text="               FileVersion: $(FileVersion)"/>
        <Message Importance="normal" Text="               LlvmVersion: $(LlvmVersion)"/>
        <Message Importance="normal" Text="                  Platform: $(Platform)"/>
        <Message Importance="normal" Text="             Configuration: $(Configuration)"/>
    </Target>

    <Target Name="VerifyProjectSettings" Condition="'$(MSBuildProjectExtension)'=='.csproj'">
        <!--
        Detect if something has this horrible non-feature enabled. It is a blight on the language that should never have been added
        let alone used as the default for projects with no way to block/disable it all up... [Only a subtle, default on, per project option is available]
        NOTE:
        .editorconfig in this repo includes `csharp_style_prefer_top_level_statements = false:error` to ensure that bad design choice isn't used either.
        -->
        <Error Condition="'$(ImplicitUsings)'!='disable'" Text="$(MSBuildProjectFile) - Projects in this repository MUST NOT have ImplicitUsings enabled!"/>
    </Target>
</Project>
