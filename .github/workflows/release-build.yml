name: Release-Build
on:
  push:
    tags:
        - 'v*'

jobs:
  build_native:
    runs-on: windows-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
           persist-credentials: false
           fetch-depth: 0

      - name: Build Native
        run: ./Build-Native.ps1

      - name: Publish native binary
        uses: actions/upload-artifact@v1
        with:
          name: win-x64
          path: ./BuildOutput/xplat/win-x64

      - name: Publish Llvm headers
        uses: actions/upload-artifact@v1
        with:
          name: include
          path: ./llvm/include

  build_dotnet:
    runs-on: windows-latest
    needs: build_native
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
           persist-credentials: false
           fetch-depth: 0

      - name: Download Native Binaries
        uses: actions/download-artifact@v2
        with:
          path: ./BuildOutput/xplat

      - name: Move include files
        run: Move-Item -Path ./BuildOutput/xplat/include -Destination ./llvm/

      - name: Build .NET Packages
        run: ./Build-Source.ps1

      - name: Publish Build Logs
        if: always() && github.event_name == 'pull_request'
        uses: actions/upload-artifact@v1
        with:
            name: Build Logs
            path: .\BuildOutput\BinLogs

      - name: Publish NuGet Packages
        uses: actions/upload-artifact@v1
        with:
          name: NuGet Packages
          path: ./BuildOutput/NuGet

  test:
    runs-on: windows-latest
    needs: build_dotnet
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
           persist-credentials: false
           fetch-depth: 0

      - name: Download NuGet Packages
        uses: actions/download-artifact@v2
        with:
          name: NuGet Packages
          path: ./BuildOutput/NuGet

      - name: Invoke Unit Tests
        run: ./Invoke-UnitTests.ps1
        shell: pwsh

      - name: Publish Test Logs
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: Test Logs
          path: ./BuildOutput/Test-Results

  build_docs:
    runs-on: windows-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
           persist-credentials: false
           fetch-depth: 0

      - name: Build Docs
        run: .\Build-Docs.ps1

      - name: Upload docs artifact
        uses: actions/upload-artifact@v1
        with:
            name: Docs
            path: .\BuildOutput\docs\current

      - name: Publish build logs
        if: always() && github.event_name == 'pull_request'
        uses: actions/upload-artifact@v1
        with:
            name: Build Logs
            path: .\BuildOutput\BinLogs

  release_build:
    runs-on: windows-latest
    needs: [build_docs, test]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Download NuGet Packages
        uses: actions/download-artifact@v2
        with:
          name: NuGet Packages
          path: ./BuildOutput/NuGet

      - name: Download Docs
        uses: actions/download-artifact@v2
        with:
          name: Docs
          path: ./BuildOutput/docs/current

      - name: Commit Docs
        env:
          docspush_email: 32618965+cibuild-telliam@users.noreply.github.com
          docspush_username: cibuild-telliam
        run: .\Push-Docs.ps1 -SkipPush

      - name: Push Docs
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          directory: .\BuildOutput\docs
          branch: gh-pages

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Compress NuGet packages
        run: Compress-Archive -Path ./BuildOutput/NuGet -DestinationPath ./BuildOutput/NuGet.Packages.zip -CompressionLevel Optimal
        shell: pwsh

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./BuildOutput/NuGet.Packages.zip
          asset_name: NuGet.Packages.zip
          asset_content_type: application/zip

      - name: Publish packages to NuGet.org
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.nugetpush_access_token }}
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
        run: |
            dir .\BuildOutput\NuGet\*.nupkg | %{dotnet nuget push $_ -k $env:NUGET_AUTH_TOKEN -s 'https://api.nuget.org/v3/index.json' -n true}
